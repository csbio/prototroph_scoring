function varargout = CellProfiler(varargin)
 
% CellProfilerTM cell image analysis software
%
% CellProfiler cell image analysis software is designed for biologists
% without training in computer vision or programming to quantitatively
% measure phenotypes from thousands of images automatically.
%
% CellProfiler Developer's version allows you to write your own modules and
% tools for CellProfiler using Matlab.

% CellProfiler is distributed under the GNU General Public License.
% See the accompanying file LICENSE for details.
%
% Developed by the Whitehead Institute for Biomedical Research.
% Copyright 2003,2004,2005.
%
% Please see the AUTHORS file for credits.
%
% Website: http://www.cellprofiler.org
%
% $Revision: 7485 $

%%% Do not remove the following line.  It is used by CompileWizard.m.
%%% FUNCTIONS TO ADD (place before first line of code in CellProfiler.m)
%#function ImageToolWindow InteractiveZoom OpenNewImageFile ShowHelpForThisMenu ShowOrHidePixelData AddData CalculateRatiosDataTool CalculateStatisticsDataTool ClearData ConvertBatchFiles DataLayout ExportData ExportDatabase ExportLocations FlagImageByMeasurement GenerateHistogramMovie Histogram MeasurementCalculator MergeOutputFiles PlotMeasurement ShowDataOnImage ShowPlateMapData SubmitBatch ViewData Align ApplyThreshold CalculateImageOverlap CalculateMath CalculateStatistics ClassifyObjects ClassifyObjectsByTwoMeasurements ColorToGray Combine ConvertToImage CorrectIllumination_Apply CorrectIllumination_Calculate CreateBatchFiles CreateWebPage Crop DICTransform DefineGrid DifferentiateStains DisplayDataOnImage DisplayGridInfo DisplayHistogram DisplayImageHistogram DisplayMeasurement EditObjectsManually Exclude ExpandOrShrink ExportToDatabase ExportToExcel FileNameMetadata FilterByObjectMeasurement FindEdges FlagImageForQC FlipAndRotate GrayToColor GroupMovieFrames IdentifyObjectsInGrid IdentifyPrimAutomatic IdentifyPrimLoG IdentifyPrimManual IdentifySecondary IdentifyTertiarySubregion ImageMath InvertForPrinting KeepLargestObject LabelImages LoadImageDirectory LoadImages LoadSingleImage LoadText MakeProjection MaskImage MeasureCorrelation MeasureImageAreaOccupied MeasureImageGranularity MeasureImageIntensity MeasureImageQuality MeasureObjectAreaShape MeasureObjectIntensity MeasureObjectNeighbors MeasureRadialDistribution MeasureTexture Morph OverlayOutlines PauseCellProfiler PlaceAdjacent RelabelObjects Relate RenameOrRenumberFiles RescaleIntensity Resize Restart SaveImages SendEmail SmoothOrEnhance SpeedUpCellProfiler SplitOrSpliceMovie SubtractBackground Tile TrackObjects CPShowPlateMapDataFig CPShowPlateMapDataGUI CP_ImagePopupmenu_Callback CP_OrigNewImage_Callback CP_VZfactors CP_convert_old_measurements CPaddmeasurements CPaverageimages CPblkproc CPcalc_illum_corrxn CPcalculateStatistics CPcd CPclearborder CPclosefigure CPcompilesubfunction CPconfirmallimagespresent CPcontrolhistogram CPconvertsql CPcreateCPAPropertiesFile CPdensity_plot CPdilatebinaryobjects CPdir CPdynamizescrollbar CPec50 CPeditbox CPerrorImread CPerrordlg CPfigure CPfigurehandle CPfill_holes CPgetdirectorytree CPgetfeature CPgetfeaturenamesfromnumbers CPgetpriorcategories CPgetpriormeasurements CPgetpriorscales CPhelpdlg CPhilberttransform CPhistbins CPimagesc CPimagetool CPimcapture CPimportPreviousModuleSettings CPimread CPinputdlg CPjoinstrings CPjustify CPlabel2rgb CPlabelperim CPlargestComponents CPlineintegration CPlistdlg CPljosaprobseg CPlogo CPmakegrid CPminimizeenergy CPminimizeenergy2 CPmsgbox CPnanmean CPnanmedian CPnanstd CPnlintool CPplatemap CPplotmeasurement CPquestdlg CPrandomwalker CPrelabelDensely CPrelateobjects CPremap_from_example CPreplacemetadata CPrescale CPresizefigure CPretrieveimage CPretrievemediafilenames CPrgsmartdilate CPsaveFileNamesToHandles CPsaveObjectCount CPsaveObjectLocations CPscreensize CPselectdirectories CPselectmodules CPselectoutputfiles CPsigmoid CPsmooth CPsvnloopfunctions CPsvnversionnumber CPtextdisplaybox CPtextpipe CPthresh_tool CPthreshold CPtiffread CPtruncatefeaturename CPtwodigitstring CPuigetdir CPuigetfile CPuiputfile CPupdatefigurecycle CPvalidfieldname CPvariancefilter CPvisualizeProbabilisticSegmentation CPwaitbar CPwarndlg CPwhichmodule CPwritemeasurements
%%% Compiler: INSERT FUNCTIONS HERE

% Begin initialization code - DO NOT EDIT
if ~nargin
    SplashScreen;
    tic
    if ~isdeployed
        try
            subdirs = strread(genpath(fileparts(which('CellProfiler'))), '%s','delimiter',pathsep);
            subdirs = subdirs(cellfun('isempty', strfind(subdirs, '.svn')));
            addpath(subdirs{:});
            savepath;
        catch CPerrordlg('You changed the name of CellProfiler.m file. Consequences of this are unknown.');
        end
    end
end
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
    'gui_Singleton',  gui_Singleton, ...
    'gui_OpeningFcn', @CellProfiler_OpeningFcn, ...
    'gui_OutputFcn',  @CellProfiler_OutputFcn, ...
    'gui_LayoutFcn',  @CellProfiler_LayoutFcn, ...
    'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT

%%%%%%%%%%%%%%%%%%%%%%%%
%%% INITIAL SETTINGS %%%
%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes just before CellProfiler is made visible.
function CellProfiler_OpeningFcn(hObject, eventdata, handles, varargin) %#ok We want to ignore MLint error checking for this line.

% Chooses default command line output for CellProfiler
handles.output = hObject;

%%% Creates variables for later use.
handles.Settings = struct;
handles.Pipeline = struct;
handles.Measurements = struct;
handles.Preferences = struct;
handles.Current.NumberOfModules = 0;

global closeFigures openFigures;
closeFigures = [];
openFigures = [];

%%% Determines the startup directory.
handles.Current.StartupDirectory = pwd;
if ~isdeployed
    addpath(pwd);
end
if isdeployed
    pathstr = ctfroot;  % No trailing slash
    % Since the CTF is extracted in the CellProfiler directory, we want the
    % startup dir to be one level up
    filesepidx = findstr(pathstr,filesep);
    if length(filesepidx) > 1,
        pathstr = pathstr(1:filesepidx(end)-1);
    end
    handles.Current.StartupDirectory = pathstr;
end

handles.FunctionHandles.LoadPipelineCallback = @LoadPipeline_Callback;
%%% Retrieves preferences from CellProfilerPreferences.mat, if possible.
%%% Try loading CellProfilerPreferences.mat first from the matlabroot
%%% directory and then the current directory.  This is not necessary for
%%% CellProfiler to function; it just allows defaults to be
%%% pre-loaded.
if isdeployed
    try
        load(fullfile(handles.Current.StartupDirectory, 'CellProfilerPreferences.mat'))
        LoadedPreferences = SavedPreferences;
        clear SavedPreferences
    end
    handles.Preferences.DefaultModuleDirectory = fullfile(pwd,'Modules');
else
    try
        load(fullfile(matlabroot,'CellProfilerPreferences.mat'))
        LoadedPreferences = SavedPreferences;
        clear SavedPreferences
    catch
        try
            load(fullfile(handles.Current.StartupDirectory, 'CellProfilerPreferences.mat'))
            LoadedPreferences = SavedPreferences;
            clear SavedPreferences
        end
    end
end

%%% Stores some initial values in the handles structure based on the
%%% SavedPreferences, if they were successfully loaded.  Otherwise,
%%% defaults are used.
try handles.Preferences.PixelSize = LoadedPreferences.PixelSize;
catch
    %%% If not present in the loaded preferences, the pixel size shown
    %%% in the display is used (this is set in the CellProfiler.fig
    %%% file).
    handles.Preferences.PixelSize = get(handles.PixelSizeEditBox,'string');
end

try
    if exist(LoadedPreferences.DefaultModuleDirectory, 'dir')
        handles.Preferences.DefaultModuleDirectory = LoadedPreferences.DefaultModuleDirectory;
    end
end

%%% Set the default color for CP dialogs.
set(0, 'defaultuicontrolbackgroundcolor', [0.7 0.7 0.9]);

%%% Turn off TeX interpreter globally
set(0,'DefaultTextInterpreter','none')

if ~isdeployed
    %%% If the Default Module Directory has not yet been successfully
    %%% identified (i.e., it is not present in the loaded preferences or
    %%% the directory does not exist), look at where the CellProfiler.m
    %%% file is located and see whether there is a subdirectory within
    %%% that directory, called "Modules".  If so, use that subdirectory as
    %%% the default module directory. If not, use the current directory.
    if ~isfield(handles.Preferences,'DefaultModuleDirectory')
        CellProfilerPathname = fileparts(which('CellProfiler'));
        %%% Checks whether the Modules subdirectory exists.
        if exist(fullfile(CellProfilerPathname,'Modules'), 'dir')
            CellProfilerModulePathname = fullfile(CellProfilerPathname,'Modules');
            handles.Preferences.DefaultModuleDirectory = CellProfilerModulePathname;
        else
            handles.Preferences.DefaultModuleDirectory = handles.Current.StartupDirectory;
        end
    end
end

%%% Similar approach for the DefaultOutputDirectory.
try
    if exist(LoadedPreferences.DefaultOutputDirectory, 'dir')
        handles.Preferences.DefaultOutputDirectory = LoadedPreferences.DefaultOutputDirectory;
    end
end
if ~isfield(handles.Preferences,'DefaultOutputDirectory')
    handles.Preferences.DefaultOutputDirectory = handles.Current.StartupDirectory;
end
%%% Similar approach for the DefaultImageDirectory.
try
    if exist(LoadedPreferences.DefaultImageDirectory, 'dir')
        handles.Preferences.DefaultImageDirectory = LoadedPreferences.DefaultImageDirectory;
    end
end
if isfield(handles.Preferences,'DefaultImageDirectory') == 0
    handles.Preferences.DefaultImageDirectory = handles.Current.StartupDirectory;
end

try
    handles.Preferences.IntensityColorMap = LoadedPreferences.IntensityColorMap;
catch
    handles.Preferences.IntensityColorMap = 'gray';
end

try
    handles.Preferences.LabelColorMap = LoadedPreferences.LabelColorMap;
catch
    handles.Preferences.LabelColorMap = 'jet';
end

try
    handles.Preferences.StripPipeline = LoadedPreferences.StripPipeline;
catch
    handles.Preferences.StripPipeline = 'Yes';
end

try
    handles.Preferences.SkipErrors = LoadedPreferences.SkipErrors;
catch
    handles.Preferences.SkipErrors = 'No';
end

try
    handles.Preferences.DisplayModeValue = LoadedPreferences.DisplayModeValue;
catch
    handles.Preferences.DisplayModeValue = 1;
end

handles.Preferences.DisplayWindows =[];

%%% Now that handles.Preferences.(10 different variables) has been filled
%%% in, the handles.Current values and edit box displays are set.
handles.Current.DefaultOutputDirectory = handles.Preferences.DefaultOutputDirectory;
handles.Current.DefaultImageDirectory = handles.Preferences.DefaultImageDirectory;
handles.Settings.PixelSize = handles.Preferences.PixelSize;
%%% (No need to set a current module directory or display it in an
%%% edit box; the one stored in preferences is the only one ever
%%% used).
set(handles.PixelSizeEditBox,'String',handles.Preferences.PixelSize)
set(handles.DefaultOutputDirectoryEditBox,'String',handles.Preferences.DefaultOutputDirectory)
set(handles.DefaultImageDirectoryEditBox,'String',handles.Preferences.DefaultImageDirectory)
%%% Retrieves the list of image file names from the chosen directory,
%%% stores them in the handles structure, and displays them in the
%%% filenameslistbox, by faking a click on the DefaultImageDirectoryEditBox.
handles = DefaultImageDirectoryEditBox_Callback(hObject, eventdata, handles);

%%% Adds the default module directory to Matlab's search path. Also
%%% adds the Modules subfolder of the folder that contains CellProfiler.m to
%%% Matlab's search path, if possible.
if ~isdeployed
    addpath(handles.Preferences.DefaultModuleDirectory)
    CellProfilerPathname = fileparts(which('CellProfiler'));
    CellProfilerModulePathname = fullfile(CellProfilerPathname,'Modules');
    handles.Current.CellProfilerPathname = CellProfilerPathname;
    try
        addpath(CellProfilerModulePathname)
    end
end

%%% Sets a suitable fontsize. An automatic font size is calculated,
%%% but it is overridden if the user has set a default font size.
%%% The fontsize is also saved in the main window's (i.e. "0") UserData property so that
%%% it can be used for setting the fontsize in dialog boxes.
if exist('LoadedPreferences','var') && isfield(LoadedPreferences,'FontSize') && ~isempty(str2double(LoadedPreferences.FontSize))
    handles.Preferences.FontSize = str2double(LoadedPreferences.FontSize);
else
    ScreenResolution = get(0,'ScreenPixelsPerInch');
    handles.Preferences.FontSize = (220 - ScreenResolution)/13;       % 90 pix/inch => 10pts, 116 pix/inch => 8pts
end
names = fieldnames(handles);
for k = 1:length(names)
    if ishandle(handles.(names{k}))
        set(findobj(handles.(names{k}),'-property','FontSize'),'FontSize',handles.Preferences.FontSize,'FontName','helvetica')
    end
end

%%% Set the default font size for CP dialogs, based on the preferences.
set(0, 'defaultuicontrolfontsize', handles.Preferences.FontSize);
set(0, 'defaultuicontrolfontname', 'helvetica');

%%% Checks whether the user has the Image Processing Toolbox.
Answer = license('test','image_toolbox');
if Answer ~= 1
    CPwarndlg('It appears that you do not have a license for the Image Processing Toolbox of Matlab.  Many of the image analysis modules of CellProfiler may not function properly. Typing ''ver'' or ''license'' at the Matlab command line may provide more information about your current license situation.');
end

if ~isdeployed
    %%% Adds the Help folder to Matlab's search path.
    try Pathname = fullfile(handles.Current.CellProfilerPathname,'Help');
        addpath(Pathname)
    catch
        CPerrordlg('CellProfiler could not find its help files, which should be located in a folder called Help within the folder containing CellProfiler.m. The help buttons will not be functional.');
    end
end

%%% Checks figure handles for current open windows.
handles.Current.CurrentHandles = findobj;

%%% Note on the use of "8192" when retrieving handles...
%%% Apparently, referring to a handle in a callback by converting the numerical
%%% handle value to a string does not work, due to a precision problem in
%%% Matlab, according to this newsgroup:
%%% http://groups.google.com/groups?hl=en&lr=&safe=off&selm=3lglao%242pi%40borg.svpal.org
%%% Here's what that site says:
% I have successfully used the following technique to convert a handle to
% a string:  str_h =  sprintf('%d',8192*handle)
% Then to retreive it:  handle = eval(str_h) / 8192
% This works (at least under MATLAB for Windows) because handles are always
% multiples of 8192. I found that Duane's method is not reliable due to
% accuracy problems with MATLAB's decimal to binary conversion.
%
% Duane Hanselman (dua...@eece.maine.edu) wrote:
% : In article <3l6dm0$...@hardy.ee.gatech.edu>, "Mark A. Yoder" <Mark.A.Yo...@Rose-Hulman.edu> says:
% : Mark:
% : Have you tried sprintf(%.15f,handle) to convert the handle to string?
% : Then you can use handle=eval(string_handle) to convert the string back
% : to a number.

%%% Sets up the main program window (Main GUI window) so that it asks for
%%% confirmation prior to closing.
%%% First, obtains the handle for the main GUI window (aka figure1).
ClosingFunction = ...
    ['deleteme = CPquestdlg(''Do you really want to quit?'', ''Confirm quit'',''Yes'',''No'',''Yes''); switch deleteme; case ''Yes'';  CellProfiler(''CloseWindows_Helper'',gcbo,[],guidata(gcbo)), delete(', num2str((handles.figure1)*8192), '/8192); case ''No''; end; clear deleteme'];
%%% Sets the closing function of the Main GUI window to be the line
%%% above.
set(handles.figure1,'CloseRequestFcn',ClosingFunction);

%%% Obtains the screen size from the primary display.
[ScreenWidth,ScreenHeight] = CPscreensize;

%%% Sets the position of the Main GUI window so it is in the center of
%%% the screen. At one point, I designed the GUI window itself to be
%%% 800 pixels wide and 600 high, but it has changed since then.
GUIsize = get(handles.figure1,'position');
GUIwidth = GUIsize(3);
GUIheight = GUIsize(4);
Left = 0.5*(ScreenWidth - GUIwidth);
Bottom = 0.5*(ScreenHeight - GUIheight);
set(handles.figure1,'Position',[Left Bottom GUIwidth GUIheight]);

%%% Adds the CellProfiler logo to the top left of the main GUI.
handles.CPlogoAxes = axes('Position',[.01 .84 .1 .15],...
    'Parent',handles.figure1,...
    'Tag','CPlogoAxes');
Logo = CPlogo;
handles.CPlogoImage = image(Logo,...
    'parent',handles.CPlogoAxes,...
    'Tag','CPlogoImage');
%%% The axes are turned off so there are not pixel markings on the logo.
%%% Visibility must apparently be turned off after the image() command
%%% because otherwise the axes reappear.
set(handles.CPlogoAxes,'visible','off')

%%% Finds all available tools, which are .m files residing in the
%%% Modules folder.
%%%
%%% Do not remove the BEGIN line below.  It is used by CompileWizard.m.
handles.Current.svn_version_number = '7522';
%%% IMAGE TOOL HELP
ToolHelpInfo = 'Help information for individual image tools:';

ImageToolWindowHelp = sprintf([...
'  Help for the Image Tool Window:                                          \n'...
'  Category: Image Tools                                                    \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  The Image Tool Window opens when you click on any image and allows       \n'...
'  opening the image in a new window, displaying a pixel intensity          \n'...
'  histogram, measuring length in the image, changing the figure colormap,  \n'...
'  and saving the image.                                                    \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  The Image Tool Window contains these functions:                          \n'...
'                                                                           \n'...
'  Open in new window - Opens the image in its own, fresh window.           \n'...
'                                                                           \n'...
'  Histogram - Shows a pixel intensity histogram for the image.             \n'...
'                                                                           \n'...
'  Measure Length - This tool creates a line in the image. By moving the    \n'...
'  ends of the line, you can measure distances in the image. Right-clicking \n'...
'  the line reveals several options, including deleting the line. You can   \n'...
'  place multiple length-measuring lines on an image. Note that sometimes   \n'...
'  this line may interfere when saving the underlying image.                \n'...
'                                                                           \n'...
'  Change Colormap - Opens a window that allows you to change the colormap  \n'...
'  of the selected figure. You can select the default colormap (which you   \n'...
'  can set under File > Set Preferences) or any other predetermined         \n'...
'  colormap. Note that the colormap selected will apply to all non-RGB      \n'...
'  images in the entire figure, and not only to the image selected. The     \n'...
'  Apply To All button will change the colormap in all module display       \n'...
'  windows and any other windows that contain images. If you are running the\n'...
'  developer''''s version of CellProfiler, you can also open a colormap editor,\n'...
'  which enables you to create personalized colormaps. It will modify the   \n'...
'  colormap of the last active figure, so be careful if you open it, click  \n'...
'  another figure and go back to it, because you might be changing the      \n'...
'  colormap of a figure you did not intend to change. See also Help >       \n'...
'  General Help > Colormaps.                                                \n'...
'                                                                           \n'...
'  Save to Matlab workspace - If you are using Matlab Developer''''s version,  \n'...
'  this tool saves the image to the Matlab workspace with the variable name \n'...
'  "Image". Be careful not to overwrite existing variables in your workspace\n'...
'  using this tool.                                                         \n'...
'                                                                           \n'...
'  Save to hard drive - Allows you to save the image to the hard drive. You \n'...
'  can specify the file name, the directory where it will be saved, and a   \n'...
'  few other options. See the help for the Save Images module.              \n'...
'                                                                           \n'...
'                                                                           \n'...
'  Technical details:                                                       \n'...
'  The CPimagetool function opens or updates the Image Tool window when the \n'...
'  user clicks on an image produced by a module. The tool is embedded by the\n'...
'  CPimagesc function which is used to display almost all images in         \n'...
'  CellProfiler.                                                            \n'...
]);

ToolHelp{1} = [ToolHelpInfo, '-----------' 10 ImageToolWindowHelp];

InteractiveZoomHelp = sprintf([...
'  Help for the Interactive Zoom tool:                                      \n'...
'  Category: Image Tools                                                    \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Allows interactive zooming over the image.                               \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This tool allows you zoom into an image by moving the cursor over it. The\n'...
'  image will automatically be zoomed to the location of the cursor. You can\n'...
'  control the zoom percentage with mouse clicks, which by default will be  \n'...
'  set to 50%% of the image in the axis. The tool will also open a black text\n'...
'  box showing the current position of the mouse pointer.                   \n'...
'                                                                           \n'...
'  Mouse click commands:                                                    \n'...
'  * Left-clicking will zoom in further.                                    \n'...
'  * Right-clicking will zoom out.                                          \n'...
'  * Shift-clicking (or simultaneously clicking the left and right mouse    \n'...
'    buttons) at any point will display the original (un-zoomed) image, as  \n'...
'    will moving the cursor outside of the current axis. The zoom percentage\n'...
'    is restored when the mouse is moved inside the axis.                   \n'...
'  * Double-clicking (either right or left button) zooms out to the original\n'...
'    image, and resets the zoom percentage (i.e. it will not be restored as \n'...
'    when shift-clicking).                                                  \n'...
'                                                                           \n'...
'  The InteractiveZoom will work with all images in a figure, but only one  \n'...
'  at a time. If you want to zoom into an image while currently zooming into\n'...
'  another, you will have to click on it to activate it, and you will lose  \n'...
'  the zoom you had in the first image.                                     \n'...
'                                                                           \n'...
'  Note: there is a known bug that has no fix yet. When there are multiple  \n'...
'  images in a figure, be careful not to double-click and move the pointer  \n'...
'  fast enough such that one click lands on one image and the other lands in\n'...
'  another. This will create an error, although it will seldom happen.      \n'...
'                                                                           \n'...
'  To exit the InteractiveZoom, click the ''''x'''' in the zooming pixel location \n'...
'  panel, or click on InteractiveZoom again in the menu (it will toggle     \n'...
'  on/off each time you select it).                                         \n'...
]);

ToolHelp{2} = [ToolHelpInfo, '-----------' 10 InteractiveZoomHelp];

OpenNewImageFileHelp = sprintf([...
'  Help for the Open New Image File tool:                                   \n'...
'  Category: Image Tools                                                    \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Opens an image file in a new window.                                     \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Use this tool to open an image and display it. Images are loaded into    \n'...
'  CellProfiler in the range of 0 to 1 so that modules behave consistently. \n'...
'  The display is contrast stretched so that the brightest pixel in the     \n'...
'  image is white and the darkest is black for easier viewing.              \n'...
]);

ToolHelp{3} = [ToolHelpInfo, '-----------' 10 OpenNewImageFileHelp];

ShowHelpForThisMenuHelp = sprintf([...
'  Help for the Show Toolbox Help function:                  \n'...
'  Category: Image Tools                                     \n'...
'                                                            \n'...
'                                                            \n'...
'  SHORT DESCRIPTION:                                        \n'...
'  Shows Help menu for various Image Toolboxes.              \n'...
'  **********************************************************\n'...
'                                                            \n'...
'  Shows Help menu for various Image Toolboxes.              \n'...
]);

ToolHelp{4} = [ToolHelpInfo, '-----------' 10 ShowHelpForThisMenuHelp];

ShowOrHidePixelDataHelp = sprintf([...
'  Help for the Show or Hide Pixel Data tool:                               \n'...
'  Category: Image Tools                                                    \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Shows X,Y pixel location and intensity information in the figure window. \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This tool shows the pixel intensity at each X,Y location as you hover    \n'...
'  over points within an image. The pixels are displayed via a small box at \n'...
'  the lower left corner of the figure window. If the image is color (RGB), \n'...
'  three intensity values are shown: Red, Green, and Blue.                  \n'...
'                                                                           \n'...
'  Currently, it can also measure lengths if you click the mouse at a       \n'...
'  starting point and hold the button down while dragging, although this    \n'...
'  could also be done with the Measure Length tool, accessible by clicking  \n'...
'  on the image of interest and choosing Measure Length from the resulting  \n'...
'  Image Tool window.                                                       \n'...
'                                                                           \n'...
'  To exit the tool, click the ''''x'''' in the pixel intensity information panel.\n'...
]);

ToolHelp{5} = [ToolHelpInfo, '-----------' 10 ShowOrHidePixelDataHelp];

handles.Current.ImageToolsFilenames = {'Image tools' 'ImageToolWindow' 'InteractiveZoom' 'OpenNewImageFile' 'ShowHelpForThisMenu' 'ShowOrHidePixelData'};
handles.Current.ImageToolHelp = ToolHelp;

%%% DATA TOOL HELP
ToolHelpInfo = 'Help information for individual data tools:';

AddDataHelp = sprintf([...
'  Help for the Add Data tool:                                              \n'...
'  Category: Data Tools                                                     \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Allows adding information for each image cycle to an output file.        \n'...
'  *************************************************************************\n'...
'  Note: this tool is beta-version and has not been thoroughly checked.     \n'...
'                                                                           \n'...
'  Use this tool if you would like to add text information about each image \n'...
'  (e.g. Gene names or sample numbers) to the output file alongside the     \n'...
'  measurements that have been made. Then, the text information will be     \n'...
'  exported with the measurements when you use the ExportData data tool,    \n'...
'  helping you to keep track of your samples. You can also run the LoadText \n'...
'  module in your pipeline so this step happens automatically during        \n'...
'  processing; its function is the same. Once the data is added to the      \n'...
'  output file, you can view the text file within the output file by using  \n'...
'  the ViewData data tool and selecting "Image". To delete the text file    \n'...
'  from the output file, use the ClearData data tool.                       \n'...
'                                                                           \n'...
'  Note that the number of text entries that you load with this module must \n'...
'  be identical to the number of cycles you are processing in order for     \n'...
'  exporting to work properly.                                              \n'...
'                                                                           \n'...
'  The information to be added must be in a separate text file with the     \n'...
'  following syntax:                                                        \n'...
'                                                                           \n'...
'  DESCRIPTION <description>                                                \n'...
'  <Text info for image cycle #1>                                           \n'...
'  <Text info for image cycle #2>                                           \n'...
'  <Text info for image cycle #3>                                           \n'...
'               .                                                           \n'...
'               .                                                           \n'...
'                                                                           \n'...
'  <description> is a description of the text information stored in the     \n'...
'  file. It can contain spaces or unusual characters.                       \n'...
'                                                                           \n'...
'  For example:                                                             \n'...
'                                                                           \n'...
'  DESCRIPTION Gene names                                                   \n'...
'  Gene X                                                                   \n'...
'  Gene Y                                                                   \n'...
'  Gene Z                                                                   \n'...
'                                                                           \n'...
'  While not thoroughly tested, most likely you can load numerical data too.\n'...
'                                                                           \n'...
'  See also the LoadText module, ViewData and ClearData data tools.         \n'...
]);

ToolHelp{1} = [ToolHelpInfo, '-----------' 10 AddDataHelp];

CalculateRatiosDataToolHelp = sprintf([...
'  Help for the Calculate Ratios data tool:                                 \n'...
'  Category: Data Tools                                                     \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Calculates the product, ratio, sum, or difference between any            \n'...
'  measurements already measured (e.g. Intensity of green staining in       \n'...
'  cytoplasm/Area of cells)                                                 \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This data tool can take any measurements in a CellProfiler output file   \n'...
'  and multiply, divide, add, or subtract them. Resulting measurements can  \n'...
'  also be saved and used to calculate other measurements.                  \n'...
'                                                                           \n'...
'  The data tool currently works on an object-by-object basis (it calculates\n'...
'  the ratio for each object). If you need to calculate image-by-image      \n'...
'  ratios or ratios for object measurements by whole image measurements (to \n'...
'  allow normalization), use the CalculateRatios module until this data tool\n'...
'  is updated to handle such calculations. Be careful with your denominator \n'...
'  data. Any 0''''s found in it may corrupt your output, especially when       \n'...
'  dividing measurements.                                                   \n'...
'                                                                           \n'...
'  The new measurements will be stored under the first object''''s data, under \n'...
'  the name Ratio.                                                          \n'...
'                                                                           \n'...
'  See also CalculateRatios and all Measure modules.                        \n'...
]);

ToolHelp{2} = [ToolHelpInfo, '-----------' 10 CalculateRatiosDataToolHelp];

CalculateStatisticsDataToolHelp = sprintf([...
'  Help for the Calculate Statistics data tool module:                      \n'...
'  Category: Data Tools                                                     \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Calculates measures of assay quality (V and Z'''' factors) and dose response\n'...
'  data (EC50) for all measured features made from images.                  \n'...
'  *************************************************************************\n'...
'  Note: this tool is beta-version and has not been thoroughly checked.     \n'...
'                                                                           \n'...
'  See the help for the CalculateStatistics module for information on the   \n'...
'  settings for this data tool and how to use it.                           \n'...
]);

ToolHelp{3} = [ToolHelpInfo, '-----------' 10 CalculateStatisticsDataToolHelp];

ClearDataHelp = sprintf([...
'  Help for the Clear Data tool:                                            \n'...
'  Category: Data Tools                                                     \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Removes information/measurements from an output file.                    \n'...
'  *************************************************************************\n'...
'  Note: this tool is beta-version and has not been thoroughly checked.     \n'...
'                                                                           \n'...
'  This tool lets the user remove a measurement or data field from a        \n'...
'  CellProfiler output file. The same measurement can be removed from       \n'...
'  several files.                                                           \n'...
'                                                                           \n'...
'  After executing this option, CelProfiler will ask the user to specify the\n'...
'  output file(s) from which to remove data from. The user will then specify\n'...
'  which data to clear. In most cases, the data to be cleared will be data  \n'...
'  providing information about an object.                                   \n'...
]);

ToolHelp{4} = [ToolHelpInfo, '-----------' 10 ClearDataHelp];

ConvertBatchFilesHelp = sprintf([...
'  Help for the Convert Batch Files tool:                                   \n'...
'  Category: Data Tools                                                     \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Converts output files produced by the Create Batch Files module into     \n'...
'  typical CellProfiler output files.                                       \n'...
'  *************************************************************************\n'...
'  Note: this tool is beta-version and has not been thoroughly checked.     \n'...
'                                                                           \n'...
'  CellProfiler data tools do not function on the batch output files created\n'...
'  by the Create Batch Files module because they are incomplete. They are   \n'...
'  incomplete because each batch output file contains only the measurements \n'...
'  for one batch of images.                                                 \n'...
'                                                                           \n'...
'  In order to access these measurements, they must be exported (using the  \n'...
'  ExportDatabase data tool or ExportToDatabase module), or merged together \n'...
'  (using the MergeOutputFiles DataTool), or converted to regular           \n'...
'  CellProfiler output files using this data tool. This data tool will save \n'...
'  new files with ''''Converted'''' as a prefix in the filename.                  \n'...
'                                                                           \n'...
'  Important: note that the image cycles will be renumbered, starting with  \n'...
'  2. For example, your batch output file ''''Batch_102_to_201_OUT.mat'''' will be\n'...
'  converted to ''''ConvertedBatch_102_to_201_OUT.mat'''', but when you access the\n'...
'  data within (e.g. using ViewData), image cycle #102 will now be image    \n'...
'  cycle #2. Image cycle #1 will be the original image cycle #1. Image cycle\n'...
'  #1 is present in all the batch files, and is removed so that the         \n'...
'  converted batch file will contain only the remainder of the image cycles.\n'...
'                                                                           \n'...
'  Technical details: this data tool removes empty entries in the           \n'...
'  handles.Measurements structure of the output file(s) you specify.        \n'...
]);

ToolHelp{5} = [ToolHelpInfo, '-----------' 10 ConvertBatchFilesHelp];

DataLayoutHelp = sprintf([...
'  Help for the Data Layout tool:                                           \n'...
'  Category: Data Tools                                                     \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Shows mean measurements for each image in a specified spatial layout.    \n'...
'  *************************************************************************\n'...
'  Note: this tool is beta-version and has not been thoroughly checked.     \n'...
'                                                                           \n'...
'  When images are collected in a particular spatial layout, it is          \n'...
'  sometimes useful to view measurements collected from the images in the   \n'...
'  same spatial layout to look for patterns (e.g. edge effects). The mean   \n'...
'  measurement for each image is shown in the plot that is produced.        \n'...
]);

ToolHelp{6} = [ToolHelpInfo, '-----------' 10 DataLayoutHelp];

ExportDataHelp = sprintf([...
'  Help for the Export Data tool:                                           \n'...
'  Category: Data Tools                                                     \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Exports measurements into a tab-delimited text file which can be opened  \n'...
'  in Excel or other spreadsheet programs.                                  \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Once image analysis is complete, use this data tool to select the output \n'...
'  file to extract the measurements and other information about the         \n'...
'  analysis. The data will be converted to a tab-delimited text file which  \n'...
'  can be read by Excel, another spreadsheet program, or a text editor. You \n'...
'  can add the ExportToExcel module to your pipeline if you want to         \n'...
'  automatically export data.                                               \n'...
'                                                                           \n'...
'  See also ExportDatabase data tool, ExportToDatabase module, ExportToExcel\n'...
'  module.                                                                  \n'...
]);

ToolHelp{7} = [ToolHelpInfo, '-----------' 10 ExportDataHelp];

ExportDatabaseHelp = sprintf([...
'  Help for the Export Database tool:                                         \n'...
'  Category: Data Tools                                                       \n'...
'                                                                             \n'...
'  SHORT DESCRIPTION:                                                         \n'...
'  Exports data in database readable format, including an importing file      \n'...
'  with column names.                                                         \n'...
'  *************************************************************************  \n'...
'                                                                             \n'...
'  NOTE:                                                                      \n'...
'  This tool is not functional right now - use the ExportToDatabase module    \n'...
'  within your pipeline instead. Sorry for the inconvenience!!                \n'...
'                                                                             \n'...
'  This data tool exports measurements to a SQL compatible format. It creates \n'...
'  MySQL or Oracle scripts and associated data files which will create a      \n'...
'  database and import the data into it. You can also run the ExportToDatabase\n'...
'  module in your pipeline so this step happens automatically during          \n'...
'  processing; its function is the same.                                      \n'...
'                                                                             \n'...
'  See the help for the ExportToDatabase module for information on the        \n'...
'  settings for this data tool and how to use it.                             \n'...
'                                                                             \n'...
'  Current known limitations and things to consider:                          \n'...
'                                                                             \n'...
'  - No check is performed that the selected files are compatible, i.e.       \n'...
'    were produced with the same pipeline of modules.                         \n'...
'                                                                             \n'...
'  - The tool only works with standard CellProfiler output files, not         \n'...
'    batch output files. Use the ConvertBatchFiles data tool to convert if    \n'...
'    necessary.                                                               \n'...
'                                                                             \n'...
'  - Image sets are numbered according to the order they are written by       \n'...
'    this tool. This numbering may not be consistent with the order they      \n'...
'    were processed, e.g. on the cluster. This can be fixed by adding an      \n'...
'    extra feature field in handles.Measurements.Image                        \n'...
]);

ToolHelp{8} = [ToolHelpInfo, '-----------' 10 ExportDatabaseHelp];

ExportLocationsHelp = sprintf([...
'  Help for the Export Locations tool:                                      \n'...
'  Category: Data Tools                                                     \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Exports center locations of objects. Specialty function for creating a   \n'...
'  locations list for microscopy image acquisition of gridded spots.        \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Useful for creating a locations list for microscope.                     \n'...
]);

ToolHelp{9} = [ToolHelpInfo, '-----------' 10 ExportLocationsHelp];

FlagImageByMeasurementHelp = sprintf([...
'  Help for the FlagImageByMeasurement data tool:                                  \n'...
'  Category: Data Tools                                                            \n'...
'                                                                                  \n'...
'  SHORT DESCRIPTION:                                                              \n'...
'                                                                                  \n'...
'  *************************************************************************       \n'...
'                                                                                  \n'...
'  This data tool can take any per-image measurements in a CellProfiler output file\n'...
'  and flag the measurements based on user-inputted values.                        \n'...
'                                                                                  \n'...
'                                                                                  \n'...
'  The new measurements will be stored under Experiment, with the name "QC"        \n'...
'  flag.                                                                           \n'...
]);

ToolHelp{10} = [ToolHelpInfo, '-----------' 10 FlagImageByMeasurementHelp];

GenerateHistogramMovieHelp = sprintf([...
'  Help for the Generate Histogram Movie tool:                              \n'...
'  Category: Data Tools                                                     \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Creates a movie of the histogram of any measurement. This will be done   \n'...
'  after specifying which output file the measurements exist in and where to\n'...
'  write the resulting .avi file.                                           \n'...
'  *************************************************************************\n'...
'  Note: this tool is beta-version and has not been thoroughly checked.     \n'...
]);

ToolHelp{11} = [ToolHelpInfo, '-----------' 10 GenerateHistogramMovieHelp];

HistogramHelp = sprintf([...
'  Help for the Histogram tool:                                             \n'...
'  Category: Data Tools                                                     \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Displays a histogram of individual object measurements.                  \n'...
'  *************************************************************************\n'...
'  Note: this tool is beta-version and has not been thoroughly checked.     \n'...
'                                                                           \n'...
'  The object measurements can be displayed in histogram format using this  \n'...
'  tool.  As prompted, select the output file containing the measurements,  \n'...
'  then choose the measurement parameter to be displayed, and the sample    \n'...
'  information label. It may take some time to then process the data.       \n'...
'                                                                           \n'...
'  SETTINGS:                                                                \n'...
'                                                                           \n'...
'  * Which images'''' measurements to display or export - To display data from \n'...
'  only one image, enter that image''''s number as both the first and last     \n'...
'  sample)                                                                  \n'...
'                                                                           \n'...
'  * The number of bins to be used                                          \n'...
'                                                                           \n'...
'  * Whether you want the histogram bins to contain the actual numbers of   \n'...
'  objects in the bin or the percentage of objects in the bin               \n'...
'                                                                           \n'...
'  * How to determine the threshold values for the leftmost and rightmost   \n'...
'  bins - on the Measurement axis (e.g. Area of Nuclei). For the leftmost   \n'...
'  bin, any measurements less than the threshold will be combined in the    \n'...
'  leftmost bin. For the rightmost bin, any measurements greater than or    \n'...
'  equal to the thresholdd will be combined in the rightmost bin. Choosing  \n'...
'  "Min/Max value found" will instruct CellProfiler to determine the        \n'...
'  threshold values. Choosing "Other" will allow you to enter your custom   \n'...
'  threshold values.                                                        \n'...
'                                                                           \n'...
'  * Whether you want to calculate histogram data only for objects meeting a\n'...
'  threshold in a measurement - If you choose other than "None", you can    \n'...
'  specify the type of threshold to use, and the threshold value.           \n'...
'                                                                           \n'...
'  * Whether you want to combine all the objects'''' data to be displayed in a \n'...
'  single (cumulative) histogram or in separate histograms                  \n'...
'                                                                           \n'...
'  * Whether the X axis will be the "Measurements" axis (e.g. Area of       \n'...
'  Nuclei) or the "Number of objects in bin" axis. The default for the X    \n'...
'  axis is "Measurements". By choosing "Number of objects in bin", you are  \n'...
'  essentially flipping the axes. Flipping is possible for both bar and     \n'...
'  line graphs, but not area graphs because there is no function that will  \n'...
'  work. If you attempt to flip an area graph, you will get a warning       \n'...
'  message, and the display will be a normal unflipped area graph.          \n'...
'                                                                           \n'...
'  * For multiple histograms, whether you want the "Number of objects" axis \n'...
'  to be absolute (the same for all histograms) or relative (scaled to fit  \n'...
'  the maximum value for that sample)                                       \n'...
'                                                                           \n'...
'  * Whether you want the axis to be log scale                              \n'...
'                                                                           \n'...
'  * The style of the graph: bar, line, area, or heatmap                    \n'...
'                                                                           \n'...
'  * The color that the inital plot should be                               \n'...
'                                                                           \n'...
'  * Whether you want to display the histograms (Impractical when exporting \n'...
'  large amounts of data).                                                  \n'...
'                                                                           \n'...
'  * Whether you want to export the data - tab-delimited format, which can  \n'...
'  be opened in Excel. When entering the filename, use the extension ".xls" \n'...
'  so it can be opened easily in Excel.                                     \n'...
'                                                                           \n'...
'  * Whether you want each row in the exported histogram or heatmap to      \n'...
'  contain an image or a bin                                                \n'...
'                                                                           \n'...
'                                                                           \n'...
'  NOTES:                                                                   \n'...
'                                                                           \n'...
'  Measurement axis labels for histograms: Typically, the measurement axis  \n'...
'  labels will be too crowded.  This default state is shown because you     \n'...
'  might want to know the exact values that were used for the histogram     \n'...
'  bins.  The actual numbers can be viewed by clicking the ''''This window''''    \n'...
'  button under ''''Change plots'''' and looking at the numbers listed under      \n'...
'  ''''Labels''''.  To change the measurement axis labels, you can click ''''Fewer''''  \n'...
'  in the main histogram window, or you can click a button under ''''Change    \n'...
'  plots'''' and either change the font size on the ''''Style'''' tab, or check      \n'...
'  the boxes marked ''''Auto'''' for ''''Ticks'''' and ''''Labels'''' on the ''''X (or Y) axis''''  \n'...
'  tab. Be sure to check both boxes, or the labels will not be              \n'...
'  accurate. To revert to the original labels, click ''''Restore'''' in the       \n'...
'  main histogram window, but beware that this function does not work       \n'...
'  when more than one histogram window is open at once, because the         \n'...
'  most recently produced histogram''''s labels will be used for everything.   \n'...
'                                                                           \n'...
'  Change plots/change bars buttons: These buttons allow you to change      \n'...
'  properties of the plots or the bars within the plots for either          \n'...
'  every plot in the window (''''This window''''), the current plot only          \n'...
'  (''''Current''''), or every plot in every open window (''''All windows'''').         \n'...
'  This includes colors, axis limits and other properties.                  \n'...
'                                                                           \n'...
'  Other notes about histograms: (1) Data outside the range you             \n'...
'  specified to calculate histogram bins are added together and             \n'...
'  displayed in the first and last bars of the histogram. (2) Only the      \n'...
'  display can be changed in this window, including axis limits.  The       \n'...
'  histogram bins themselves cannot be changed here because the data        \n'...
'  must be recalculated. (3) If a change you make using the ''''Change         \n'...
'  display'''' buttons does not seem to take effect in all of the desired      \n'...
'  windows, try pressing enter several times within that box, or look       \n'...
'  in the bottom of the Property Editor window that opens when you          \n'...
'  first press one of those buttons.  There may be a message describing     \n'...
'  why.  For example, you may need to deselect ''''Auto'''' before changing       \n'...
'  the limits of the axes. (4) The labels for each bar specify the low      \n'...
'  bound for that bin.  In other words, each bar includes data equal to     \n'...
'  or greater than the label, but less than the label on the bar to its     \n'...
'  right.                                                                   \n'...
'                                                                           \n'...
'  See also PlotMeasurement data tool and DisplayHistogram and              \n'...
'  DisplayImageHistogram modules.                                           \n'...
]);

ToolHelp{12} = [ToolHelpInfo, '-----------' 10 HistogramHelp];

MeasurementCalculatorHelp = sprintf([...
'  Help for the Measurement Calculator tool:                                \n'...
'  Category: Data Tools                                                     \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Multiplies or divides measurements in output files.                      \n'...
'  *************************************************************************\n'...
'  Note: this tool is beta-version and has not been thoroughly checked.     \n'...
'                                                                           \n'...
'  This tool allows you to multiply or divide data taken from CellProfiler  \n'...
'  output files. You can choose the two measurements you wish to use, and   \n'...
'  choose whether to multiply or divide them either objectwise, by the image\n'...
'  mean, or by the image median. You can give a name to your new measurement\n'...
'  and save it for later use.                                               \n'...
'                                                                           \n'...
'  See also CalculateRatiosDataTool, CalculateRatios.                       \n'...
]);

ToolHelp{13} = [ToolHelpInfo, '-----------' 10 MeasurementCalculatorHelp];

MergeOutputFilesHelp = sprintf([...
'  Help for the Merge Output Files data tool:                                  \n'...
'  Category: Data Tools                                                        \n'...
'                                                                              \n'...
'  SHORT DESCRIPTION:                                                          \n'...
'  Merges together output files produced by the Create Batch Files module      \n'...
'  into one regular CellProfiler output file.                                  \n'...
'  *************************************************************************   \n'...
'  Note: this module is beta-version and has not been thoroughly checked.      \n'...
'                                                                              \n'...
'  After a batch run has completed (using batch files created by the Create    \n'...
'  Batch Files module), the individual output files contain results from a     \n'...
'  subset of images and can be merged into a single output file. This module   \n'...
'  assumes anything matching the pattern of Prefix[0-9]*_to_[0-9]*_OUT.mat is a\n'...
'  batch output file. The combined output is written to the output filename    \n'...
'  you specify. Once merged, this output file should be compatible with data   \n'...
'  tools.                                                                      \n'...
'                                                                              \n'...
'  Sometimes output files can be quite large, so before attempting merging,    \n'...
'  be sure that the total size of the merged output file is of a reasonable    \n'...
'  size to be opened on your computer (based on the amount of memory           \n'...
'  available on your computer). It may be preferable instead to import data    \n'...
'  from individual output files directly into a database - see the             \n'...
'  ExportDatabase data tool or the ExportToDatabase module.                    \n'...
'                                                                              \n'...
'  Technical notes: The handles.Measurements field of the resulting output     \n'...
'  file will contain all of the merged measurement data, but                   \n'...
'  handles.Pipeline is a snapshot of the pipeline after the first cycle        \n'...
'  completes.                                                                  \n'...
'                                                                              \n'...
'  See also: CreateBatchFiles, ExportDatabase data tool, ExportToDatabase      \n'...
'  module.                                                                     \n'...
]);

ToolHelp{14} = [ToolHelpInfo, '-----------' 10 MergeOutputFilesHelp];

PlotMeasurementHelp = sprintf([...
'  Help for the Plot Measurement tool:                                      \n'...
'  Category: Data Tools                                                     \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Plots measured data in bar charts, line charts, or scatterplots.         \n'...
'  *************************************************************************\n'...
'  Note: this tool is beta-version and has not been thoroughly checked.     \n'...
'                                                                           \n'...
'  Bar charts, line charts and one dimensional scatter plots show the mean  \n'...
'  and standard deviation of a measurement. Two dimensional scatter plots   \n'...
'  allow plotting one measurement against another. As prompted, select a    \n'...
'  CellProfiler output file containing the measurements, choose the         \n'...
'  measurement parameter to be displayed, and choose the display type.      \n'...
'                                                                           \n'...
'  See also Histogram data tool.                                            \n'...
]);

ToolHelp{15} = [ToolHelpInfo, '-----------' 10 PlotMeasurementHelp];

ShowDataOnImageHelp = sprintf([...
'  Help for the Show Data on Image tool:                                    \n'...
'  Category: Data Tools                                                     \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Produces an image with measured data on top of identified objects.       \n'...
'  *************************************************************************\n'...
'  Note: this tool is beta-version and has not been thoroughly checked.     \n'...
'                                                                           \n'...
'  This tool allows you to extract measurements from an output file and     \n'...
'  overlay any measurements that you have made on any image, very much like \n'...
'  the DisplayDataOnImage module. For example, you could look at the DNA    \n'...
'  content (e.g. IntegratedIntensityOrigBlue) of each cell on an image of   \n'...
'  nuclei. Or, you could look at cell area on an image of nuclei.           \n'...
'                                                                           \n'...
'  First, you are asked to select the measurement you want to be displayed  \n'...
'  on the image. Next, if your output file has measurements from many       \n'...
'  cycles, you are asked to select which sample/cycle number to view. Then, \n'...
'  you are asked to select an image to display the measurements over. You   \n'...
'  can choose from among the list of images saved in the output file you    \n'...
'  chose (which are generally the original images loaded by a LoadImages or \n'...
'  LoadSingleImage module), or you can browse for an image manually (e.g. a \n'...
'  cropped image that was created during the pipeline and saved on the disk \n'...
'  by a SaveImages module). You must try to select the image from which the \n'...
'  measurements were taken because the tool will try to display each        \n'...
'  measurement over the corresponding object, so if the image is not the    \n'...
'  right one, the data will make no sense. Once all these settings are      \n'...
'  chosen, extraction ensues and eventually the image will be shown with the\n'...
'  measurements on top.                                                     \n'...
'                                                                           \n'...
'  You can then use the InteractiveZoom under the CellProfiler Image Tools  \n'...
'  menu to zoom in on this image. If the text is overlapping and not easily \n'...
'  visible, you can change the number of decimal places shown with the      \n'...
'  ''''Significant digits'''' button, or you can change the font size with the    \n'...
'  ''''Text Properties'''' button. You can also change the font style, color, and \n'...
'  other properties with this button. If you want to go back to the original\n'...
'  label settings, click the ''''Restore labels'''' button. Alternatively, you can\n'...
'  hide and show the labels by clicking the ''''Hide labels'''' and ''''Show labels'''' \n'...
'  buttons, respectively.                                                   \n'...
'                                                                           \n'...
'  The resulting figure can be saved in MATLAB format (.fig) or exported in \n'...
'  a traditional image file format.                                         \n'...
'                                                                           \n'...
'  See also DisplayDataOnImage.                                             \n'...
]);

ToolHelp{16} = [ToolHelpInfo, '-----------' 10 ShowDataOnImageHelp];

ShowPlateMapDataHelp = sprintf([...
'  Help for the Show Plate Map Data tool:                                   \n'...
'  Category: Data Tools                                                     \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Shows measurement data for plate maps in heat-map form                   \n'...
'  *************************************************************************\n'...
'  This tool lets you display the data in a measurements file in plate map  \n'...
'  format. One image per image set should use FileNameMetadata or some other\n'...
'  mechanism to capture the plate''''s name and the well row and column.       \n'...
'  The user selects:                                                        \n'...
'  * the names of the measurements that provide the metadata information    \n'...
'  * the measurement to display                                             \n'...
'  * the minimum and maximum values for the measurement                     \n'...
'  * whether to display the mean, median, maximum or minimum value          \n'...
'    for the measurement.                                                   \n'...
'                                                                           \n'...
'  See also FileNameMetadata module                                         \n'...
]);

ToolHelp{17} = [ToolHelpInfo, '-----------' 10 ShowPlateMapDataHelp];

SubmitBatchHelp = sprintf([...
'  Help for the Submit Batch tool:                                         \n'...
'  Category: Data Tools                                                    \n'...
'                                                                          \n'...
'  SHORT DESCRIPTION:                                                      \n'...
'  Submits batches made by the CreateBatchFiles module to the cluster      \n'...
'  via webserver.                                                          \n'...
'  ************************************************************************\n'...
'  This tool makes a webserver call to the URL,                            \n'...
'  "http://imageweb.broad.mit.edu/batchprofiler/cgi-bin/NewBatch.py", to   \n'...
'  submit the batch files created by the CreateBatchFiles module to the    \n'...
'  cluster using CPCluster.py and bsub. The webserver creates a record     \n'...
'  in batchprofiler.batch for the batch, documenting the files and         \n'...
'  creates one record in batchprofiler.run per bsub job submission.        \n'...
'                                                                          \n'...
'  The tool''''s UI collects the following fields:                            \n'...
'  data_dir   - the directory that holds "Batch_data.mat" which holds the  \n'...
'               details for running the batch using CPCluster.py           \n'...
'  email      - the email of the submitter. The webserver sends a brief    \n'...
'               email which gives the submitter the batch ID (which is     \n'...
'               the primary key for the batch table) as a link to a        \n'...
'               webpage that lets the user monitor the job''''s progress.     \n'...
'  queue      -  one of the bsub queues. see                               \n'...
'  http://iwww.broad.mit.edu/itsystems/lsf_clusters.html#whatqueues        \n'...
'               for details.                                               \n'...
'  write_data - whether or not to write the Batch_##_to_##_OUT.mat files.  \n'...
'  batch_size - # of image sets per bsub submission.                       \n'...
'  cpcluster  - the revision # of the version of CPCluster to use. This    \n'...
'               should correspond to the #### part of a directory like     \n'...
'               /imaging/analysis/CPCluster/####.                          \n'...
'  timeout    - the timeout parameter to CPCluster: how long to let a job  \n'...
'               run before timing it out.                                  \n'...
'                                                                          \n'...
'  CellProfiler is distributed under the GNU General Public License.       \n'...
'  See the accompanying file LICENSE for details.                          \n'...
'                                                                          \n'...
'  Developed by the Whitehead Institute for Biomedical Research.           \n'...
'  Copyright 2003,2004,2005.                                               \n'...
'                                                                          \n'...
'  Please see the AUTHORS file for credits.                                \n'...
'                                                                          \n'...
'  Website: http://www.cellprofiler.org                                    \n'...
'                                                                          \n'...
'  $Revision: 7171 $                                                       \n'...
]);

ToolHelp{18} = [ToolHelpInfo, '-----------' 10 SubmitBatchHelp];

ViewDataHelp = sprintf([...
'  Help for the View Data tool:                                             \n'...
'  Category: Data Tools                                                     \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Displays data or measurements from a CellProfiler output file. This is   \n'...
'  displayed after the user specifies which output file and which           \n'...
'  measurements to extract data from.                                       \n'...
'  *************************************************************************\n'...
'  Note: this tool is beta-version and has not been thoroughly checked.     \n'...
'                                                                           \n'...
'  This tool views any text data or measurements that have been stored in a \n'...
'  CellProfiler output file. It can be useful to check that any text data   \n'...
'  added with the AddData tool is associated with the correct image sets.   \n'...
]);

ToolHelp{19} = [ToolHelpInfo, '-----------' 10 ViewDataHelp];

handles.Current.DataToolsFilenames = {'Data tools' 'AddData' 'CalculateRatiosDataTool' 'CalculateStatisticsDataTool' 'ClearData' 'ConvertBatchFiles' 'DataLayout' 'ExportData' 'ExportDatabase' 'ExportLocations' 'FlagImageByMeasurement' 'GenerateHistogramMovie' 'Histogram' 'MeasurementCalculator' 'MergeOutputFiles' 'PlotMeasurement' 'ShowDataOnImage' 'ShowPlateMapData' 'SubmitBatch' 'ViewData'};
handles.Current.DataToolHelp = ToolHelp;

%%% MODULES HELP
AlignHelp = sprintf([...
'  Help for the Align module:                                               \n'...
'  Category: Image Processing                                               \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Aligns images relative to each other.                                    \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  For two or more input images, this module determines the optimal         \n'...
'  alignment among them. Aligning images is useful to obtain proper         \n'...
'  measurements of the intensities in one channel based on objects          \n'...
'  identified in another channel, for example. Alignment is often needed    \n'...
'  when the microscope is not perfectly calibrated. It can also be useful to\n'...
'  align images in a time-lapse series of images.                           \n'...
'                                                                           \n'...
'  Some important notes for proper use of this module:                      \n'...
'  (1) Regardless of the number of input images, they will all be aligned   \n'...
'  with respect to the first image.                                         \n'...
'  (2) The images are cropped according to the smallest input image. If the \n'...
'  images are all the same size, then no cropping is performed              \n'...
'  (3) If an image is aligned, the padded pixels are assigned a fill value  \n'...
'  of zero.                                                                 \n'...
'  (4) The module stores the amount of shift between images as a            \n'...
'  measurement, which can be useful for quality control purposes.           \n'...
'                                                                           \n'...
'  Measured feature:                 Feature Number:                        \n'...
'  Xshift_Image1NamevsImage2Name  |       1 (e.g., Xshift_BluevsRed)        \n'...
'  Yshift_Image1NamevsImage2Name  |       2 (e.g., Yshift_BluevsRed)        \n'...
'  Xshift_Image2NamevsImage3Name  |       3 (e.g., Xshift_RedvsGreen)       \n'...
'  Yshift_Image2NamevsImage3Name  |       4 (e.g., Yshift_RedvsGreen)       \n'...
'  The latter two are measured only if three images are aligned.            \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'  * "Mutual Information" method: alignment works whether the images are    \n'...
'  correlated or anti-correlated (bright in one = bright in the other, or   \n'...
'  bright in one = dim in the other).                                       \n'...
'  * "Normalized Cross Correlation" method: alignment works only when the   \n'...
'  images are correlated (they have matching bright and dark areas). When   \n'...
'  using the cross correlation method, the second image should serve as a   \n'...
'  template and be smaller than the first image selected.                   \n'...
]);

ToolHelp{1} = AlignHelp;

ApplyThresholdHelp = sprintf([...
'  Help for the Apply Threshold module:                                     \n'...
'  Category: Image Processing                                               \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Pixel intensity below or above a certain threshold is set to zero.       \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  When a pixel is thresholded, its intensity value is set to zero so that  \n'...
'  it appears black.                                                        \n'...
'                                                                           \n'...
'  If you wish to threshold dim pixels, change the value for which "Pixels  \n'...
'  below this value will be set to zero". In this case, the remaining pixels\n'...
'  can retain their original intensity values or are shifted dimmer to      \n'...
'  match the threshold used.                                                \n'...
'                                                                           \n'...
'  If you wish to threshold bright pixels, change the value for which       \n'...
'  "Pixels above this value will be set to zero". In this case, you can     \n'...
'  expand the thresholding around them by entering the number of pixels to  \n'...
'  expand here: This setting is useful to adjust when you are attempting to \n'...
'  exclude bright artifactual objects: you can first set the threshold to   \n'...
'  exclude these bright objects, but it may also be desirable to expand the \n'...
'  thresholded region around those bright objects by a certain distance so  \n'...
'  as to avoid a ''''halo'''' effect.                                             \n'...
]);

ToolHelp{2} = ApplyThresholdHelp;

CalculateImageOverlapHelp = sprintf([...
'  Help for the Calculate Image Overlap module:                             \n'...
'  Category: Measurement                                                    \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  This module takes two binary images, one defined as ground truth and     \n'...
'  one the result of an algorithm, and finds the true positive, true        \n'...
'  negative, false positive, and false negative areas.  The F-factor is     \n'...
'  calculated from these areas.                                             \n'...
'  *************************************************************************\n'...
'  Settings:                                                                \n'...
'  "Which image represents the ground truth?" : This image is a binary (ie  \n'...
'  masked) image in which user-identified objects are represented.          \n'...
'  "Which image do you want to test against the ground truth?" : This image \n'...
'  is a binary (ie masked) image which is the result of some image          \n'...
'  processing algorithm (either in CellProfiler or any image processing     \n'...
'  software) that you would like to compare with the ground truth image.    \n'...
'                                                                           \n'...
'  The module calculates the overlap of the two image sets, and determines  \n'...
'  the F-factor, a measure of the algorithm''''s precision and recall.         \n'...
'                                                                           \n'...
'  Note: If you want to use the output of this module in a subsequesnt      \n'...
'  calculation, we suggest you specify the output name rather than use      \n'...
'  Automatic naming.                                                        \n'...
'                                                                           \n'...
'                                                                           \n'...
]);

ToolHelp{3} = CalculateImageOverlapHelp;

CalculateMathHelp = sprintf([...
'  Help for the Calculate Math module:                                                 \n'...
'  Category: Measurement                                                               \n'...
'                                                                                      \n'...
'  SHORT DESCRIPTION:                                                                  \n'...
'  This module can take measurements produced by previous modules and                  \n'...
'  performs basic arithmetic operations.                                               \n'...
'  *************************************************************************           \n'...
'                                                                                      \n'...
'  The arithmetic operations available in this module include addition,                \n'...
'  subtraction, multiplication and division. The operation can be chosen               \n'...
'  by adjusting the operations setting. The resulting data can also be                 \n'...
'  logged or raised to a power. This data can then be used in other                    \n'...
'  calculations and can be used in Classify Objects.                                   \n'...
'                                                                                      \n'...
'  This module currently works on an object-by-object basis (it calculates             \n'...
'  the requested operation for each object) but can also apply the operation           \n'...
'  for measurements made for entire images.                                            \n'...
'                                                                                      \n'...
'  Feature Number:                                                                     \n'...
'  The feature number specifies which features from the Measure module(s)              \n'...
'  will be used for the operation. See each Measure module''''s help for the              \n'...
'  numbered list of the features measured by that module.                              \n'...
'                                                                                      \n'...
'  Saving:                                                                             \n'...
'  The math measurements are stored as ''''Math_...''''. If both measures are                \n'...
'  image-based, then a single calculation (per cycle) will be stored as ''''Image'''' data.  \n'...
'  If one measure is object-based and one image-based, then the calculations will      \n'...
'  be stored associated with the object, one calculation per object.  If both are      \n'...
'  objects, then the calculations are stored with both objects.                        \n'...
'                                                                                      \n'...
'  Category: ''''Math''''                                                                    \n'...
'  Features measured:                         Feature Number:                          \n'...
'  (As named in module''''s last setting)     |       1                                   \n'...
'                                                                                      \n'...
'  Note: If you want to use the output of this module in a subsequesnt                 \n'...
'  calculation, we suggest you specify the output name rather than use                 \n'...
'  Automatic naming.                                                                   \n'...
'                                                                                      \n'...
'  See also CalculateRatios, all Measure modules.                                      \n'...
]);

ToolHelp{4} = CalculateMathHelp;

CalculateStatisticsHelp = sprintf([...
'  Help for the Calculate Statistics module:                                   \n'...
'  Category: Measurement                                                       \n'...
'                                                                              \n'...
'  SHORT DESCRIPTION:                                                          \n'...
'  Calculates measures of assay quality (V and Z'''' factors) and dose response   \n'...
'  data (EC50) for all measured features made from images.                     \n'...
'  *************************************************************************   \n'...
'                                                                              \n'...
'  The V and Z'''' factors are statistical measures of assay quality and are      \n'...
'  calculated for each per-cell and per-image measurement that you have made   \n'...
'  in the pipeline. For example, the Z'''' factor indicates how well-separated    \n'...
'  the positive and negative controls are. Calculating these values by         \n'...
'  placing this module at the end of a pipeline allows you to choose which     \n'...
'  measured features are most powerful for distinguishing positive and         \n'...
'  negative control samples, or for accurately quantifying the assay''''s         \n'...
'  response to dose. Both Z'''' and V factors will be calculated for all          \n'...
'  measured values (Intensity, AreaShape, Texture, etc.). These measurements   \n'...
'  can be exported as the "Experiment" set of data.                            \n'...
'                                                                              \n'...
'  For both Z'''' and V factors, the highest possible value (best assay           \n'...
'  quality) = 1 and they can range into negative values (for assays where      \n'...
'  distinguishing between positive and negative controls is difficult or       \n'...
'  impossible). A Z'''' factor > 0 is potentially screenable; A Z'''' factor > 0.5   \n'...
'  is considered an excellent assay.                                           \n'...
'                                                                              \n'...
'  The Z'''' factor is based only on positive and negative controls. The V        \n'...
'  factor is based on an entire dose-response curve rather than on the         \n'...
'  minimum and maximum responses. When there are only two doses in the assay   \n'...
'  (positive and negative controls only), the V factor will equal the Z''''       \n'...
'  factor.                                                                     \n'...
'                                                                              \n'...
'  The one-tailed Z'''' factor is an attempt to overcome the limitation of the    \n'...
'  Z''''-factor formulation used upon populations with moderate or high amounts   \n'...
'  of skewness. In these cases, the tails opposite to the mid-range point      \n'...
'  may lead to a high standard deviation for either population. This will      \n'...
'  give a low Z'''' factor even though the population means and samples between   \n'...
'  the means are well-separated. Therefore, the one-tailed Z''''factor is         \n'...
'  calculated with the same formula but using only those samples that lie      \n'...
'  between the population means.                                               \n'...
'                                                                              \n'...
'  NOTE: The statistical robustness of the one-tailed Z'''' factor has not been   \n'...
'  determined, and hence should probably not be used at this time.             \n'...
'                                                                              \n'...
'  NOTE: If the standard deviation of a measured feature is zero for a         \n'...
'  particular set of samples (e.g. all the positive controls), the Z'''' and V    \n'...
'  factors will equal 1 despite the fact that this is not a useful feature     \n'...
'  for the assay. This occurs when you have only one sample at each dose.      \n'...
'  This also occurs for some non-informative measured features, like the       \n'...
'  number of Cytoplasm compartments per Cell which is always equal to 1.       \n'...
'                                                                              \n'...
'  Features measured:   Feature Number:                                        \n'...
'  Zfactor            |      1                                                 \n'...
'  Vfactor            |      2                                                 \n'...
'  EC50               |      3                                                 \n'...
'  One-tailed Zfactor |      4                                                 \n'...
'                                                                              \n'...
'                                                                              \n'...
'  You must load a simple text file with one entry per cycle (using the Load   \n'...
'  Text module) that tells this module either which samples are positive and   \n'...
'  negative controls, or the concentrations of the sample-perturbing reagent   \n'...
'  (e.g., drug dosage). This text file would look something like this:         \n'...
'                                                                              \n'...
'  [For the case where you have only positive or negative controls; in this    \n'...
'  example the first three images are negative controls and the last three     \n'...
'  are positive controls. They need not be labeled 0 and 1; the calculation    \n'...
'  is based on whichever samples have minimum and maximum dose, so it would    \n'...
'  work just as well to use -1 and 1, or indeed any pair of values:]           \n'...
'  DESCRIPTION Doses                                                           \n'...
'  0                                                                           \n'...
'  0                                                                           \n'...
'  0                                                                           \n'...
'  1                                                                           \n'...
'  1                                                                           \n'...
'  1                                                                           \n'...
'                                                                              \n'...
'  [For the case where you have samples of varying doses; using decimal        \n'...
'  values:]                                                                    \n'...
'  DESCRIPTION Doses                                                           \n'...
'  .0000001                                                                    \n'...
'  .00000003                                                                   \n'...
'  .00000001                                                                   \n'...
'  .000000003                                                                  \n'...
'  .000000001                                                                  \n'...
'  (Note that in this example, the Z'''' and V factors will be meaningless because\n'...
'  there is only one sample at the each dose, so the standard deviation of     \n'...
'  measured features at each dose will be zero).                               \n'...
'                                                                              \n'...
'  [Another example where you have samples of varying doses; this time using   \n'...
'  exponential notation:]                                                      \n'...
'  DESCRIPTION Doses                                                           \n'...
'  10^-7                                                                       \n'...
'  10^-7.523                                                                   \n'...
'  10^-8                                                                       \n'...
'  10^-8.523                                                                   \n'...
'  10^-9                                                                       \n'...
'                                                                              \n'...
'                                                                              \n'...
'  The reference for Z'''' factor is: JH Zhang, TD Chung, et al. (1999) "A        \n'...
'  simple statistical parameter for use in evaluation and validation of high   \n'...
'  throughput screening assays." J Biomolecular Screening 4(2): 67-73.         \n'...
'                                                                              \n'...
'  The reference for V factor is: I Ravkin (2004): Poster #P12024 - Quality    \n'...
'  Measures for Imaging-based Cellular Assays. Society for Biomolecular        \n'...
'  Screening Annual Meeting Abstracts. This is likely to be published          \n'...
'                                                                              \n'...
'  Code for the calculation of Z'''' and V factors was kindly donated by Ilya     \n'...
'  Ravkin: http://www.ravkin.net                                               \n'...
'                                                                              \n'...
'  This module currently contains code copyrighted by Carlos Evangelista.      \n'...
]);

ToolHelp{5} = CalculateStatisticsHelp;

ClassifyObjectsHelp = sprintf([...
'  Help for the Classify Objects module:                                         \n'...
'  Category: Object Processing                                                   \n'...
'                                                                                \n'...
'  SHORT DESCRIPTION:                                                            \n'...
'  Classifies objects into different classes according to the value of a         \n'...
'  measurement you choose.                                                       \n'...
'  *************************************************************************     \n'...
'                                                                                \n'...
'  This module classifies objects into a number of different bins                \n'...
'  according to the value of a measurement (e.g. by size, intensity, shape).     \n'...
'  It reports how many objects fall into each class as well as the               \n'...
'  percentage of objects that fall into each class. The module requests that     \n'...
'  you select the measurement feature to be used to classify your objects and    \n'...
'  specify the bins to use. This module requires that you run a measurement      \n'...
'  module previous to this module in the pipeline so that the measurement        \n'...
'  values can be used to classify the objects. If you are classifying by the     \n'...
'  ratio of two measurements, you must put a CalculateRatios module previous     \n'...
'  to this module in the pipeline.                                               \n'...
'                                                                                \n'...
'  Settings:                                                                     \n'...
'                                                                                \n'...
'  Feature Number:                                                               \n'...
'  The feature number specifies which feature from the Measure module will       \n'...
'  be used for classifying. See each Measure module''''s help for the numbered      \n'...
'  list of the features measured by that module.                                 \n'...
'                                                                                \n'...
'  TODO: IS THE FOLLOWING STILL TRUE?                                            \n'...
'  If you are selecting Ratio, this is the order of ratio measurements that      \n'...
'  you calculated, i.e. module order in pipeline. For instance, if you previously\n'...
'  calculated the ratio of Area to Perimeter for nuclei, MajorAxisLength to      \n'...
'  MinorAxisLength for cells, and MeanIntensity to MaxIntensity for nuclei,      \n'...
'  the value for the Area to Perimeter for nuclei would be 1, the value for      \n'...
'  MajorAxisLength to MinorAxisLength for cells would be 2, and the value        \n'...
'  for MeanIntensity to MaxIntensity for nuclei would be 3.                      \n'...
'                                                                                \n'...
'  Saving:                                                                       \n'...
'                                                                                \n'...
'  Category = ''''ClassifyObjects''''                                                  \n'...
'  Features measured:                         Feature Number:                    \n'...
'  (As named in module''''s last setting)     |       1                             \n'...
'  TODO: What does that mean "As named in module''''s last setting"?                \n'...
'                                                                                \n'...
'  See also ClassifyObjectsByTwoMeasurements, FilterByObjectMeasurement.         \n'...
]);

ToolHelp{6} = ClassifyObjectsHelp;

ClassifyObjectsByTwoMeasurementsHelp = sprintf([...
'  Help for the Classify Objects By Two Measurements module:                \n'...
'  Category: Object Processing                                              \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Classifies objects into different classes according to the value of two  \n'...
'  measurements of your choice.                                             \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module classifies objects into four different classes according to  \n'...
'  the value of two measurements of your choice (e.g. size, intensity,      \n'...
'  shape). Choose the measurement features you want to use, and select a    \n'...
'  threshold for each set of data (measurements). The objects will then be  \n'...
'  separated in four classes: (1) objects whose first and second            \n'...
'  measurements are both below the specified thresholds, (2) objects whose  \n'...
'  first measurement is below the first threshold and whose second          \n'...
'  measurement is above the second threshold, (3) the opposite of class 2,  \n'...
'  and (4) objects whose first and second measurements are both above the   \n'...
'  specified thresholds. You can give names to the class/bins, or leave the \n'...
'  default names of LowLow, LowHigh, HighLow, HighHigh. This module requires\n'...
'  that you run measurement modules previous to this module in the pipeline \n'...
'  so that the measurement values can be used to classify the objects.      \n'...
'  Currently, classifying by the ratio of two measurements is unavailable.  \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  Feature Number:                                                          \n'...
'  The feature number specifies which feature from the Measure module will  \n'...
'  be used for classifying. See each Measure module''''s help for the numbered \n'...
'  list of the features measured by that module.                            \n'...
'                                                                           \n'...
'  See also ClassifyObjects, FilterByObjectMeasurement.                     \n'...
]);

ToolHelp{7} = ClassifyObjectsByTwoMeasurementsHelp;

ColorToGrayHelp = sprintf([...
'  Help for the Color To Gray module:                                       \n'...
'  Category: Image Processing                                               \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Converts RGB (Red, Green, Blue) color images to grayscale. All channels  \n'...
'  can be merged into one grayscale image (COMBINE option) or each channel  \n'...
'  can be extracted into a separate grayscale image (SPLIT option).         \n'...
'  *************************************************************************\n'...
'  Note: this module is especially helpful because all identify modules     \n'...
'  require grayscale images.                                                \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  Split:                                                                   \n'...
'  Takes a color image and splits the three channels (red, green, blue) into\n'...
'  three separate grayscale images.                                         \n'...
'                                                                           \n'...
'  Combine:                                                                 \n'...
'  Takes a color image and converts it to grayscale by combining the three  \n'...
'  channels (red, green, blue) together.                                    \n'...
'                                                                           \n'...
'  Adjustment factors: Leaving the adjustment factors set to 1 will balance \n'...
'  all three colors equally in the final image, which will use the same     \n'...
'  range of intensities as the incoming image.  To weight colors relative to\n'...
'  each other, the adjustment factor can be increased (to increase the      \n'...
'  weighting) or decreased (to decrease the weighting).                     \n'...
'                                                                           \n'...
'  See also GrayToColor.                                                    \n'...
]);

ToolHelp{8} = ColorToGrayHelp;

CombineHelp = sprintf([...
'  Help for the Combine module:                                             \n'...
'  Category: Image Processing                                               \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Takes two or more images and combines them into one. Each image''''s        \n'...
'  contribution to the combined image can be adjusted independently.        \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module combines input images into a new image that is the weighted  \n'...
'  average of the input images'''' pixel intensities. The average is found by  \n'...
'  first multiplying each input image by its requested weight, adding up    \n'...
'  those images, and dividing the result by the sum of the weights. By      \n'...
'  taking the weighted average of the pixel intensities, the overall        \n'...
'  intensity of the resulting image will remain in the same range as that of\n'...
'  the inputs.                                                              \n'...
'                                                                           \n'...
'  The images to be combined must be either all grayscale or all color. If  \n'...
'  you want to combine grayscale images to create a color image, see the    \n'...
'  GrayToColor module. If you want to change an image''''s overall intensity,  \n'...
'  you should use the Rescale module.                                       \n'...
'                                                                           \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  * Choosing the input images: The images that you would like to combine   \n'...
'  must all be the same size, since the average will be taken pixel by      \n'...
'  pixel. The input images must be all grayscale or all color.              \n'...
'                                                                           \n'...
'  * Weights: The weights will determine how much each input image will     \n'...
'  contribute to the combined image. The higher the weight of an image, the \n'...
'  more it will be reflected in the combined image. Because of the way the  \n'...
'  average is taken, it only matters how these weights relate to each other \n'...
'  (e.g. entering weights 0.25, 0.25, and 0.5 is the same as entering       \n'...
'  weights 1, 1, and 2). The weights must be positive values.               \n'...
'                                                                           \n'...
'  See also: GrayToColor and Rescale                                        \n'...
]);

ToolHelp{9} = CombineHelp;

ConvertToImageHelp = sprintf([...
'  Help for the Convert To Image module:                                    \n'...
'  Category: Object Processing                                              \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Converts objects you have identified into an image so that it can be     \n'...
'  saved with the Save Images module.                                       \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module allows you to take previously identified objects and convert \n'...
'  them into an image, which can then be saved with the SaveImages modules. \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  Binary (black & white), grayscale, or color: Choose how you would like   \n'...
'  the objects to appear. Color allows you to choose a colormap which will  \n'...
'  produce jumbled colors for your objects. Grayscale will give each object \n'...
'  a graylevel pixel intensity value corresponding to its number (also      \n'...
'  called label), so it usually results in objects on the left side of the  \n'...
'  image being very dark, and progressing towards white on the right side of\n'...
'  the image. You can choose "Color" with a "Gray" colormap to produce      \n'...
'  jumbled gray objects.                                                    \n'...
'                                                                           \n'...
'  Colormap:                                                                \n'...
'  Affect how the objects are colored. You can look up your default colormap\n'...
'  under File > Set Preferences. Look in matlab help online (try Google) to \n'...
'  see what the available colormaps look like. See also Help > HelpColormaps\n'...
'  in the main CellProfiler window.                                         \n'...
]);

ToolHelp{10} = ConvertToImageHelp;

CorrectIllumination_ApplyHelp = sprintf([...
'  Help for the Correct Illumination Apply module:                          \n'...
'  Category: Image Processing                                               \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Applies an illumination function, created by                             \n'...
'  CorrectIllumination_Calculate, to an image in order to correct for uneven\n'...
'  illumination (uneven shading).                                           \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module corrects for uneven illumination of each image. An           \n'...
'  illumination function image that represents the variation in             \n'...
'  illumination across the field of view is either made by a previous       \n'...
'  module or loaded by a previous module in the pipeline.  This module      \n'...
'  then applies the illumination function to each image coming through      \n'...
'  the pipeline to produce the corrected image.                             \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  Divide or Subtract:                                                      \n'...
'  This module either divides each image by the illumination function,      \n'...
'  or the illumination function is subtracted from each image. The          \n'...
'  choice depends on how the illumination function was calculated and       \n'...
'  on your physical model of how illumination variation affects the         \n'...
'  background of images relative to the objects in images. If the           \n'...
'  background is significant relative to the real signal coming from        \n'...
'  cells (a somewhat empirical decision), then the Subtract option may be   \n'...
'  preferable. If, in contrast, the signal to background ratio is quite     \n'...
'  high (the cells are stained strongly), then the Divide option is         \n'...
'  probably preferable. Typically, Subtract is used if the illumination     \n'...
'  function was calculated using the background option in the               \n'...
'  CORRECTILLUMINATION_CALCULATE module and divide is used if the           \n'...
'  illumination function was calculated using the regular option.           \n'...
'                                                                           \n'...
'  Rescaling:                                                               \n'...
'  If subtracting the illumination function, any pixels that end up         \n'...
'  negative are set to zero, so no rescaling of the corrected image is      \n'...
'  necessary. If dividing, the resulting corrected image may be in a        \n'...
'  very different range of intensity values relative to the original,       \n'...
'  depending on the values of the illumination function. If you are not     \n'...
'  rescaling, you should confirm that the illumination function is in a     \n'...
'  reasonable range (e.g. 1 to some number), so that the resulting          \n'...
'  image is in a reasonable range (0 to 1). Otherwise, you have two         \n'...
'  options to rescale the resulting image: either stretch the image         \n'...
'  so that the minimum is zero and the maximum is one, or match the         \n'...
'  maximum of the corrected image to the the maximum of the original.       \n'...
'  Either of these options has the potential to disturb the brightness      \n'...
'  of images relative to other images in the set, so caution should be      \n'...
'  used in interpreting intensity measurements from images that have        \n'...
'  been rescaled. See the help for the Rescale Intensity module for details.\n'...
'                                                                           \n'...
'  See also CorrectIllumination_Calculate, RescaleIntensity.                \n'...
]);

ToolHelp{11} = CorrectIllumination_ApplyHelp;

CorrectIllumination_CalculateHelp = sprintf([...
'  Help for the Correct Illumination Calculate module:                          \n'...
'  Category: Image Processing                                                   \n'...
'                                                                               \n'...
'  SHORT DESCRIPTION:                                                           \n'...
'  Calculates an illumination function, used to correct uneven                  \n'...
'  illumination/lighting/shading or to reduce uneven background in images.      \n'...
'  *************************************************************************    \n'...
'                                                                               \n'...
'  This module calculates an illumination function which can be saved to the    \n'...
'  hard drive for later use (you should save in .mat format using the Save      \n'...
'  Images module), or it can be immediately applied to images later in the      \n'...
'  pipeline (using the CorrectIllumination_Apply module). This will correct     \n'...
'  for uneven illumination of each image.                                       \n'...
'                                                                               \n'...
'  Illumination correction is challenging and we are writing a paper on it      \n'...
'  which should help clarify it (TR Jones, AE Carpenter, P Golland, in          \n'...
'  preparation). In the meantime, please be patient in trying to understand     \n'...
'  this module.                                                                 \n'...
'                                                                               \n'...
'  Settings:                                                                    \n'...
'                                                                               \n'...
'  * Regular or Background intensities?                                         \n'...
'                                                                               \n'...
'  Regular intensities:                                                         \n'...
'  If you have objects that are evenly dispersed across your image(s) and       \n'...
'  cover most of the image, then you can choose Regular intensities. Regular    \n'...
'  intensities makes the illumination function based on the intensity at        \n'...
'  each pixel of the image (or group of images if you are in All mode) and      \n'...
'  is most often rescaled (see below) and applied by division using             \n'...
'  CorrectIllumination_Apply. Note that if you are in Each mode or using a      \n'...
'  small set of images with few objects, there will be regions in the           \n'...
'  average image that contain no objects and smoothing by median filtering      \n'...
'  is unlikely to work well.                                                    \n'...
'  Note: it does not make sense to choose (Regular + no smoothing + Each)       \n'...
'  because the illumination function would be identical to the original         \n'...
'  image and applying it will yield a blank image. You either need to smooth    \n'...
'  each image or you need to use All images.                                    \n'...
'                                                                               \n'...
'  Background intensities:                                                      \n'...
'  If you think that the background (dim points) between objects show the       \n'...
'  same pattern of illumination as your objects of interest, you can choose     \n'...
'  Background intensities. Background intensities finds the minimum pixel       \n'...
'  intensities in blocks across the image (or group of images if you are in     \n'...
'  All mode) and is most often applied by subtraction using the                 \n'...
'  CorrectIllumination_Apply module.                                            \n'...
'  Note: if you will be using the Subtract option in the                        \n'...
'  CorrectIllumination_Apply module, you almost certainly do NOT want to        \n'...
'  Rescale! See below!!                                                         \n'...
'                                                                               \n'...
'  * Each or All?                                                               \n'...
'  Enter Each to calculate an illumination function for each image              \n'...
'  individually, or enter All to calculate the illumination function from       \n'...
'  all images at each pixel location. All is more robust, but depends on the    \n'...
'  assumption that the illumination patterns are consistent across all the      \n'...
'  images in the set and that the objects of interest are randomly              \n'...
'  positioned within each image. Applying illumination correction on each       \n'...
'  image individually may make intensity measures not directly comparable       \n'...
'  across different images.                                                     \n'...
'                                                                               \n'...
'  * Pipeline or Load Images?                                                   \n'...
'  If you choose Load Images, the module will calculate the illumination        \n'...
'  correction function the first time through the pipeline by loading every     \n'...
'  image of the type specified in the Load Images module. It is then            \n'...
'  acceptable to use the resulting image later in the pipeline. If you          \n'...
'  choose Pipeline, the module will allow the pipeline to cycle through all     \n'...
'  of the cycles. With this option, the module does not need to follow a        \n'...
'  Load Images module; it is acceptable to make the single, averaged image      \n'...
'  from images resulting from other image processing steps in the pipeline.     \n'...
'  However, the resulting average image will not be available until the last    \n'...
'  cycle has been processed, so it cannot be used in subsequent modules         \n'...
'  unless they are instructed to wait until the last cycle.                     \n'...
'                                                                               \n'...
'  * Dilation:                                                                  \n'...
'  For some applications, the incoming images are binary and each object        \n'...
'  should be dilated with a gaussian filter in the final averaged               \n'...
'  (projection) image. This is for a sophisticated method of illumination       \n'...
'  correction where model objects are produced.                                 \n'...
'                                                                               \n'...
'  * Smoothing Method:                                                          \n'...
'  If requested, the resulting image is smoothed. See the help for the          \n'...
'  Smooth module for more details. If you are using Each mode, this is          \n'...
'  almost certainly necessary. If you have few objects in each image or a       \n'...
'  small image set, you may want to smooth. The goal is to smooth to the        \n'...
'  point where the illumination function resembles a believable pattern.        \n'...
'  That is, if it is a lamp illumination problem you are trying to correct,     \n'...
'  you would apply smoothing until you obtain a fairly smooth pattern           \n'...
'  without sharp bright or dim regions.  Note that smoothing is a               \n'...
'  time-consuming process, and fitting a polynomial is fastest but does not     \n'...
'  allow a very tight fit as compared to the slower median and gaussian         \n'...
'  filtering methods. We typically recommend median vs. gaussian because median \n'...
'  is less sensitive to outliers, although the results are also slightly        \n'...
'  less smooth and the fact that images are in the range of 0 to 1 means that   \n'...
'  outliers typically will not dominate too strongly anyway. A less commonly    \n'...
'  used option is to *completely* smooth the entire image by choosing           \n'...
'  "Smooth to average", which will create a flat, smooth image where every      \n'...
'  pixel of the image is the average of what the illumination function would    \n'...
'  otherwise have been.                                                         \n'...
'                                                                               \n'...
'  * Approximate width of objects:                                              \n'...
'  For certain smoothing methods, this will be used to calculate an adequate    \n'...
'  filter size. If you don''''t know the width of your objects, you can use the    \n'...
'  ShowOrHidePixelData image tool to find out or leave the word ''''Automatic''''     \n'...
'  to calculate a smoothing filter simply based on the size of the image.       \n'...
'                                                                               \n'...
'                                                                               \n'...
'  Rescaling:                                                                   \n'...
'  The illumination function can be rescaled so that the pixel intensities      \n'...
'  are all equal to or greater than one. This is recommended if you plan to     \n'...
'  use the division option in CorrectIllumination_Apply so that the             \n'...
'  corrected images are in the range 0 to 1. It is NOT recommended if you       \n'...
'  plan to use the Subtract option in CorrectIllumination_Apply! Note that      \n'...
'  as a result of the illumination function being rescaled from 1 to            \n'...
'  infinity, if there is substantial variation across the field of view, the    \n'...
'  rescaling of each image might be dramatic, causing the corrected images      \n'...
'  to be very dark.                                                             \n'...
'                                                                               \n'...
'  See also Average, CorrectIllumination_Apply, and Smooth modules.             \n'...
]);

ToolHelp{12} = CorrectIllumination_CalculateHelp;

CreateBatchFilesHelp = sprintf([...
'  Help for the Create Batch Files module:                                        \n'...
'  Category: File Processing                                                      \n'...
'                                                                                 \n'...
'  SHORT DESCRIPTION:                                                             \n'...
'  Produces text files which allow individual batches of images to be             \n'...
'  processed separately on a cluster of computers.                                \n'...
'  *************************************************************************      \n'...
'                                                                                 \n'...
'  This module creates a set of files that can be submitted in parallel to a      \n'...
'  cluster for faster processing. This module should be placed at the end of      \n'...
'  an image processing pipeline.                                                  \n'...
'                                                                                 \n'...
'  Before using this module, you should read Help -> General Help ->              \n'...
'  Batch Processing. That help file also will instruct you on how to              \n'...
'  actually run the batch files that are created by this module.                  \n'...
'                                                                                 \n'...
'  Settings:                                                                      \n'...
'  Other Paths: The last two settings allow changing the paths between            \n'...
'  local and cluster computers. For example, when starting with a PC              \n'...
'  computer and going to a Linux machine, the path may be the same                \n'...
'  except the first notation:                                                     \n'...
'                                                                                 \n'...
'  PC:    \\\\remoteserver1\\cluster\\project                                         \n'...
'  Linux: /remoteserver2/cluster/project                                          \n'...
'                                                                                 \n'...
'  In this case, for the local machine you would type "\\\\remoteserver1" and       \n'...
'  for the remote machine you would type "/remoteserver2". As of now, this        \n'...
'  is hardcoded to always use Linux and Macintosh style slashes (/).              \n'...
'                                                                                 \n'...
'  If your input image folder and output folder are located on different          \n'...
'  machines, you can specify the input image paths followed by the output         \n'...
'  path separated by a comma.                                                     \n'...
'                                                                                 \n'...
'  Note: This module produces a Batch_data.mat file. This contains the            \n'...
'  first image set''''s measurements plus information about the processing           \n'...
'  that each batch file needs access to in order to initialize the                \n'...
'  processing.  See the BatchRunner.py, CPCluster.py, and CPCluster.m             \n'...
'  files for how this information is used.  As many clusters use                  \n'...
'  different configurations for batch control, compiled versus                    \n'...
'  interpreted Matlab, access paths, etc. it will probably be necessary           \n'...
'  to use those files as guides for a locally customized solution.                \n'...
'  BatchRunner.py requires Python 2.5.2 and the module scipy 0.6 to be installed. \n'...
'                                                                                 \n'...
'  See also MergeOutputFiles, GSBatchProcessing.                                  \n'...
]);

ToolHelp{13} = CreateBatchFilesHelp;

CreateWebPageHelp = sprintf([...
'  Help for the Create Web Page module:                                      \n'...
'  Category: Other                                                           \n'...
'                                                                            \n'...
'  SHORT DESCRIPTION:                                                        \n'...
'  Creates the html for a webpage to display images (or their thumbnails, if \n'...
'  desired), including a link to a zipped file with all of the included      \n'...
'  images.                                                                   \n'...
'  ************************************************************************* \n'...
'                                                                            \n'...
'  This module will create an html file that will display the specified      \n'...
'  images and also produce a zip-file of these images with a link. The       \n'...
'  thumbnail images must be in the same directory as the original images.    \n'...
'                                                                            \n'...
'  Settings:                                                                 \n'...
'  * Thumbnails: By default, the full-size images will be displayed on the   \n'...
'  webpage itself. If you have made thumbnails (small versions of the        \n'...
'  images), you can have these displayed on the webpage, and the full-size   \n'...
'  images will be displayed when the user clicks on the thumbnails.          \n'...
'                                                                            \n'...
'  * Create webpage (HTML file) before or after processing all images?       \n'...
'  If the full-size images and thumbnails (optional) already exist on the    \n'...
'  hard drive and you are loading them with the Load Images module, you can  \n'...
'  answer "Before" to this question. If, however, you are producing either   \n'...
'  of these images during the pipeline and you therefore need to complete    \n'...
'  all of the cycles before generating the webpage, choose "After".          \n'...
'                                                                            \n'...
'  * What do you want to call the resulting webpage file (include .htm or    \n'...
'  .html as the extension)?                                                  \n'...
'  This file will be created in your default output directory. It can then   \n'...
'  be copied to your web server. The primary difference between .htm and     \n'...
'  .html is simply that .html can''''t be represented in a DOS/16 bit operating \n'...
'  system which uses the 8.3 file naming convention. Most servers (but not   \n'...
'  all) that can handle 4 character file extensions can be set up to treat   \n'...
'  .htm and .html files in exactly the same way, just as they can be set up  \n'...
'  to treat .jpg and .jpeg files the same way.                               \n'...
'                                                                            \n'...
'  * Will you have the webpage HTML file in the same folder or one level     \n'...
'  above the images?                                                         \n'...
'  If the images are going to be in a subfolder, then the HTML file will be  \n'...
'  one level above the images. If the HTML file and the images will all be   \n'...
'  in the same folder, answer "Same as the images".                          \n'...
'                                                                            \n'...
'  * Table border: If desired, there will be lines around each image,        \n'...
'  creating a table. The thickness and color of these lines can be specified.\n'...
'                                                                            \n'...
'  * Spacing between images: If this is set to greater than zero, there will \n'...
'  be an additional frame, the same color as the table border, around each   \n'...
'  image. The spacing is the space between the frames that surrounds each    \n'...
'  image.                                                                    \n'...
'                                                                            \n'...
'  * Image border width: This is the distance between each image and its     \n'...
'  frame. If the spacing between images is zero, you will not see the frame  \n'...
'  itself, but the image border width will still affect the spacing between  \n'...
'  images.                                                                   \n'...
]);

ToolHelp{14} = CreateWebPageHelp;

CropHelp = sprintf([...
'  Help for the Crop module:                                                \n'...
'  Category: Image Processing                                               \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Crops images into a rectangle, ellipse, an arbitrary shape provided by   \n'...
'  the user, a shape identified by an identify module, or a shape used at a \n'...
'  previous step in the pipeline on another image.                          \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Keep in mind that cropping changes the size of your images, which may    \n'...
'  have unexpected consequences. For example, identifying objects in a      \n'...
'  cropped image and then trying to measure their intensity in the          \n'...
'  *original* image will not work because the two images are not the same   \n'...
'  size.                                                                    \n'...
'                                                                           \n'...
'  Features measured:          Feature Number:                              \n'...
'  AreaRetainedAfterCropping |   1                                          \n'...
'  OriginalImageArea         |   2                                          \n'...
'                                                                           \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  Shape:                                                                   \n'...
'  Rectangle - self-explanatory.                                            \n'...
'  Ellipse - self-explanatory.                                              \n'...
'  Other...                                                                 \n'...
'  * To crop based on an object identified in a previous module, type in the\n'...
'  name of that identified object instead of Rectangle or Ellipse. Please   \n'...
'  see PlateFix for information on cropping based on previously identified  \n'...
'  plates.                                                                  \n'...
'  * To crop into an arbitrary shape you define, use the LoadSingleImage    \n'...
'  module to load a black and white image (that you have already prepared)  \n'...
'  from a file. If you have created this image in an image program such as  \n'...
'  Photoshop, this binary image should contain only the values 0 and 255,   \n'...
'  with zeros (black) for the parts you want to remove and 255 (white) for  \n'...
'  the parts you want to retain. Or, you may have previously generated a    \n'...
'  binary image using this module (e.g. using the ellipse option) and saved \n'...
'  it using the SaveImages module (see Special note on saving images below).\n'...
'  In any case, the image must be the exact same starting size as your image\n'...
'  and should contain a contiguous block of white pixels, because keep in   \n'...
'  mind that the cropping module will remove rows and columns that are      \n'...
'  completely blank.                                                        \n'...
'  * To crop into the same shape as was used previously in the pipeline to  \n'...
'  crop another image, type in CroppingPreviousCroppedImageName, where      \n'...
'  PreviousCroppedImageName is the image you produced with the previous Crop\n'...
'  module.                                                                  \n'...
'                                                                           \n'...
'  Coordinate or mouse: For ellipse, you will be asked to click five or more\n'...
'  points to define an ellipse around the part of the image you want to     \n'...
'  analyze.  Keep in mind that the more points you click, the longer it will\n'...
'  take to calculate the ellipse shape. For rectangle, you can click as many\n'...
'  points as you like that are in the interior of the region you wish to    \n'...
'  retain.                                                                  \n'...
'                                                                           \n'...
'  PlateFix: To be used only when cropping based on previously identified   \n'...
'  objects. When attempting to crop based on a previously identified object \n'...
'  (such as a yeast plate), sometimes the identified plate does not have    \n'...
'  precisely straight edges - there might be a tiny, almost unnoticeable    \n'...
'  ''''appendage'''' sticking out of the plate.  Without plate fix, the crop      \n'...
'  module would not crop the image tightly enough - it would include enough \n'...
'  of the image to retain even the tiny appendage, so there would be a lot  \n'...
'  of blank space around the plate. This can cause problems with later      \n'...
'  modules (especially IlluminationCorrection). PlateFix takes the          \n'...
'  identified object and crops to exclude any minor appendages (technically,\n'...
'  any horizontal or vertical line where the object covers less than 50%% of \n'...
'  the image). It also sets pixels around the edge of the object (for       \n'...
'  regions > 50%% but less than 100%%) that otherwise would be zero to the    \n'...
'  background pixel value of your image thus avoiding the problems with     \n'...
'  other modules. Important note >> PlateFix uses the coordinates           \n'...
'  entered in the boxes normally used for rectangle cropping (Top, Left) and\n'...
'  (Bottom, Right) to tighten the edges around your identified plate. This  \n'...
'  is done because in the majority of plate identifications you do not want \n'...
'  to include the sides of the plate. If you would like the entire plate to \n'...
'  be shown, you should enter 1:end for both coordinates. If you would like \n'...
'  to crop 80 pixels from each edge of the plate, you could enter 80:end-80 \n'...
'  for (Top, Left) and (Bottom, Right).                                     \n'...
'                                                                           \n'...
'  You have the option to remove rows and columns that are completely blank \n'...
'  - even if they are not at the edges of the image but internal.           \n'...
'                                                                           \n'...
'  Special note on saving images: See the help for the SaveImages module.   \n'...
'  Also, you can save the cropping shape that you have used (e.g. an ellipse\n'...
'  you drew), so that in future analyses you can use the File option. To do \n'...
'  this, you need to add the prefix "Cropping" to the name you called the   \n'...
'  cropped image (e.g. CroppingCropBlue) and this is the name of the image  \n'...
'  you will want to save using the SaveImages module. I think you will want \n'...
'  to save it in mat format. You can also save the cropping shape, trimmed  \n'...
'  for any unused rows and columns at the edges. This image has the prefix  \n'...
'  "CropMask" plus the name you called the cropped image (e.g.              \n'...
'  CropMaskCropBlue). This image is used for downstream modules that use    \n'...
'  the CPgraythresh function. The Cropping and CropMask images are similar  \n'...
'  (both are binary and contain the cropping shape you used), but the       \n'...
'  Cropping image is the same size as the original images to be processed   \n'...
'  whereas the CropMask image is the same size as the final, cropped image. \n'...
]);

ToolHelp{15} = CropHelp;

DICTransformHelp = sprintf([...
'  Help for the DIC Transform module:                                      \n'...
'  Category: Image Processing                                              \n'...
'                                                                          \n'...
'  SHORT DESCRIPTION:                                                      \n'...
'  Transforms a DIC image to more readily enable object identification.    \n'...
'                                                                          \n'...
'  ************************************************************************\n'...
'                                                                          \n'...
'  Typically, identifying objects with algorithms like those in            \n'...
'  CellProfiler''''s "Identify" modules does not work well for DIC images     \n'...
'  because the interior of each object has similar intensity values as the \n'...
'  background. This module provides several algorithms for transforming a  \n'...
'  DIC image to enhance the brightness of objects relative to the          \n'...
'  background.                                                             \n'...
'                                                                          \n'...
'                                                                          \n'...
'  Settings:                                                               \n'...
'                                                                          \n'...
'  * Transformation methods: Several options are provided. For most DIC    \n'...
'  images, the line integration and the energy minimization algorithms     \n'...
'  perform the best. For objects that are heavily textured (e.g., mice     \n'...
'  embryos), a simple normally weighted variance filter is usually more    \n'...
'  helpful.                                                                \n'...
'                                                                          \n'...
'  * Shear axis: Direction along which the "shadow" of the objects appears \n'...
'  to lie.                                                                 \n'...
]);

ToolHelp{16} = DICTransformHelp;

DefineGridHelp = sprintf([...
'  Help for the Define Grid module:                                         \n'...
'  Category: Other                                                          \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Produces a grid of desired specifications either manually, or            \n'...
'  automatically based on previously identified objects. The grid can then  \n'...
'  be used to make measurements (using Identify Objects in Grid) or to      \n'...
'  display text information (using Display Grid Info) within each           \n'...
'  compartment of the grid.                                                 \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module defines the location of a grid that can be used by modules   \n'...
'  downstream. When used in combination with IdentifyObjectsInGrid, it      \n'...
'  allows the measurement of the size, shape, intensity and texture of each \n'...
'  object in a grid. The grid is defined by the location of marker spots    \n'...
'  (control spots) in the grid, which are either indicated manually or are  \n'...
'  found automatically using previous modules in the pipeline.              \n'...
'                                                                           \n'...
'  If you are using images of plastic plates, it may be useful to precede   \n'...
'  this module with an IdentifyPrimAutomatic module to find the plastic     \n'...
'  plate, followed by a Crop module to remove the plastic edges of the      \n'...
'  plate, so that the grid can be defined within the smooth portion of the  \n'...
'  plate only. If the plates are not centered in exactly the same position  \n'...
'  from one image to the next, this allows the plates to be identified      \n'...
'  automatically and then cropped so that the interior of the plates, upon  \n'...
'  which the grids will be defined, are always in precise alignment with    \n'...
'  each other.                                                              \n'...
'                                                                           \n'...
'  Features measured:      Feature Number:                                  \n'...
'  XLocationOfLowestXSpot |      1                                          \n'...
'  YLocationOfLowestYSpot |      2                                          \n'...
'  XSpacing               |      3                                          \n'...
'  YSpacing               |      4                                          \n'...
'  Rows                   |      5                                          \n'...
'  Columns                |      6                                          \n'...
'  TotalHeight            |      7                                          \n'...
'  TotalWidth             |      8                                          \n'...
'  LeftOrRightNum         |      9 (left = 1, right = 0)                    \n'...
'  TopOrBottomNum         |     10 (top = 1, bottom = 0)                    \n'...
'  RowsOrColumnsNum       |     11 (rows = 1, columns = 1)                  \n'...
'  The last three are related to the questions the module ask you about the \n'...
'  grid.                                                                    \n'...
'                                                                           \n'...
'                                                                           \n'...
'  Settings: Most are self-explanatory.                                     \n'...
'                                                                           \n'...
'  EACH CYCLE or ONCE: If all of your images are perfectly aligned with each\n'...
'  other (due to very consistent image acquisition, consistent grid location\n'...
'  within the plate, and/or automatic cropping precisely within each plate),\n'...
'  you can define the location of the marker spots ONCE for all of the image\n'...
'  cycles; if the location of the grid will vary from one image cycle to the\n'...
'  next then you should define the location of the marker spots for EACH    \n'...
'  CYCLE independently.                                                     \n'...
'                                                                           \n'...
'  MANUAL mode: In MANUAL mode, you manually indicate known locations of    \n'...
'  marker spots in the grid and have the rest of the positions calculated   \n'...
'  from those marks, no matter what the image itself looks like. This mode  \n'...
'  requires manually clicking on a marker spot with the MOUSE for each image\n'...
'  (if it is not visible you have to click where it ought to be). Or, you   \n'...
'  can type in the pixel COORDINATES of the marker spots. DISTANCE from the \n'...
'  control spot to the top left corner of the grid: If the marker spot you  \n'...
'  have chosen to use is the top left corner spot of the grid, then specify \n'...
'  0,0. As another example, if the control spot is in the same row as the   \n'...
'  grid and is one spot distance to the left of the grid, you could specify \n'...
'  that the spot is -1,0 spot units away from the top left spot. You can    \n'...
'  also us marker spots that are within the grid. For example, if the 3rd   \n'...
'  row, 3rd column spot is the one you choose to be the marker spot because \n'...
'  it is always present in images, then you would enter 3,3.                \n'...
'                                                                           \n'...
'  AUTOMATIC mode: If you would like the grid to be defined automatically,  \n'...
'  an IdentifyPrimAutomatic module must be run prior to this module to      \n'...
'  identify the objects which will be used to define the grid. The          \n'...
'  left-most, right-most, top-most, and bottom-most object will be used to  \n'...
'  define the edges of the grid and the rows and columns will be evenly     \n'...
'  spaced between these edges. Note that automatic mode requires that the   \n'...
'  incoming objects are nicely defined - for example, if there is an object \n'...
'  at the edge of the images that is not really an object that ought to be  \n'...
'  in the grid, a skewed grid will result. You might wish to use a          \n'...
'  FilterByObjectMeasurement module to clean up badly identified objects    \n'...
'  prior to defining the grid. If the spots are slightly out of alignment   \n'...
'  with each other from one image cycle to the next, this allows the        \n'...
'  identification to be a bit flexible and adapt to the real location of the\n'...
'  spots.                                                                   \n'...
'                                                                           \n'...
'  SAVING IMAGES: You can save the grid and numbering produced by this      \n'...
'  module as a color image, on top of the original image. You can then save \n'...
'  this image using the SaveImages module or use the ColorToGray module to  \n'...
'  separate out the color of interest to combine with other images as       \n'...
'  desired.                                                                 \n'...
'                                                                           \n'...
'  See also IdentifyObjectsInGrid, DisplayGridInfo.                         \n'...
]);

ToolHelp{17} = DefineGridHelp;

DifferentiateStainsHelp = sprintf([...
'  Help for the Differentiate Stains module                                     \n'...
'  Category: Image Processing                                                   \n'...
'                                                                               \n'...
'  SHORT DESCRIPTION:                                                           \n'...
'  Outputs two intensity images for each of two stains                          \n'...
'  *****************************************************************************\n'...
'                                                                               \n'...
'  This module produces two intensity images representing the amount of         \n'...
'  each of two different stains minus the background staining. It models        \n'...
'  the intensity for each color X as:                                           \n'...
'                                                                               \n'...
'  (1 - S1(x)*Q1 - S2(x)*Q2) = I(x)                                             \n'...
'                                                                               \n'...
'  where x is the red, green and blue channel                                   \n'...
'        S1(x) is related to the absorbance of stain 1 for color x              \n'...
'        Q1 is the quantity of stain 1 at the pixel                             \n'...
'  and similarly for the second stain.                                          \n'...
'                                                                               \n'...
'  The module asks the user to pick two cells stained with each of the          \n'...
'  two stains (or one cell with one stain and the other with both stains)       \n'...
'  and a point that represents the background staining. The colors of these     \n'...
'  three points give the color values used to determine intensities.            \n'...
'                                                                               \n'...
'  There are two modes of color differentiation, cooperative and competitive.   \n'...
'  Cooperative:                                                                 \n'...
'  In cooperative mode, the intensity of the image for one stain is             \n'...
'  decreased by the amount that the color is like the other stain and vice-     \n'...
'  versa. A particular pixel can have quantities of both stains.                \n'...
'                                                                               \n'...
'  Competitive:                                                                 \n'...
'  In competitive mode, the module computes a vector in colorspace between      \n'...
'  the colors of stains 1 and 2, finds background values for the two stains     \n'...
'  and then for each pixel, computes the magnitude of the pixel''''s color         \n'...
'  in the direction of the vector, subtracting the background value             \n'...
'  for the stain to normalize. The mode is competitive in that the measured     \n'...
'  amount of stain # 1 has the opposite sign (before subtracting background)    \n'...
'  from stain # 2 and a pixel is generally either assigned stain # 1''''s or       \n'...
'  stain # 2''''s color.                                                           \n'...
'                                                                               \n'...
'  CellProfiler is distributed under the GNU General Public License.            \n'...
'  See the accompanying file LICENSE for details.                               \n'...
'                                                                               \n'...
'  Developed by the Whitehead Institute for Biomedical Research.                \n'...
'  Copyright 2003,2004,2005.                                                    \n'...
'                                                                               \n'...
'  Please see the AUTHORS file for credits.                                     \n'...
'                                                                               \n'...
'  Website: http://www.cellprofiler.org                                         \n'...
'                                                                               \n'...
'  $Revision: 6022 $                                                            \n'...
]);

ToolHelp{18} = DifferentiateStainsHelp;

DisplayDataOnImageHelp = sprintf([...
'  Help for the Display Data on Image module:                               \n'...
'  Category: Other                                                          \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Produces an image with measured data on top of identified objects.       \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  The resulting images with data on top can be saved using the Save Images \n'...
'  module.                                                                  \n'...
'                                                                           \n'...
'  Feature Number:                                                          \n'...
'  The feature number specifies which feature from the Measure module will  \n'...
'  be used for display. See each Measure module''''s help for the numbered     \n'...
'  list of the features measured by that module.                            \n'...
'                                                                           \n'...
'  See also MeasureObjectAreaShape, MeasureImageAreaOccupied,               \n'...
'  MeasureObjectIntensity, MeasureImageIntensity, MeasureTexture,           \n'...
'  MeasureCorrelation, MeasureObjectNeighbors, and CalculateRatios modules. \n'...
]);

ToolHelp{19} = DisplayDataOnImageHelp;

DisplayGridInfoHelp = sprintf([...
'  Help for the Display Grid Information module:                            \n'...
'  Category: Other                                                          \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Displays text information on grid (i.e. gene names).                     \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module will display text information in a grid pattern. It requires \n'...
'  that you define a grid earlier in the pipeline using the DefineGrid      \n'...
'  module and also load text information using the LoadText module. This    \n'...
'  module allows you to load multiple sets of text data. The different sets \n'...
'  can be displayed in different colors. The text information must have the \n'...
'  same number of entries as there are grid locations (grid squares).       \n'...
'                                                                           \n'...
'  See also DefineGrid and LoadText.                                        \n'...
]);

ToolHelp{20} = DisplayGridInfoHelp;

DisplayHistogramHelp = sprintf([...
'  Help for the Display Histogram module:                                   \n'...
'  Category: Other                                                          \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Produces a histogram of measurements.                                    \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  The resulting histograms can be saved using the Save Images module.      \n'...
'                                                                           \n'...
'  Feature Number:                                                          \n'...
'  The feature number specifies which feature from the Measure module will  \n'...
'  be used for the histogram. See each Measure module''''s help for the        \n'...
'  numbered list of the features measured by that module.                   \n'...
'                                                                           \n'...
'  Frequency counts:                                                        \n'...
'  Frequency counts refers to the threshold for the leftmost and rightmost  \n'...
'  bins. The minimum value is the threshold at which any measurements less  \n'...
'  than this value will be combined into the leftmost bin. The maximum value\n'...
'  is the threshold at which any measurements greater than or equal to this \n'...
'  value will be combined into the rightmosot bin.                          \n'...
'                                                                           \n'...
'  Absolute vs. Percentage                                                  \n'...
'  Choose "Numbers" if you want the histogram bins to contain the actual    \n'...
'  numbers of objects in the bin. Choose "Percents" if you want the         \n'...
'  histogram bins to contain the percentage of objects in the bin.          \n'...
'                                                                           \n'...
'  See also DisplayImageHistogram, MeasureObjectAreaShape,                  \n'...
'  MeasureObjectIntensity, MeasureTexture, MeasureCorrelation,              \n'...
'  MeasureObjectNeighbors, CalculateRatios.                                 \n'...
]);

ToolHelp{21} = DisplayHistogramHelp;

DisplayImageHistogramHelp = sprintf([...
'  Help for the Display Image Histogram module:                             \n'...
'  Category: Other                                                          \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Produces a histogram of the intensity of pixels within an image.         \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module creates a histogram that shows the pixel intensity of the    \n'...
'  input image. The histogram can then be saved using the SaveImages module.\n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  How many histograms bins would you like to use?                          \n'...
'  Choose how many bins to use (i.e. in how many sets do you want the data  \n'...
'  distributed).                                                            \n'...
'                                                                           \n'...
'  Frequency counts:                                                        \n'...
'  Frequency counts refers to the threshold for the leftmost and rightmost  \n'...
'  bins. The minimum value is the threshold at which any measurements less  \n'...
'  than this value will be combined into the leftmost bin. The maximum value\n'...
'  is the threshold at which any measurements greater than or equal to this \n'...
'  value will be combined into the rightmosot bin.                          \n'...
'                                                                           \n'...
'  See also DisplayHistogram, MeasureObjectAreaShape,                       \n'...
'  MeasureObjectIntensity, MeasureTexture, MeasureCorrelation,              \n'...
'  MeasureObjectNeighbors, and CalculateRatios modules.                     \n'...
]);

ToolHelp{22} = DisplayImageHistogramHelp;

DisplayMeasurementHelp = sprintf([...
'  Help for the Display Measurement module:                                 \n'...
'  Category: Other                                                          \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Plots measured data in several formats.                                  \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  The DisplayMeasurement module allows data generated from the previous    \n'...
'  modules to be displayed on a plot.  In the Settings, the type of the plot\n'...
'  can be specified.  The data can be displayed in a bar, line, or scatter  \n'...
'  plot.  The user must choose the category of the data set to plot or, the \n'...
'  user may choose to plot a ratio of two data sets.  The scatterplot       \n'...
'  requires additional information about the second set of measurements     \n'...
'  used.                                                                    \n'...
'                                                                           \n'...
'  The resulting plots can be saved using the Save Images module.           \n'...
'                                                                           \n'...
'  Feature Number:                                                          \n'...
'  The feature number specifies which feature from the Measure module will  \n'...
'  be used for plotting. See each Measure module''''s help for the numbered    \n'...
'  list of the features measured by that module.                            \n'...
'                                                                           \n'...
'  See also MeasureObjectAreaShape, MeasureObjectIntensity, MeasureTexture, \n'...
'  MeasureCorrelation, MeasureObjectNeighbors, CalculateRatios.             \n'...
]);

ToolHelp{23} = DisplayMeasurementHelp;

EditObjectsManuallyHelp = sprintf([...
'  Help for the Edit Objects Manually module:                                   \n'...
'  Category: Object Processing                                                  \n'...
'                                                                               \n'...
'  SHORT DESCRIPTION:                                                           \n'...
'  User interface for removing objects manually from an image                   \n'...
'  *************************************************************************    \n'...
'                                                                               \n'...
'  This module allows you to remove objects through a user interface. The       \n'...
'  module displays three images: the objects as originally segmented,           \n'...
'  the objects that have not been removed and the objects that have been        \n'...
'  removed.                                                                     \n'...
'  If you click on an object in the "not removed" image, it moves to the        \n'...
'  "removed" image and will be removed. If you click on an object in the        \n'...
'  "removed" image, it moves to the "not removed" image and will not be         \n'...
'  removed. If you click on an object in the original image, it will            \n'...
'  toggle its "removed" state.                                                  \n'...
'                                                                               \n'...
'  The pipeline pauses once per processed image when it reaches this module.    \n'...
'  You have to press the continue button to accept the selected objects         \n'...
'  and continue the pipeline.                                                   \n'...
'                                                                               \n'...
'  See also FilterByObjectMeasurement, Exclude, OverlayOutlines, ConvertToImage.\n'...
]);

ToolHelp{24} = EditObjectsManuallyHelp;

ExcludeHelp = sprintf([...
'  Help for the Exclude Objects module:                                     \n'...
'  Category: Object Processing                                              \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Removes objects outside of specified region.                             \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This image analysis module allows you to delete the objects and portions \n'...
'  of objects that are outside of a region you specify (e.g. nuclei outside \n'...
'  of a tissue region).  The objects and the region should both result from \n'...
'  any Identify module (Primary, Secondary, or Tertiary).                   \n'...
'                                                                           \n'...
'  Retain or renumber:                                                      \n'...
'  Retaining objects'''' original numbers might be important if you intend to  \n'...
'  correlate measurements made on the remaining objects with measurements   \n'...
'  made on the original objects. Note that retaining original numbers will  \n'...
'  produce gaps in the numbered list of objects (since some objects no      \n'...
'  longer exist). This may cause errors with certain exporting tools or with\n'...
'  downstream modules that expect object numbers to not have gaps.          \n'...
'  Renumbering, on the other hand, makes the output file more compact, the  \n'...
'  processing quicker, and is also guaranteed to work with exporting and    \n'...
'  data analysis tools.                                                     \n'...
'                                                                           \n'...
'  Special note on saving images: Using the settings in this module, object \n'...
'  outlines can be passed along to the module Overlay Outlines and then     \n'...
'  saved with the Save Images module. Objects themselves can be passed along\n'...
'  to the object processing module Convert To Image and then saved with the \n'...
'  Save Images module. This module produces several additional types of     \n'...
'  objects with names that are automatically passed along with the following\n'...
'  naming structure: (1) The unedited segmented image, which includes       \n'...
'  objects on the edge of the image and objects that are outside the size   \n'...
'  range, can be saved using the name: UneditedSegmented + whatever you     \n'...
'  called the objects (e.g. UneditedSegmentedNuclei). (2) The segmented     \n'...
'  image which excludes objects smaller than your selected size range can be\n'...
'  saved using the name: SmallRemovedSegmented + whatever you called the    \n'...
'  objects (e.g. SmallRemovedSegmented Nuclei).                             \n'...
'                                                                           \n'...
'  Another note on filtering objects: The Exclude module will not exclude   \n'...
'  whole objects that are overlapping with the specified region. To handle  \n'...
'  this, you can convert the region to a binary image, then use             \n'...
'  MeasureObjectIntensity on the objects but based on the binary image. This\n'...
'  will essentially count the number of region pixels within each object,   \n'...
'  which will be non-zero if there is any overlap of the object with the    \n'...
'  region of interest. Using FilterByObjectMeasurement based on a fraction  \n'...
'  of the integrated intensity can then be applied to exclude overlapping   \n'...
'  objects. We will probably include this procedure as an option in the     \n'...
'  next release.                                                            \n'...
'                                                                           \n'...
'  See also FilterByObjectMeasurement, OverlayOutlines, ConvertToImage.     \n'...
]);

ToolHelp{25} = ExcludeHelp;

ExpandOrShrinkHelp = sprintf([...
'  Help for the Expand Or Shrink module:                                    \n'...
'  Category: Object Processing                                              \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Expands or shrinks identified objects by a defined distance.             \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  The module expands or shrinks objects by adding or removing border       \n'...
'  pixels. The user can specify a certain number of border pixels to be     \n'...
'  added or removed, or use ''''Inf'''' to expand objects until they are almost   \n'...
'  touching or to shrink objects down to a point. Objects are never lost    \n'...
'  using this module (shrinking stops when an object becomes a single       \n'...
'  pixel). An experimental feature is able to allow shrinking with secondary\n'...
'  objects - it adds partial dividing lines between objects which are       \n'...
'  touching before the shrinking step so it is not perfect. It would be nice\n'...
'  to improve this code to draw complete dividing lines, but we have only   \n'...
'  implemented a partial fix.                                               \n'...
'                                                                           \n'...
'  Special note on saving images: Using the settings in this module, object \n'...
'  outlines can be passed along to the module OverlayOutlines and then saved\n'...
'  with the SaveImages module. Objects themselves can be passed along to the\n'...
'  object processing module ConvertToImage and then saved with the          \n'...
'  SaveImages module.                                                       \n'...
'                                                                           \n'...
'  This module produces several additional types of objects with names      \n'...
'  that are automatically passed along with the following naming            \n'...
'  structure: (1) The unedited segmented image, which includes objects      \n'...
'  on the edge of the image and objects that are outside the size           \n'...
'  range, can be saved using the name: UneditedSegmented + whatever you     \n'...
'  called the objects (e.g. UneditedSegmentedNuclei). (2) The segmented     \n'...
'  image which excludes objects smaller than your selected size range       \n'...
'  can be saved using the name: SmallRemovedSegmented + whatever you        \n'...
'  called the objects (e.g. SmallRemovedSegmented Nuclei).                  \n'...
'                                                                           \n'...
'  See also IdentifyPrimAutomatic, IdentifyPrimManual, IdentifySecondary.   \n'...
]);

ToolHelp{26} = ExpandOrShrinkHelp;

ExportToDatabaseHelp = sprintf([...
'  Help for the Export To Database module:                                          \n'...
'  Category: File Processing                                                        \n'...
'                                                                                   \n'...
'  SHORT DESCRIPTION:                                                               \n'...
'  Exports data in database readable format, including an importing file            \n'...
'  with column names and a CellProfiler Analyst properties file, if desired.        \n'...
'  *************************************************************************        \n'...
'                                                                                   \n'...
'  This module exports measurements to a SQL compatible format. It creates          \n'...
'  MySQL or Oracle scripts and associated data files which will create a            \n'...
'  database and import the data into it and gives you the option of creating        \n'...
'  a properties file for use with CellProfiler Analyst.                             \n'...
'                                                                                   \n'...
'  This module must be run at the end of a pipeline, or second to last if           \n'...
'  you are using the CreateBatchFiles module. If you forget this module, you        \n'...
'  can also run the ExportDatabase data tool after processing is complete;          \n'...
'  its functionality is the same.                                                   \n'...
'                                                                                   \n'...
'  The database is set up with two primary tables. These tables are the             \n'...
'  Per_Image table and the Per_Object table (which may have a prefix if you         \n'...
'  specify). The Per_Image table consists of all the Image measurements and         \n'...
'  the Mean and Standard Deviation of the object measurements. There is one         \n'...
'  Per_Image row for every image. The Per_Object table contains all the             \n'...
'  measurements for individual objects. There is one row of object                  \n'...
'  measurements per object identified. The two tables are connected with the        \n'...
'  primary key column ImageNumber. The Per_Object table has another primary         \n'...
'  key called ObjectNumber, which is unique per image.                              \n'...
'                                                                                   \n'...
'  The Oracle database has an extra table called Column_Names. This table is        \n'...
'  necessary because Oracle has the unfortunate limitation of not being able        \n'...
'  to handle column names longer than 32 characters. Since we must                  \n'...
'  distinguish many different objects and measurements, our column names are        \n'...
'  very long. This required us to create a separate table which contains a          \n'...
'  short name and corresponding long name. The short name is simply "col"           \n'...
'  with an attached number, such as "col1" "col2" "col3" etc. The short name        \n'...
'  has a corresponding long name such as "Nuclei_AreaShape_Area". Each of           \n'...
'  the Per_Image and Per_Object columnnames are loaded as their "short name"        \n'...
'  but the long name can be determined from the Column_Names table.                 \n'...
'                                                                                   \n'...
'  Settings:                                                                        \n'...
'                                                                                   \n'...
'  Database Type:                                                                   \n'...
'  You can choose to export MySQL or Oracle database scripts. The exported          \n'...
'  data is the same for each type, but the setup files for MySQL and Oracle         \n'...
'  are different.                                                                   \n'...
'                                                                                   \n'...
'  Database Name:                                                                   \n'...
'    In MySQL, you can enter the name of a database to create or the name of        \n'...
'  an existing database. When using the script, if the database already             \n'...
'  exists, the database creation step will be skipped so the existing               \n'...
'  database will not be overwritten but new tables will be added. Do be             \n'...
'  careful, however, in choosing the Table Prefix. If you use an existing           \n'...
'  table name, you might unintentionally overwrite the data in that table.          \n'...
'    In Oracle, when you log in you must choose a database to work with, so         \n'...
'  there is no need to specify the database name in this module. This also          \n'...
'  means it is impossible to create/destroy a database with these                   \n'...
'  CellProfiler scripts.                                                            \n'...
'                                                                                   \n'...
'  Table Prefix:                                                                    \n'...
'  Here you can choose what to append to the table names Per_Image and              \n'...
'  Per_Object. If you choose "Do not use", no prefix will be appended. If you choose\n'...
'  a prefix, the tables will become PREFIX_Per_Image and PREFIX_Per_Object          \n'...
'  in the database. If you are using the same database for all of your              \n'...
'  experiments, the table prefix is necessary and will be the only way to           \n'...
'  distinguish different experiments. If you are creating a new database for        \n'...
'  every experiment, then it may be easier to keep the generic Per_Image and        \n'...
'  Per_Object table names. Be careful when choosing the table prefix, since         \n'...
'  you may unintentionally overwrite existing tables.                               \n'...
'                                                                                   \n'...
'  SQL File Prefix: All the CSV files will start with this prefix.                  \n'...
'                                                                                   \n'...
'  Create a CellProfiler Analyst properties file: Generate a template               \n'...
'  properties for using your new database in CellProfiler Analyst (a data           \n'...
'  exploration tool which can also be downloaded from                               \n'...
'  http://www.cellprofiler.org/)                                                    \n'...
'                                                                                   \n'...
'  If creating a properties file for use with CellProfiler Analyst (CPA):           \n'...
'  The module will attempt to fill in as many as the entries as possible            \n'...
'  based on the current handles structure. However, entries such as the             \n'...
'  server name, username and password are omitted. Hence, opening the               \n'...
'  properties file in CPA will produce an error since it won''''t be able to           \n'...
'  connect to the server. However, you can still edit the file in CPA and           \n'...
'  then fill in the required information.                                           \n'...
'                                                                                   \n'...
'  ********************* How To Import MySQL *******************************        \n'...
'  Step 1: Log onto the server where the database will be located.                  \n'...
'                                                                                   \n'...
'  Step 2: From within a terminal logged into that server, navigate to folder       \n'...
'  where the CSV output files and the SETUP script is located.                      \n'...
'                                                                                   \n'...
'  Step 3: Type the following within the terminal to log into MySQL on the          \n'...
'  server where the database will be located:                                       \n'...
'     mysql -uUsername -pPassword -hHost                                            \n'...
'                                                                                   \n'...
'  Step 4: Type the following within the terminal to run SETUP script:              \n'...
'       \\. DefaultDB_SETUP.SQL                                                      \n'...
'                                                                                   \n'...
'  The SETUP file will do everything necessary to load the database.                \n'...
'                                                                                   \n'...
'  ********************* How To Import Oracle ******************************        \n'...
'  Step 1: Using a terminal, navigate to folder where the CSV output files          \n'...
'  and the SETUP script is located.                                                 \n'...
'                                                                                   \n'...
'  Step 2: Log into SQLPlus: "sqlplus USERNAME/PASSWORD@DATABASESCRIPT"             \n'...
'  You may need to ask your IT department the name of DATABASESCRIPT.               \n'...
'                                                                                   \n'...
'  Step 3: Run SETUP script: "@DefaultDB_SETUP.SQL"                                 \n'...
'                                                                                   \n'...
'  Step 4: Exit SQLPlus: "exit"                                                     \n'...
'                                                                                   \n'...
'  Step 5: Load data files (for columnames, images, and objects):                   \n'...
'                                                                                   \n'...
'  sqlldr USERNAME/PASSWORD@DATABASESCRIPT control=DefaultDB_LOADCOLUMNS.CTL        \n'...
'  sqlldr USERNAME/PASSWORD@DATABASESCRIPT control=DefaultDB_LOADIMAGE.CTL          \n'...
'  sqlldr USERNAME/PASSWORD@DATABASESCRIPT control=DefaultDB_LOADOBJECT.CTL         \n'...
'                                                                                   \n'...
'  Step 6: Log into SQLPlus: "sqlplus USERNAME/PASSWORD@DATABASESCRIPT"             \n'...
'                                                                                   \n'...
'  Step 7: Run FINISH script: "@DefaultDB_FINISH.SQL"                               \n'...
'                                                                                   \n'...
'  Technical note: This module calls the CPconvertsql function to do the            \n'...
'  actual exporting, which is same function as called by the ExportDatabase         \n'...
'  data tool.                                                                       \n'...
'                                                                                   \n'...
'  See also: CreateBatchFiles, ExportDatabase data tool.                            \n'...
]);

ToolHelp{27} = ExportToDatabaseHelp;

ExportToExcelHelp = sprintf([...
'  Help for the ExportToExcel module:                                       \n'...
'  Category: File Processing                                                \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Exports measurements into a tab-delimited text file which can be opened  \n'...
'  in Excel or other spreadsheet programs.                                  \n'...
'  *************************************************************************\n'...
'  Note: this module is beta-version and has not been thoroughly checked.   \n'...
'                                                                           \n'...
'  The data will be converted to a tab-delimited text file which can be read\n'...
'  by Excel, another spreadsheet program, or a text editor. The file is     \n'...
'  stored in the default output folder.                                     \n'...
'                                                                           \n'...
'  This module performs the same function as the data tool, Export Data.    \n'...
'  Please refer to the help for ExportData for more details.                \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  Do you want to create the input image subdirectory structure in the      \n'...
'  output directory?                                                        \n'...
'  If the input images are located in subdirectories (such that you used    \n'...
'  "Analyze all subfolders within the selected folder" in LoadImages), you  \n'...
'  can re-create the subdirectory structure in the default output directory.\n'...
]);

ToolHelp{28} = ExportToExcelHelp;

FileNameMetadataHelp = sprintf([...
'  Help for the File Name Metadata module:                                  \n'...
'  Category: Measurement                                                    \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Captures metadata such as plate name, well column and well row from      \n'...
'  the filename of an image file.                                           \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module uses regular expressions to capture metadata such as         \n'...
'  plate name, and well position from an image''''s file name. The captured    \n'...
'  metadata is stored in the image''''s measurements under the "Metadata"      \n'...
'  category.                                                                \n'...
'                                                                           \n'...
'  Variables:                                                               \n'...
'  What did you call the image?                                             \n'...
'      This is the name entered in LoadImages. This module will use the     \n'...
'      file name of this image as the source of its metadata.               \n'...
'                                                                           \n'...
'  Enter the regular expression to use to capture the fields:               \n'...
'      The regular expression syntax can be used to name different parts    \n'...
'      of your expression. The syntax for this is (?<FIELDNAME>expr) to     \n'...
'      extract whatever matches "expr" and assign it to the measurement,    \n'...
'      FIELDNAME for the image.                                             \n'...
'      For instance, a researcher uses plate names composed of two          \n'...
'      capital letters followed by five numbers, then appends the           \n'...
'      well name to this, separated  by an underbar: "TE12345_A05.tif"      \n'...
'      The following regular expression will capture the plate, well        \n'...
'      row and well column in the fields, "Plate","WellRow" and "WellCol":  \n'...
'          ^(?<Plate>[A-Z]{2}[0-9]{5})_(?<WellRow>[A-H])(?<WellCol>[0-9]+)  \n'...
'          1    2        3      4     5     6       7        8        9     \n'...
'   1. "^"           Only start at beginning of the file name               \n'...
'   2. "(?<Plate>"   Name the captured field, "Plate"                       \n'...
'   3. "[A-Z]{2}     First, capture exactly two letters between A and Z     \n'...
'   4. "[0-9]{5}     Also capture exactly five digits                       \n'...
'   5. "_"           Discard the underbar separating plate from well        \n'...
'   6. "(?<WellRow>" Name the captured field, "WellRow"                     \n'...
'   7. "[A-H]"       Capture exactly one letter between A and H             \n'...
'   8. "(?<WellCol>" Name the captured field, "WellCol"                     \n'...
'   9. "[0-9]+"      Capture as many digits as follow                       \n'...
'                                                                           \n'...
'  See also LoadImages module for regular expression format                 \n'...
]);

ToolHelp{29} = FileNameMetadataHelp;

FilterByObjectMeasurementHelp = sprintf([...
'  Help for the Filter by Object Measurement module:                        \n'...
'  Category: Object Processing                                              \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Eliminates objects based on their measurements (e.g. area, shape,        \n'...
'  texture, intensity).                                                     \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module removes objects based on their measurements produced by      \n'...
'  another module (e.g. MeasureObjectAreaShape, MeasureObjectIntensity,     \n'...
'  MeasureTexture). All objects outside of the specified parameters will be \n'...
'  discarded.                                                               \n'...
'                                                                           \n'...
'  Feature Number or Name:                                                  \n'...
'  The feature number specifies which feature from the Measure module will  \n'...
'  be used for filtering. See each Measure module''''s help for the numbered   \n'...
'  list of the features measured by that module. Additionally, you can      \n'...
'  specify the Feature Name explicitly, which is useful in special cases    \n'...
'  such as filtering by Location, which is created by a few modules, and    \n'...
'  has a Feature Name of either ''''X'''' or ''''Y''''.                                 \n'...
'                                                                           \n'...
'  Special note on saving images: Using the settings in this module, object \n'...
'  outlines can be passed along to the module OverlayOutlines and then saved\n'...
'  with the SaveImages module. Objects themselves can be passed along to the\n'...
'  object processing module ConvertToImage and then saved with the          \n'...
'  SaveImages module. This module produces several additional types of      \n'...
'  objects with names that are automatically passed along with the following\n'...
'  naming structure: (1) The unedited segmented image, which includes       \n'...
'  objects on the edge of the image and objects that are outside the size   \n'...
'  range, can be saved using the name: UneditedSegmented + whatever you     \n'...
'  called the objects (e.g. UneditedSegmentedNuclei). (2) The segmented     \n'...
'  image which excludes objects smaller than your selected size range can be\n'...
'  saved using the name: SmallRemovedSegmented + whatever you called the    \n'...
'  objects (e.g. SmallRemovedSegmented Nuclei).                             \n'...
'                                                                           \n'...
'  See also MeasureObjectAreaShape, MeasureObjectIntensity, MeasureTexture, \n'...
'  MeasureCorrelation, CalculateRatios, and MeasureObjectNeighbors modules. \n'...
]);

ToolHelp{30} = FilterByObjectMeasurementHelp;

FindEdgesHelp = sprintf([...
'  Help for the Find Edges module:                                                                                       \n'...
'  Category: Image Processing                                                                                            \n'...
'                                                                                                                        \n'...
'  SHORT DESCRIPTION:                                                                                                    \n'...
'  Identifies edges in an image, which can be used as the basis for object                                               \n'...
'  identification or other downstream image processing.                                                                  \n'...
'  *************************************************************************                                             \n'...
'                                                                                                                        \n'...
'  This module finds the edges of objects in a grayscale image, usually                                                  \n'...
'  producing a binary (black and white) image where the edges are white and                                              \n'...
'  the background is black. The ratio method can optionally produce a                                                    \n'...
'  grayscale image where the strongest edges are brighter and the smoothest                                              \n'...
'  parts of the image are darker. It works best when the objects of interest                                             \n'...
'  are black and the background is white.                                                                                \n'...
'                                                                                                                        \n'...
'  Settings:                                                                                                             \n'...
'                                                                                                                        \n'...
'  Threshold: Enter the desired threshold or have CellProfiler calculate one                                             \n'...
'  automatically. The methods use different processes to calculate the                                                   \n'...
'  automatic threshold.                                                                                                  \n'...
'                                                                                                                        \n'...
'  Threshold Adjustment Factor: This value will be multiplied by the                                                     \n'...
'  threshold (the numerical value you entered, or the automatically                                                      \n'...
'  calculated one if desired) used for edge detection.                                                                   \n'...
'                                                                                                                        \n'...
'  Method: There are several methods that can be used to identify edges:                                                 \n'...
'    Ratio Method - This method first applies two smoothing filters to the                                               \n'...
'                   image (sum of squares and square of sums), and then                                                  \n'...
'                   takes the ratio of the two resulting images to determine                                             \n'...
'                   the edges. The filter size is then very important in                                                 \n'...
'                   this method. The larger the filter size, the thicker the                                             \n'...
'                   edges will be. The recommended size is 8 pixels, or                                                  \n'...
'                   roughly half the width of the objects you wish to edge.                                              \n'...
'                   This method is taken from CJ Cronin, JE Mendel, S                                                    \n'...
'                   Mukhtar, Y-M Kim, RC Stirbl, J Bruck and PW Sternberg,                                               \n'...
'                   An automated system for measuring parameters of nematode                                             \n'...
'                   sinusoidal movement, BMC Genetics, 6:5, 2005 available                                               \n'...
'                   here: http://www.biomedcentral.com/1471-2156/6/5                                                     \n'...
'    Sobel Method - finds edges using the Sobel approximation to the                                                     \n'...
'                   derivative. It returns edges at those points where the                                               \n'...
'                   gradient of the image is maximum.                                                                    \n'...
'    Prewitt Method - finds edges using the Prewitt approximation to the                                                 \n'...
'                   derivative. It returns edges at those points where the                                               \n'...
'                   gradient of the image is maximum.                                                                    \n'...
'    Roberts Method - finds edges using the Roberts approximation to the                                                 \n'...
'                   derivative. It returns edges at those points where the                                               \n'...
'                   gradient of the image is maximum.                                                                    \n'...
'    LoG Method -   This method first applies a Laplacian of Gaussian filter                                             \n'...
'                   to the image and then finds zero crossings.                                                          \n'...
'    Canny Method - The Canny method finds edges by looking for local maxima                                             \n'...
'                   of the gradient of the image. The gradient is calculated                                             \n'...
'                   using the derivative of a Gaussian filter. The method                                                \n'...
'                   uses two thresholds, to detect strong and weak edges,                                                \n'...
'                   and includes the weak edges in the output only if they                                               \n'...
'                   are connected to strong edges. This method is therefore                                              \n'...
'                   less likely than the others to be fooled by noise, and                                               \n'...
'                   more likely to detect true weak edges.                                                               \n'...
'                                                                                                                        \n'...
'  Size of smoothing filter (for Ratio method only): A square of NxN will be used for the filter, where N is the size you\n'...
'  specify here. See method description above for further information.                                                   \n'...
'                                                                                                                        \n'...
'  Binary or Grayscale (for Ratio method only): The image produced by this                                               \n'...
'  module can be grayscale (varying shaed of gray) or binary (black and                                                  \n'...
'  white). The choice depends on what you intend to use the resulting image                                              \n'...
'  for.                                                                                                                  \n'...
'                                                                                                                        \n'...
'  Edge Thinning (for Sobel and Roberts methods): If thinning is selected,                                               \n'...
'  edges found will be thinned out into a line (if possible). Specifying the                                             \n'...
'  ''''nothinning'''' option can speed up the operation of the algorithm by                                                    \n'...
'  skipping the additional edge thinning stage.                                                                          \n'...
'                                                                                                                        \n'...
'  Direction (for Sobel and Prewitt methods): It gives you the option of                                                 \n'...
'  identifying all edges, or just those that are predominantly horizontal or                                             \n'...
'  vertical.                                                                                                             \n'...
'                                                                                                                        \n'...
'  Sigma (LoG and Canny): Standard deviation of the gaussian filter                                                      \n'...
]);

ToolHelp{31} = FindEdgesHelp;

FlagImageForQCHelp = sprintf([...
'  Help for the Flag Image for QC (quality control) module:                                      \n'...
'  Category: Image Processing                                                                    \n'...
'                                                                                                \n'...
'  SHORT DESCRIPTION:                                                                            \n'...
'  This module allows you to flag an image if it fails some quality control                      \n'...
'  measurement you specify.                                                                      \n'...
'  *************************************************************************                     \n'...
'                                                                                                \n'...
'  This module adds a measurement in the handles structure under                                 \n'...
'  ''''Experiment''''.  The measurement is a flag that a user can assign if the                        \n'...
'  image fails some quality control measurement he or she specifies.  The                        \n'...
'  vale of the measurement is ''''1'''' if the image has failed QC, and ''''0'''' if it                      \n'...
'  has passed. The flag can be used in post-processing to filter out images                      \n'...
'  the user does not want to analyze in CP Analyst, for example, or in                           \n'...
'  creating an illumination function (currently, this is only possible using LoadImageDirectory).\n'...
'                                                                                                \n'...
'  To flag an image by more than one measurement, you can use multiple                           \n'...
'  ''''FlagImageForQC'''' modules and select, ''''Append an existing flag'''' and enter                      \n'...
'  the name of the flag you want to append.                                                      \n'...
'                                                                                                \n'...
'  By default, the measurements you are using to flag an image are                               \n'...
'  measurements from that image.                                                                 \n'...
'                                                                                                \n'...
'  This module requires the measurements of all prior modules & cycles, so                       \n'...
'  it must be the last in the pipeline, and it will not work if run on a                         \n'...
'  cluster of computers, unless you run all cycles as one batch.                                 \n'...
'                                                                                                \n'...
'  See also                                                                                      \n'...
'                                                                                                \n'...
'  CellProfiler is distributed under the GNU General Public License.                             \n'...
'  See the accompanying file LICENSE for details.                                                \n'...
'                                                                                                \n'...
'  Developed by the Whitehead Institute for Biomedical Research.                                 \n'...
'  Copyright 2003,2004,2005.                                                                     \n'...
'                                                                                                \n'...
'  Please see the AUTHORS file for credits.                                                      \n'...
'                                                                                                \n'...
'  Website: http://www.cellprofiler.org                                                          \n'...
'                                                                                                \n'...
'  $Revision: 6876 $                                                                             \n'...
]);

ToolHelp{32} = FlagImageForQCHelp;

FlipAndRotateHelp = sprintf([...
'  Help for the FlipAndRotate module:                                           \n'...
'  Category: Image Processing                                                   \n'...
'                                                                               \n'...
'  SHORT DESCRIPTION:                                                           \n'...
'  Flips (mirror image) and rotates an image.                                   \n'...
'  *****************************************************************************\n'...
'                                                                               \n'...
'  Features measured:   Feature Number:                                         \n'...
'  Rotation             |      1                                                \n'...
'  (this is the angle of rotation)                                              \n'...
'                                                                               \n'...
'  Settings:                                                                    \n'...
'                                                                               \n'...
'  Rotation method:                                                             \n'...
'  *Coordinates - you can provide the X,Y pixel locations of two                \n'...
'  points in the image which should be aligned horizontally or vertically.      \n'...
'  *Mouse - you can click on points in the image which should be aligned        \n'...
'  horizontally or vertically.                                                  \n'...
'  *Angle - you can provide the numerical angle by which the image should be    \n'...
'  rotated.                                                                     \n'...
'                                                                               \n'...
'  Would you like to crop away the rotated edges?                               \n'...
'  When an image is rotated, there will be black space at the corners/edges     \n'...
'  unless you choose to crop away the incomplete rows and columns of the        \n'...
'  image. This cropping will produce an image that is not the exact same        \n'...
'  size as the original, which may affect downstream modules.                   \n'...
'                                                                               \n'...
'  See also Crop.                                                               \n'...
'                                                                               \n'...
'  CellProfiler is distributed under the GNU General Public License.            \n'...
'  See the accompanying file LICENSE for details.                               \n'...
'                                                                               \n'...
'  Developed by the Whitehead Institute for Biomedical Research.                \n'...
'  Copyright 2003,2004,2005.                                                    \n'...
'                                                                               \n'...
'  Please see the AUTHORS file for credits.                                     \n'...
'                                                                               \n'...
'  Website: http://www.cellprofiler.org                                         \n'...
'                                                                               \n'...
'  $Revision: 5942 $                                                            \n'...
]);

ToolHelp{33} = FlipAndRotateHelp;

GrayToColorHelp = sprintf([...
'  Help for the Gray To Color module:                                       \n'...
'  Category: Image Processing                                               \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Takes 1 to 4 images and assigns them to colors in a final red, green,    \n'...
'  blue (RGB) image. Each color''''s brightness can be adjusted independently. \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module takes up to four grayscale images as inputs, and produces    \n'...
'  either a new color (RGB) image which results from assigning each of the  \n'...
'  input images the colors red, green, and blue (RGB, for 3 color) or cyan, \n'...
'  yellow, magenta, and gray (CMYK, for 4 color) respectively.              \n'...
'  In addition, each color''''s intensity can be adjusted independently by     \n'...
'  using adjustment factors (see below).                                    \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  Choose the input images: You must select at least one image which you    \n'...
'  would like to use to create the color image. Also, all images must be the\n'...
'  same size, since they will combined pixel by pixel.                      \n'...
'                                                                           \n'...
'  Adjustment factors: Leaving the adjustment factors set to 1 will balance \n'...
'  all colors equally in the final image, and they will use the same range  \n'...
'  of intensities as each individual incoming image. Using factors less than\n'...
'  1 will decrease the intensity of that color in the final image, and      \n'...
'  values greater than 1 will increase it. Setting the adjustment factor    \n'...
'  to zero will cause that color to be entirely blank.                      \n'...
'                                                                           \n'...
'  See also ColorToGray.                                                    \n'...
]);

ToolHelp{34} = GrayToColorHelp;

GroupMovieFramesHelp = sprintf([...
'  Help for the GroupMovieFrames module:                                  \n'...
'  Category: File Processing                                              \n'...
'                                                                         \n'...
'  SHORT DESCRIPTION:                                                     \n'...
'                                                                         \n'...
'  GroupMovieFrames handle a movie to group movie frames to be processed  \n'...
'  within a cycle. The position of a frame within a group can be specified\n'...
'  with its ImageName to be used downstream.                              \n'...
'                                                                         \n'...
'  Each loaded movie frame will be treated as an individual image with its\n'...
'  own ImageName.                                                         \n'...
]);

ToolHelp{35} = GroupMovieFramesHelp;

IdentifyObjectsInGridHelp = sprintf([...
'  Help for the Identify Objects In Grid module:                             \n'...
'  Category: Object Processing                                               \n'...
'                                                                            \n'...
'  SHORT DESCRIPTION:                                                        \n'...
'  Identifies objects within each section of a grid that has been defined by \n'...
'  the DefineGrid module.                                                    \n'...
'  ************************************************************************* \n'...
'                                                                            \n'...
'  This module identifies objects that are in a grid pattern which allows    \n'...
'  you to measure the objects using measure modules. It requires that you    \n'...
'  create a grid in an earlier module using the DefineGrid module.           \n'...
'                                                                            \n'...
'  Settings:                                                                 \n'...
'                                                                            \n'...
'  For several of the automatic options, you will need to tell the module    \n'...
'  what you called previously identified objects. Typically, you roughly     \n'...
'  identify objects of interest in a previous Identify module, and the       \n'...
'  locations and/or shapes of these rough objects are refined in this        \n'...
'  module. Within this module, objects are re-numbered according to the grid \n'...
'  definitions rather than their original numbering from the original        \n'...
'  Identify module. For the Natural Shape option, if an object does not      \n'...
'  exist within a grid compartment, an object consisting of one single pixel \n'...
'  in the middle of the grid square will be created. Also, for the Natural   \n'...
'  Shape option, if a grid compartment contains two partial objects, they    \n'...
'  will be combined together as a single object.                             \n'...
'                                                                            \n'...
'  If placing the objects within the grid is impossible for some reason (the \n'...
'  grid compartments are too close together to fit the proper sized circles, \n'...
'  for example) the grid will fail and processing will be canceled unless    \n'...
'  you choose to re-use any previous grid or the first grid in the in the    \n'...
'  image cycle.                                                              \n'...
'                                                                            \n'...
'  Special note on saving images: Using the settings in this module, object  \n'...
'  outlines can be passed along to the module OverlayOutlines and then       \n'...
'  saved with the SaveImages module. Objects themselves can be passed along  \n'...
'  to the object processing module ConvertToImage and then saved with the    \n'...
'  SaveImages module. This module produces several additional types of       \n'...
'  objects with names that are automatically passed along with the following \n'...
'  naming structure: (1) The unedited segmented image, which includes        \n'...
'  objects on the edge of the image and objects that are outside the size    \n'...
'  range, can be saved using the name: UneditedSegmented + whatever you      \n'...
'  called the objects (e.g. UneditedSegmentedNuclei). (2) The segmented      \n'...
'  image which excludes objects smaller than your selected size range can be \n'...
'  saved using the name: SmallRemovedSegmented + whatever you called the     \n'...
'  objects (e.g. SmallRemovedSegmented Nuclei).                              \n'...
'                                                                            \n'...
'  See also DefineGrid.                                                      \n'...
]);

ToolHelp{36} = IdentifyObjectsInGridHelp;

IdentifyPrimAutomaticHelp = sprintf([...
'  Help for the Identify Primary Automatic module:                               \n'...
'  Category: Object Processing                                                   \n'...
'                                                                                \n'...
'  SHORT DESCRIPTION:                                                            \n'...
'  Identifies objects given only an image as input.                              \n'...
'  *************************************************************************     \n'...
'                                                                                \n'...
'  This module identifies primary objects (e.g. nuclei) in grayscale images      \n'...
'  that show bright objects on a dark background. The module has many            \n'...
'  options which vary in terms of speed and sophistication. The objects that     \n'...
'  are found are displayed with arbitrary colors - the colors do not mean        \n'...
'  anything but simply help you to tell various objects apart. You can           \n'...
'  change the colormap in File > Set Preferences.                                \n'...
'                                                                                \n'...
'  Requirements for the images to be fed into this module:                       \n'...
'  * If the objects are dark on a light background, they must first be           \n'...
'  inverted using the Invert Intensity module.                                   \n'...
'  * If you are working with color images, they must first be converted to       \n'...
'  grayscale using the Color To Gray module.                                     \n'...
'                                                                                \n'...
'  Overview of the strategy (''''Settings'''' below has more details):                 \n'...
'    Properly identifying primary objects (nuclei) that are well-dispersed,      \n'...
'  non-confluent, and bright relative to the background is straightforward       \n'...
'  by applying a simple threshold to the image. This is fast but usually         \n'...
'  fails when nuclei are touching. In CellProfiler, several automatic            \n'...
'  thresholding methods are available, including global and adaptive, using      \n'...
'  Otsu''''s (Otsu, 1979) and our own version of a Mixture of Gaussians             \n'...
'  algorithm (O. Friman, unpublished). For most biological images, at least      \n'...
'  some nuclei are touching, so CellProfiler contains a novel modular            \n'...
'  three-step strategy based on previously published algorithms (Malpica et      \n'...
'  al., 1997; Meyer and Beucher, 1990; Ortiz de Solorzano et al., 1999;          \n'...
'  Wahlby, 2003; Wahlby et al., 2004). Choosing different options for each       \n'...
'  of these three steps allows CellProfiler to flexibly analyze a variety of     \n'...
'  different cell types. Here are the three steps:                               \n'...
'    In step 1, CellProfiler determines whether an object is an individual       \n'...
'  nucleus or two or more clumped nuclei. This determination can be              \n'...
'  accomplished in two ways, depending on the cell type: When nuclei are         \n'...
'  bright in the middle and dimmer towards the edges (the most common case),     \n'...
'  identifying local maxima in the smoothed intensity image works well           \n'...
'  (Intensity option). When nuclei are quite round, identifying local maxima     \n'...
'  in the distance-transformed thresholded image (where each pixel gets a        \n'...
'  value equal to the distance to the nearest pixel below a certain              \n'...
'  threshold) works well (Shape option). For quick processing where cells        \n'...
'  are well-dispersed, you can choose to make no attempt to separate clumped     \n'...
'  objects.                                                                      \n'...
'    In step 2, the edges of nuclei are identified. For nuclei within the        \n'...
'  image that do not appear to touch, the edges are easily determined using      \n'...
'  thresholding. For nuclei that do appear to touch, there are two options       \n'...
'  for finding the edges of clumped nuclei. Where the dividing lines tend to     \n'...
'  be dimmer than the remainder of the nucleus (the most common case), the       \n'...
'  Intensity option works best (already identified nuclear markers are           \n'...
'  starting points for a watershed algorithm (Vincent and Soille, 1991)          \n'...
'  applied to the original image). When no dim dividing lines exist, the         \n'...
'  Distance option places the dividing line at a point between the two           \n'...
'  nuclei determined by their shape (the distance-transformed thresholded        \n'...
'  image is used for the watershed algorithm). In other words, the dividing      \n'...
'  line is usually placed where indentations occur along the edge of the         \n'...
'  clumped nuclei.                                                               \n'...
'    In step 3, some identified nuclei are discarded or merged together if       \n'...
'  the user chooses. Incomplete nuclei touching the border of the image can      \n'...
'  be discarded. Objects smaller than a user-specified size range, which are     \n'...
'  likely to be fragments of real nuclei, can be discarded. Alternately, any     \n'...
'  of these small objects that touch a valid nucleus can be merged together      \n'...
'  based on a set of heuristic rules; for example similarity in intensity        \n'...
'  and statistics of the two objects. A separate module,                         \n'...
'  FilterByObjectMeasurement, further refines the identified nuclei, if          \n'...
'  desired, by excluding objects that are a particular size, shape,              \n'...
'  intensity, or texture. This refining step could eventually be extended to     \n'...
'  include other quality-control filters, e.g. a second watershed on the         \n'...
'  distance transformed image to break up remaining clusters (Wahlby et al.,     \n'...
'  2004).                                                                        \n'...
'                                                                                \n'...
'  For more details, see the Settings section below and also the notation        \n'...
'  within the code itself (Developer''''s version).                                 \n'...
'                                                                                \n'...
'  Malpica, N., de Solorzano, C. O., Vaquero, J. J., Santos, A., Vallcorba,      \n'...
'  I., Garcia-Sagredo, J. M., and del Pozo, F. (1997). Applying watershed        \n'...
'  algorithms to the segmentation of clustered nuclei. Cytometry 28,             \n'...
'  289-297.                                                                      \n'...
'  Meyer, F., and Beucher, S. (1990). Morphological segmentation. J Visual       \n'...
'  Communication and Image Representation 1, 21-46.                              \n'...
'  Ortiz de Solorzano, C., Rodriguez, E. G., Jones, A., Pinkel, D., Gray, J.     \n'...
'  W., Sudar, D., and Lockett, S. J. (1999). Segmentation of confocal            \n'...
'  microscope images of cell nuclei in thick tissue sections. Journal of         \n'...
'  Microscopy-Oxford 193, 212-226.                                               \n'...
'  Wahlby, C. (2003) Algorithms for applied digital image cytometry, Ph.D.,      \n'...
'  Uppsala University, Uppsala.                                                  \n'...
'  Wahlby, C., Sintorn, I. M., Erlandsson, F., Borgefors, G., and Bengtsson,     \n'...
'  E. (2004). Combining intensity, edge and shape information for 2D and 3D      \n'...
'  segmentation of cell nuclei in tissue sections. J Microsc 215, 67-76.         \n'...
'                                                                                \n'...
'  Settings:                                                                     \n'...
'                                                                                \n'...
'  Typical diameter of objects, in pixel units (Min,Max):                        \n'...
'  This is a very important parameter which tells the module what you are        \n'...
'  looking for. Most options within this module use this estimate of the         \n'...
'  size range of the objects in order to distinguish them from noise in the      \n'...
'  image. For example, for some of the identification methods, the smoothing     \n'...
'  applied to the image is based on the minimum size of the objects. A comma     \n'...
'  should be placed between the minimum and the maximum diameters. The units     \n'...
'  here are pixels so that it is easy to zoom in on objects and determine        \n'...
'  typical diameters. To measure distances easily, use the CellProfiler          \n'...
'  Image Tool, ''''ShowOrHidePixelData'''', in any open window. Once this tool is      \n'...
'  activated, you can draw a line across objects in your image and the           \n'...
'  length of the line will be shown in pixel units. Note that for non-round      \n'...
'  objects, the diameter here is actually the ''''equivalent diameter'''', meaning     \n'...
'  the diameter of a circle with the same area as the object.                    \n'...
'                                                                                \n'...
'  Discard objects outside the diameter range:                                   \n'...
'  You can choose to discard objects outside the specified range of              \n'...
'  diameters. This allows you to exclude small objects (e.g. dust, noise,        \n'...
'  and debris) or large objects (e.g. clumps) if desired. See also the           \n'...
'  FilterByObjectMeasurement module to further discard objects based on some     \n'...
'  other measurement. During processing, the window for this module will         \n'...
'  show that objects outlined in green were acceptable, objects outlined in      \n'...
'  red were discarded based on their size, and objects outlined in yellow        \n'...
'  were discarded because they touch the border.                                 \n'...
'                                                                                \n'...
'  Try to merge ''''too small'''' objects with nearby larger objects:                  \n'...
'  Use caution when choosing ''''Yes'''' for this option! This is an experimental      \n'...
'  functionality that takes objects that were discarded because they were        \n'...
'  smaller than the specified Minimum diameter and tries to merge them with      \n'...
'  other surrounding objects. This is helpful in cases when an object was        \n'...
'  incorrectly split into two objects, one of which is actually just a tiny      \n'...
'  piece of the larger object. However, this could be dangerous if you have      \n'...
'  selected poor settings which produce many tiny objects - the module           \n'...
'  will take a very long time and you will not realize that it is because        \n'...
'  the tiny objects are being merged. It is therefore a good idea to run the     \n'...
'  module first without merging objects to make sure the settings are            \n'...
'  reasonably effective.                                                         \n'...
'                                                                                \n'...
'  Discard objects touching the border of the image:                             \n'...
'  You can choose to discard objects that touch the border of the image.         \n'...
'  This is useful in cases when you do not want to make measurements of          \n'...
'  objects that are not fully within the field of view (because, for             \n'...
'  example, the area would not be accurate).                                     \n'...
'                                                                                \n'...
'  Select automatic thresholding method:                                         \n'...
'     The threshold affects the stringency of the lines between the objects      \n'...
'  and the background. You can have the threshold automatically calculated       \n'...
'  using several methods, or you can enter an absolute number between 0 and      \n'...
'  1 for the threshold (to see the pixel intensities for your images in the      \n'...
'  appropriate range of 0 to 1, use the CellProfiler Image Tool,                 \n'...
'  ''''ShowOrHidePixelData'''', in a window showing your image). There are             \n'...
'  advantages either way. An absolute number treats every image identically,     \n'...
'  but is not robust to slight changes in lighting/staining conditions           \n'...
'  between images. An automatically calculated threshold adapts to changes       \n'...
'  in lighting/staining conditions between images and is usually more            \n'...
'  robust/accurate, but it can occasionally produce a poor threshold for         \n'...
'  unusual/artifactual images. It also takes a small amount of time to           \n'...
'  calculate.                                                                    \n'...
'     The threshold which is used for each image is recorded as a                \n'...
'  measurement in the output file, so if you find unusual measurements from      \n'...
'  one of your images, you might check whether the automatically calculated      \n'...
'  threshold was unusually high or low compared to the other images.             \n'...
'     There are five methods for finding thresholds automatically, Otsu''''s        \n'...
'  method, the Mixture of Gaussian (MoG) method, the Background method, the      \n'...
'  Robust Background method and the Ridler-Calvard method.                       \n'...
'  ** The Otsu method                                                            \n'...
'  uses our version of the Matlab function graythresh (the code is in the        \n'...
'  CellProfiler subfunction CPthreshold). Our modifications include taking       \n'...
'  into account the max and min values in the image and log-transforming the     \n'...
'  image prior to calculating the threshold. Otsu''''s method is probably best      \n'...
'  if you don''''t know anything about the image, or if the percent of the          \n'...
'  image covered by objects varies substantially from image to image. If you     \n'...
'  know the object coverage percentage and it does not vary much from image      \n'...
'  to image, the MoG can be better, especially if the coverage percentage is     \n'...
'  not near 50%%. Note, however, that the MoG function is experimental and        \n'...
'  has not been thoroughly validated.                                            \n'...
'  ** The Background method                                                      \n'...
'  is simple and appropriate for images in which most of the image is            \n'...
'  background. It finds the mode of the histogram of the image, which is         \n'...
'  assumed to be the background of the image, and chooses a threshold at         \n'...
'  twice that value (which you can adjust with a Threshold Correction Factor,    \n'...
'  see below).  Note that the mode is protected from a high number of            \n'...
'  saturated pixels by only counting pixels < 0.95. This can be very helpful,    \n'...
'  for example, if your images vary in overall brightness but the objects of     \n'...
'  interest are always twice (or actually, any constant) as bright as the        \n'...
'  background of the image.                                                      \n'...
'  ** The Robust background                                                      \n'...
'  method trims the brightest and dimmest 5%% of pixel intensities off first      \n'...
'  in the hopes that the remaining pixels represent a gaussian of intensity      \n'...
'  values that are mostly background pixels. It then calculates the mean and     \n'...
'  standard deviation of the remaining pixels and calculates the threshold       \n'...
'  as the mean + 2 times the standard deviation.                                 \n'...
'  ** The Ridler-Calvard method                                                  \n'...
'  is simple and its results are often very similar to Otsu''''s - according to     \n'...
'  Sezgin and Sankur''''s paper (Journal of Electronic Imaging 2004), Otsu''''s        \n'...
'  overall quality on testing 40 nondestructive testing images is slightly       \n'...
'  better than Ridler''''s (Average error - Otsu: 0.318, Ridler: 0.401).            \n'...
'  It chooses an initial threshold, and then iteratively calculates the next     \n'...
'  one by taking the mean of the average intensities of the background and       \n'...
'  foreground pixels determined by the first threshold, repeating this until     \n'...
'  the threshold converges.                                                      \n'...
'  ** The Kapur method                                                           \n'...
'  computes the threshold of an image by                                         \n'...
'  log-transforming its values, then searching for the threshold that            \n'...
'  maximizes the sum of entropies of the foreground and background               \n'...
'  pixel values, when treated as separate distributions.                         \n'...
'     You can also choose between Global, Adaptive, and Per object               \n'...
'  thresholding:                                                                 \n'...
'  Global: one threshold is used for the entire image (fast).                    \n'...
'  Adaptive: the threshold varies across the image - a bit slower but            \n'...
'  provides more accurate edge determination which may help to separate          \n'...
'  clumps, especially if you are not using a clump-separation method (see        \n'...
'  below).                                                                       \n'...
'  Per object: if you are using this module to find child objects located        \n'...
'  *within* parent objects, the per object method will calculate a distinct      \n'...
'  threshold for each parent object. This is especially helpful, for             \n'...
'  example, when the background brightness varies substantially among the        \n'...
'  parent objects. Important: the per object method requires that you run an     \n'...
'  IdentifyPrim module to identify the parent objects upstream in the            \n'...
'  pipeline. After the parent objects are identified in the pipeline, you        \n'...
'  must then also run a Crop module as follows: the image to be cropped is       \n'...
'  the one                                                                       \n'...
'  that you will want to use within this module to identify the children         \n'...
'  objects (e.g., ChildrenStainedImage), and the shape in which to crop          \n'...
'  is the name of the parent objects (e.g., Nuclei). Then, set this              \n'...
'  IdentifyPrimAutomatic module to identify objects within the                   \n'...
'  CroppedChildrenStainedImage.                                                  \n'...
'                                                                                \n'...
'  Threshold correction factor:                                                  \n'...
'  When the threshold is calculated automatically, it may consistently be        \n'...
'  too stringent or too lenient. You may need to enter an adjustment factor      \n'...
'  which you empirically determine is suitable for your images. The number 1     \n'...
'  means no adjustment, 0 to 1 makes the threshold more lenient and greater      \n'...
'  than 1 (e.g. 1.3) makes the threshold more stringent. For example, the        \n'...
'  Otsu automatic thresholding inherently assumes that 50%% of the image is       \n'...
'  covered by objects. If a larger percentage of the image is covered, the       \n'...
'  Otsu method will give a slightly biased threshold that may have to be         \n'...
'  corrected using a threshold correction factor.                                \n'...
'                                                                                \n'...
'  Lower and upper bounds on threshold:                                          \n'...
'  Can be used as a safety precaution when the threshold is calculated           \n'...
'  automatically. For example, if there are no objects in the field of view,     \n'...
'  the automatic threshold will be unreasonably low. In such cases, the          \n'...
'  lower bound you enter here will override the automatic threshold.             \n'...
'                                                                                \n'...
'  Approximate percentage of image covered by objects:                           \n'...
'  An estimate of how much of the image is covered with objects. This            \n'...
'  information is currently only used in the MoG (Mixture of Gaussian)           \n'...
'  thresholding but may be used for other thresholding methods in the future     \n'...
'  (see below).                                                                  \n'...
'                                                                                \n'...
'  Method to distinguish clumped objects:                                        \n'...
'  Note: to choose between these methods, you can try test mode (see the         \n'...
'  last setting for this module).                                                \n'...
'  * Intensity - For objects that tend to have only one peak of brightness       \n'...
'  per object (e.g. objects that are brighter towards their interiors), this     \n'...
'  option counts each intensity peak as a separate object. The objects can       \n'...
'  be any shape, so they need not be round and uniform in size as would be       \n'...
'  required for a distance-based module. The module is more successful when      \n'...
'  the objects have a smooth texture. By default, the image is automatically     \n'...
'  blurred to attempt to achieve appropriate smoothness (see blur option),       \n'...
'  but overriding the default value can improve the outcome on                   \n'...
'  lumpy-textured objects. Technical description: Object centers are defined     \n'...
'  as local intensity maxima.                                                    \n'...
'  * Shape - For cases when there are definite indentations separating           \n'...
'  objects. This works best for objects that are round. The intensity            \n'...
'  patterns in the original image are irrelevant - the image is converted to     \n'...
'  black and white (binary) and the shape is what determines whether clumped     \n'...
'  objects will be distinguished. Therefore, the cells need not be brighter      \n'...
'  towards the interior as is required for the Intensity option. The             \n'...
'  de-clumping results of this method are affected by the thresholding           \n'...
'  method you choose. Technical description: The binary thresholded image is     \n'...
'  distance-transformed and object centers are defined as peaks in this          \n'...
'  image.                                                                        \n'...
'                                                                                \n'...
'  * Do not use (fastest option) - If objects are far apart and are very well    \n'...
'  separated, it may be unnecessary to attempt to separate clumped objects.      \n'...
'  Using the ''''Do not use'''' option, a simple threshold will be used to identify    \n'...
'  objects. This will override any declumping method chosen in the next          \n'...
'  question.                                                                     \n'...
'                                                                                \n'...
'  Method to draw dividing lines between clumped objects:                        \n'...
'  * Intensity - works best where the dividing lines between clumped             \n'...
'  objects are dim. Technical description: watershed on the intensity image.     \n'...
'  * Distance - Dividing lines between clumped objects are based on the          \n'...
'  shape of the clump. For example, when a clump contains two objects, the       \n'...
'  dividing line will be placed where indentations occur between the two         \n'...
'  nuclei. The intensity patterns in the original image are irrelevant - the     \n'...
'  cells need not be dimmer along the lines between clumped objects.             \n'...
'  Technical description: watershed on the distance-transformed thresholded      \n'...
'  image.                                                                        \n'...
'  * Do not use (fastest option) - If objects are far apart and are very well    \n'...
'  separated, it may be unnecessary to attempt to separate clumped objects.      \n'...
'  Using the ''''Do not use'''' option, the thresholded image will be used to identify \n'...
'  objects. This will override any declumping method chosen in the above         \n'...
'  question.                                                                     \n'...
'                                                                                \n'...
'  Size of smoothing filter, in pixel units:                                     \n'...
'     (Only used when distinguishing between clumped objects) This setting,      \n'...
'  along with the suppress local maxima setting, affects whether objects         \n'...
'  close to each other are considered a single object or multiple objects.       \n'...
'  It does not affect the dividing lines between an object and the               \n'...
'  background. If you see too many objects merged that ought to be separate,     \n'...
'  the value should be lower. If you see too many objects split up that          \n'...
'  ought to be merged, the value should be higher.                               \n'...
'     The image is smoothed based on the specified minimum object diameter       \n'...
'  that you have entered, but you may want to override the automatically         \n'...
'  calculated value here. Reducing the texture of objects by increasing the      \n'...
'  smoothing increases the chance that each real, distinct object has only       \n'...
'  one peak of intensity but also increases the chance that two distinct         \n'...
'  objects will be recognized as only one object. Note that increasing the       \n'...
'  size of the smoothing filter increases the processing time exponentially.     \n'...
'                                                                                \n'...
'  Suppress local maxima within this distance (a positive integer, in pixel      \n'...
'  units):                                                                       \n'...
'     (Only used when distinguishing between clumped objects) This setting,      \n'...
'  along with the size of the smoothing filter, affects whether objects          \n'...
'  close to each other are considered a single object or multiple objects.       \n'...
'  It does not affect the dividing lines between an object and the               \n'...
'  background. This setting looks for the maximum intensity in the size          \n'...
'  specified by the user.  The local intensity histogram is smoothed to          \n'...
'  remove the peaks within that distance. So,if you see too many objects         \n'...
'  merged that ought to be separate, the value should be lower. If you see       \n'...
'  too many objects split up that ought to be merged, the value should be higher.\n'...
'     Object markers are suppressed based on the specified minimum object        \n'...
'  diameter that you have entered, but you may want to override the              \n'...
'  automatically calculated value here. The maxima suppression distance          \n'...
'  should be set to be roughly equivalent to the minimum radius of a real        \n'...
'  object of interest. Basically, any distinct ''''objects'''' which are found but     \n'...
'  are within two times this distance from each other will be assumed to be      \n'...
'  actually two lumpy parts of the same object, and they will be merged.         \n'...
'                                                                                \n'...
'  Speed up by using lower-resolution image to find local maxima?                \n'...
'  (Only used when distinguishing between clumped objects) If you have           \n'...
'  entered a minimum object diameter of 10 or less, setting this option to       \n'...
'  Yes will have no effect.                                                      \n'...
'                                                                                \n'...
'  Technical notes: The initial step of identifying local maxima is              \n'...
'  performed on the user-controlled heavily smoothed image, the                  \n'...
'  foreground/background is done on a hard-coded slightly smoothed image,        \n'...
'  and the dividing lines between clumped objects (watershed) is done on the     \n'...
'  non-smoothed image.                                                           \n'...
'                                                                                \n'...
'  Laplacian of Gaussian method:                                                 \n'...
'  This is a specialized method to find objects and will override the above      \n'...
'  settings in this module. The code was kindly donated by Zach Perlman and      \n'...
'  was used in this published work:                                              \n'...
'  Multidimensional drug profiling by automated microscopy.                      \n'...
'  Science. 2004 Nov 12;306(5699):1194-8.  PMID: 15539606                        \n'...
'  Regrettably, we have no further description of its variables.                 \n'...
'                                                                                \n'...
'  Special note on saving images: Using the settings in this module, object      \n'...
'  outlines can be passed along to the module OverlayOutlines and then saved     \n'...
'  with the SaveImages module. Objects themselves can be passed along to the     \n'...
'  object processing module ConvertToImage and then saved with the               \n'...
'  SaveImages module. This module produces several additional types of           \n'...
'  objects with names that are automatically passed along with the following     \n'...
'  naming structure: (1) The unedited segmented image, which includes            \n'...
'  objects on the edge of the image and objects that are outside the size        \n'...
'  range, can be saved using the name: UneditedSegmented + whatever you          \n'...
'  called the objects (e.g. UneditedSegmentedNuclei). (2) The segmented          \n'...
'  image which excludes objects smaller than your selected size range can be     \n'...
'  saved using the name: SmallRemovedSegmented + whatever you called the         \n'...
'  objects (e.g. SmallRemovedSegmented Nuclei).                                  \n'...
'                                                                                \n'...
'  See also IdentifyPrimManual, IdentifySecondary.                               \n'...
]);

ToolHelp{37} = IdentifyPrimAutomaticHelp;

IdentifyPrimLoGHelp = sprintf([...
'  Help for the Identify Primary LoG module:                                \n'...
'  Category: Object Processing                                              \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'                                                                           \n'...
'  Identifies the centers of blob-like primary objects.  The result         \n'...
'  consists of only a single pixel per object, located near the center      \n'...
'  of the object.                                                           \n'...
'                                                                           \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module identifies the centers of blob-like primary objects          \n'...
'  (e.g. nuclei) in grayscale images that show bright objects on a dark     \n'...
'  background.  When the objects of interest are fairly round and of        \n'...
'  even size, this module may be more sensitive than the methods in         \n'...
'  IdentifyPrimAutomatic and therefore detect objects that would            \n'...
'  otherwise be lost.                                                       \n'...
'                                                                           \n'...
'  The result consists of only a single pixel per object, located near      \n'...
'  the center of the object; the IdentifySecondary module can be used       \n'...
'  to fill out the object based on this center point.                       \n'...
'                                                                           \n'...
'  The radius parameter should be set to the approximate radius of the      \n'...
'  objects of interest.  The algorithm is not very sensitive to this        \n'...
'  parameter.                                                               \n'...
'                                                                           \n'...
'  The threshold parameter tells the algorithm how inclusive to be when     \n'...
'  looking for objects.  Internally, each potential object is assigned      \n'...
'  a score that depends on both how bright the object is and how            \n'...
'  blob-like its shape is.  Only objects that score above the threshold     \n'...
'  are returned.  The threshold must be determined experimentally, but      \n'...
'  the ''''Automatic'''' setting will make a guess using Otsu''''s thresholding      \n'...
'  method on the transformed image.  If you want the threshold to be        \n'...
'  consistent across images, then use the threshold found by the ''''Automatic''''\n'...
'  setting as a starting point for manual threshold input adjustment.       \n'...
'  If the thresold is too high, objects will be lost;                       \n'...
'  if it is too low, spurious objects will be found.                        \n'...
'                                                                           \n'...
'  The module works by convolving the image with the Laplacian of           \n'...
'  Gaussian (LoG) kernel.  This is equivalent to convolving with the        \n'...
'  Gaussian kernel and then with the Laplace operator.  The regional        \n'...
'  maxima in the filter response that exceed the specificed threshold       \n'...
'  are identified as objects.  The radius parameter specifies the width     \n'...
'  of the kernel.                                                           \n'...
'                                                                           \n'...
'  Ultimately, this module will become an option in                         \n'...
'  IdentifyPrimAutomatic, so that its options for maxima suppression        \n'...
'  and finding edges between clumps can be used.                            \n'...
'                                                                           \n'...
'  $Revision: 6982 $                                                        \n'...
]);

ToolHelp{38} = IdentifyPrimLoGHelp;

IdentifyPrimManualHelp = sprintf([...
'  Help for the Identify Primary Manual module:                             \n'...
'  Category: Object Processing                                              \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Identifies an object based on manual intervention (clicking) by the user.\n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module allows the user to identify objects by manually outlining    \n'...
'  them. This is done by using the mouse to click multiple points around    \n'...
'  the object. Multiple objects can be outlined using this module.          \n'...
'                                                                           \n'...
'  Special note on saving images: Using the settings in this module, object \n'...
'  outlines can be passed along to the module OverlayOutlines and then saved\n'...
'  with the SaveImages module. Objects themselves can be passed along to the\n'...
'  object processing module ConvertToImage and then saved with the          \n'...
'  SaveImages module. This module produces several additional types of      \n'...
'  objects with names that are automatically passed along with the following\n'...
'  naming structure: (1) The unedited segmented image, which includes       \n'...
'  objects on the edge of the image and objects that are outside the size   \n'...
'  range, can be saved using the name: UneditedSegmented + whatever you     \n'...
'  called the objects (e.g. UneditedSegmentedNuclei). (2) The segmented     \n'...
'  image which excludes objects smaller than your selected size range can be\n'...
'  saved using the name: SmallRemovedSegmented + whatever you called the    \n'...
'  objects (e.g. SmallRemovedSegmented Nuclei).                             \n'...
'                                                                           \n'...
'  See also IdentifyPrimAutomatic.                                          \n'...
]);

ToolHelp{39} = IdentifyPrimManualHelp;

IdentifySecondaryHelp = sprintf([...
'  Help for the Identify Secondary module:                                      \n'...
'  Category: Object Processing                                                  \n'...
'                                                                               \n'...
'  SHORT DESCRIPTION:                                                           \n'...
'  Identifies objects (e.g. cell edges) using "seed" objects identified by      \n'...
'  an Identify Primary module (e.g. nuclei).                                    \n'...
'  *************************************************************************    \n'...
'                                                                               \n'...
'  This module identifies secondary objects (e.g. cell edges) based on two      \n'...
'  inputs: (1) a previous module''''s identification of primary objects (e.g.      \n'...
'  nuclei) and (2) an image stained for the secondary objects (not required     \n'...
'  for the Distance - N option). Each primary object is assumed to be completely\n'...
'  within a secondary object (e.g. nuclei are completely within cells           \n'...
'  stained for actin).                                                          \n'...
'                                                                               \n'...
'  It accomplishes two tasks:                                                   \n'...
'  (a) finding the dividing lines between secondary objects which touch each    \n'...
'  other. Three methods are available: Propagation, Watershed (an older         \n'...
'  version of Propagation), and Distance.                                       \n'...
'  (b) finding the dividing lines between the secondary objects and the         \n'...
'  background of the image. This is done by thresholding the image stained      \n'...
'  for secondary objects, except when using Distance - N.                       \n'...
'                                                                               \n'...
'  Settings:                                                                    \n'...
'                                                                               \n'...
'  Methods to identify secondary objects:                                       \n'...
'  * Propagation - For task (a), this method will find dividing lines           \n'...
'  between clumped objects where the image stained for secondary objects        \n'...
'  shows a change in staining (i.e. either a dimmer or a brighter line).        \n'...
'  Smoother lines work better, but unlike the watershed method, small gaps      \n'...
'  are tolerated. This method is considered an improvement on the               \n'...
'  traditional watershed method. The dividing lines between objects are         \n'...
'  determined by a combination of the distance to the nearest primary object    \n'...
'  and intensity gradients. This algorithm uses local image similarity to       \n'...
'  guide the location of boundaries between cells. Boundaries are               \n'...
'  preferentially placed where the image''''s local appearance changes             \n'...
'  perpendicularly to the boundary. Reference: TR Jones, AE Carpenter, P        \n'...
'  Golland (2005) Voronoi-Based Segmentation of Cells on Image Manifolds,       \n'...
'  ICCV Workshop on Computer Vision for Biomedical Image Applications, pp.      \n'...
'  535-543. For task (b), thresholding is used.                                 \n'...
'                                                                               \n'...
'  * Watershed - For task (a), this method will find dividing lines between     \n'...
'  objects by looking for dim lines between objects. For task (b),              \n'...
'  thresholding is used. Reference: Vincent, Luc, and Pierre Soille,            \n'...
'  "Watersheds in Digital Spaces: An Efficient Algorithm Based on Immersion     \n'...
'  Simulations," IEEE Transactions of Pattern Analysis and Machine              \n'...
'  Intelligence, Vol. 13, No. 6, June 1991, pp. 583-598.                        \n'...
'                                                                               \n'...
'  * Distance - This method is bit unusual because the edges of the primary     \n'...
'  objects are expanded a specified distance to create the secondary            \n'...
'  objects. For example, if nuclei are labeled but there is no stain to help    \n'...
'  locate cell edges, the nuclei can simply be expanded in order to estimate    \n'...
'  the cell''''s location. This is often called the ''''doughnut'''' or ''''annulus'''' or     \n'...
'  ''''ring'''' approach for identifying the cytoplasmic compartment. Using the       \n'...
'  Distance - N method, the image of the secondary staining is not used at      \n'...
'  all, and these expanded objects are the final secondary objects. Using       \n'...
'  the Distance - B method, thresholding is used to eliminate background        \n'...
'  regions from the secondary objects. This allows the extent of the            \n'...
'  secondary objects to be limited to a certain distance away from the edge     \n'...
'  of the primary objects.                                                      \n'...
'                                                                               \n'...
'  Select automatic thresholding method or enter an absolute threshold:         \n'...
'     The threshold affects the stringency of the lines between the objects     \n'...
'  and the background. See the help for the IdentifyPrimAutomatic module for    \n'...
'  a complete description of the options. Note that Per object options are      \n'...
'  not available for IdentifySecondary because the Per object method relies     \n'...
'  on identifying objects *smaller* than the primary objects, whereas           \n'...
'  secondary objects are always *larger* than their corresponding primary       \n'...
'  objects.                                                                     \n'...
'                                                                               \n'...
'  Threshold correction factor:                                                 \n'...
'  When the threshold is calculated automatically, it may consistently be       \n'...
'  too stringent or too lenient. You may need to enter an adjustment factor     \n'...
'  which you empirically determine is suitable for your images. The number 1    \n'...
'  means no adjustment, 0 to 1 makes the threshold more lenient and greater     \n'...
'  than 1 (e.g. 1.3) makes the threshold more stringent. For example, the       \n'...
'  Otsu automatic thresholding inherently assumes that 50%% of the image is      \n'...
'  covered by objects. If a larger percentage of the image is covered, the      \n'...
'  Otsu method will give a slightly biased threshold that may have to be        \n'...
'  corrected using a threshold correction factor.                               \n'...
'                                                                               \n'...
'  Lower and upper bounds on threshold:                                         \n'...
'  Can be used as a safety precaution when the threshold is calculated          \n'...
'  automatically. For example, if there are no objects in the field of view,    \n'...
'  the automatic threshold will be unreasonably low. In such cases, the         \n'...
'  lower bound you enter here will override the automatic threshold.            \n'...
'                                                                               \n'...
'  Approximate percentage of image covered by objects:                          \n'...
'  An estimate of how much of the image is covered with objects. This           \n'...
'  information is currently only used in the MoG (Mixture of Gaussian)          \n'...
'  thresholding but may be used for other thresholding methods in the future    \n'...
'  (see below).                                                                 \n'...
'                                                                               \n'...
'  Regularization factor (for propagation method only):                         \n'...
'  This method takes two factors into account when deciding where to draw       \n'...
'  the dividing line between two touching secondary objects: the distance to    \n'...
'  the nearest primary object, and the intensity of the secondary object        \n'...
'  image. The regularization factor controls the balance between these two      \n'...
'  considerations: A value of zero means that the distance to the nearest       \n'...
'  primary object is ignored and the decision is made entirely on the           \n'...
'  intensity gradient between the two competing primary objects. Larger         \n'...
'  values weight the distance between the two values more and more heavily.     \n'...
'  The regularization factor can be infinitely large, but around 10 or so,      \n'...
'  the intensity image is almost completely ignored and the dividing line       \n'...
'  will simply be halfway between the two competing primary objects.            \n'...
'                                                                               \n'...
'  Note: Primary identify modules produce two (hidden) output images that       \n'...
'  are used by this module. The Segmented image contains the final, edited      \n'...
'  primary objects (i.e. objects at the border and those that are too small     \n'...
'  or large have been excluded). The SmallRemovedSegmented image is the         \n'...
'  same except that the objects at the border and the large objects have        \n'...
'  been included. These extra objects are used to perform the identification    \n'...
'  of secondary object outlines, since they are probably real objects (even     \n'...
'  if we don''''t want to measure them). Small objects are not used at this        \n'...
'  stage because they are more likely to be artifactual, and so they            \n'...
'  therefore should not "claim" any secondary object pixels.                    \n'...
'                                                                               \n'...
'  TECHNICAL DESCRIPTION OF THE PROPAGATION OPTION:                             \n'...
'  Propagate labels from LABELS_IN to LABELS_OUT, steered by IMAGE and          \n'...
'  limited to MASK. MASK should be a logical array. LAMBDA is a                 \n'...
'  regularization parameter, larger being closer to Euclidean distance in       \n'...
'  the image plane, and zero being entirely controlled by IMAGE. Propagation    \n'...
'  of labels is by shortest path to a nonzero label in LABELS_IN. Distance      \n'...
'  is the sum of absolute differences in the image in a 3x3 neighborhood,       \n'...
'  combined with LAMBDA via sqrt(differences^2 + LAMBDA^2). Note that there     \n'...
'  is no separation between adjacent areas with different labels (as there      \n'...
'  would be using, e.g., watershed). Such boundaries must be added in a         \n'...
'  postprocess. IdentifySecPropagateSubfunction is the subfunction              \n'...
'  implemented in C and MEX to perform the propagate algorithm.                 \n'...
'                                                                               \n'...
'  IdentifySecPropagateSubfunction.cpp is the source code, in C++               \n'...
'  IdentifySecPropagateSubfunction.dll is compiled for windows                  \n'...
'  IdentifySecPropagateSubfunction.mexmac is compiled for macintosh             \n'...
'  IdentifySecPropagateSubfunction.mexglx is compiled for linux                 \n'...
'  IdentifySecPropagateSubfunction.mexa64 is compiled for 64-bit linux          \n'...
'                                                                               \n'...
'  To compile IdentifySecPropagateSubfunction for different operating           \n'...
'  systems, you will need to log on to that operating system and at the         \n'...
'  command line of MATLAB enter:                                                \n'...
'  mex IdentifySecPropagateSubfunction                                          \n'...
'                                                                               \n'...
'  See also Identify primary modules.                                           \n'...
]);

ToolHelp{40} = IdentifySecondaryHelp;

IdentifyTertiarySubregionHelp = sprintf([...
'  Help for the Identify Tertiary Subregion module:                         \n'...
'  Category: Object Processing                                              \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Identifies tertiary obects (e.g. cytoplasm) by removing the primary      \n'...
'  objects (e.g. nuclei) from secondary objects (e.g. cells) leaving a      \n'...
'  ring shape.                                                              \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module will take the smaller identified objects and remove from them\n'...
'  the larger identified objects. For example, "subtracting" the nuclei from\n'...
'  the cells will leave just the cytoplasm, the properties of which can then\n'...
'  be measured by Measure modules. The larger objects should therefore be   \n'...
'  equal in size or larger than the smaller objects and must completely     \n'...
'  contain the smaller objects.  Both inputs should be objects produced by  \n'...
'  identify modules, not images.                                            \n'...
'                                                                           \n'...
'  Note: creating subregions using this module can result in objects that   \n'...
'  are not contiguous, which does not cause problems when running the       \n'...
'  Measure Intensity and Texture modules, but does cause problems when      \n'...
'  running the Measure Area Shape module because calculations of the        \n'...
'  perimeter, aspect ratio, solidity, etc. cannot be made for noncontiguous \n'...
'  objects.                                                                 \n'...
'                                                                           \n'...
'  See also Identify Primary and Identify Secondary modules.                \n'...
]);

ToolHelp{41} = IdentifyTertiarySubregionHelp;

ImageMathHelp = sprintf([...
'  Help for the ImageMath module:                                                      \n'...
'  Category: Image Processing                                                          \n'...
'                                                                                      \n'...
'  SHORT DESCRIPTION:                                                                  \n'...
'  Performs simple mathematical operations on image intensities.                       \n'...
'  *************************************************************************           \n'...
'                                                                                      \n'...
'  Operation:                                                                          \n'...
'                                                                                      \n'...
'  Average in the ImageMath module is the numerical average of the two images loaded in\n'...
'  the module.  If you would like to average many images (all of the images            \n'...
'  in an entire pipeline), please use the CorrectIllumination_Calculate                \n'...
'  module and chose the option "(For ''''All'''' mode only) What do you want to              \n'...
'  call the averaged image (prior to dilation or smoothing)?                           \n'...
'  (This is an image produced during the calculations - it is typically not            \n'...
'  needed for downstream modules)"  This will be an average over all images.           \n'...
'                                                                                      \n'...
'                                                                                      \n'...
'                                                                                      \n'...
'  Multiply factors:                                                                   \n'...
'  The final image may have a substantially different range of pixel                   \n'...
'  intensities than the originals, so each image can be multiplied by a                \n'...
'  factor prior to the operation. This factor can be any real number.                  \n'...
'                                                                                      \n'...
'  Do you want values in the image to be set to zero/one?:                             \n'...
'  Values outside the range of 0 to 1 might not be handled well by other               \n'...
'  modules. Here, you have the option of setting negative values to 0.                 \n'...
'  For other options (e.g. setting values over 1 to equal 1), see the                  \n'...
'  Rescale Intensity module.                                                           \n'...
'                                                                                      \n'...
'  See also SubtractBackground, RescaleIntensity.                                      \n'...
]);

ToolHelp{42} = ImageMathHelp;

InvertForPrintingHelp = sprintf([...
'  Help for the Invert For Displaymodule:                                   \n'...
'  Category: Image Processing                                               \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Inverts Fluorescent-looking images into Brightfield-looking images.      \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module works on color images.  It turns a single or                 \n'...
'  multi-channel immunofluorescent-stained image into an image that         \n'...
'  resembles a brightfield image stained with similarly-colored stains,     \n'...
'  which generally print better.                                            \n'...
]);

ToolHelp{43} = InvertForPrintingHelp;

KeepLargestObjectHelp = sprintf([...
'  Help for KeepLargestObjects module:                                      \n'...
'  Category: Object Processing                                              \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'                                                                           \n'...
'  If there is more than one primary object inside a secondary object,      \n'...
'  delete all except the largest one.                                       \n'...
'                                                                           \n'...
'  *************************************************************************\n'...
]);

ToolHelp{44} = KeepLargestObjectHelp;

LabelImagesHelp = sprintf([...
'  Help for the Label Images module:                                         \n'...
'  Category: Other                                                           \n'...
'                                                                            \n'...
'  SHORT DESCRIPTION:                                                        \n'...
'  Labels images by assigning them a row and column annotation based on a    \n'...
'  plate layout.                                                             \n'...
'  ************************************************************************* \n'...
'                                                                            \n'...
'  This module labels images by assigning them a row and column annotation   \n'...
'  based on a plate layout. The annotation is created and stored as an image \n'...
'  measurement that is stored in the output file and can thus be exported    \n'...
'  with other image data. For example, for 96 well plates, the first image   \n'...
'  cycle will labeled:                                                       \n'...
'  PlateNumber = 1, RowNumber = 1, ColumnNumber = 1, SiteNumber = 1,         \n'...
'  RowText = A, ColumnText = 01, RowAndColumnText = A01, and                 \n'...
'  FullLabel = Plate1_A01_site01. The second                                 \n'...
'  well will be labeled A02 or B01, depending on your request. You can also  \n'...
'  specify how many images cycles are associated per well, if there are      \n'...
'  multiple fields of view per well.                                         \n'...
'                                                                            \n'...
'  Features measured:     Feature Number:                                    \n'...
'  PlateNumber           |      1                                            \n'...
'  RowNumber             |      2                                            \n'...
'  ColumnNumber          |      3                                            \n'...
'  SiteNumber            |      4                                            \n'...
'  RowText               |      5                                            \n'...
'  ColumnText            |      6                                            \n'...
'  RowAndColumnText      |      7                                            \n'...
'  FullLabelText         |      8                                            \n'...
'                                                                            \n'...
'  Settings: Most are self-explanatory.                                      \n'...
'                                                                            \n'...
'  See also DefineGrid, for labeling a grid within each image.               \n'...
]);

ToolHelp{45} = LabelImagesHelp;

LoadImageDirectoryHelp = sprintf([...
'  Help for the LoadImageDirectory module:                                    \n'...
'  Category: File Processing                                                  \n'...
'                                                                             \n'...
'  SHORT DESCRIPTION:                                                         \n'...
'  Makes a projection either by averaging or taking the maximum pixel value   \n'...
'  at each pixel position of a number of images organized by directory        \n'...
'                                                                             \n'...
'  *************************************************************************  \n'...
'                                                                             \n'...
'  This module combines a set of images by averaging or by taking the maximum \n'...
'  pixel intensity at each pixel position. When this module is used to        \n'...
'  average a Z-stack (3-D image stack), this process is known as making       \n'...
'  a projection.                                                              \n'...
'                                                                             \n'...
'  Settings:                                                                  \n'...
'                                                                             \n'...
'  * Enter the pathname to the folders containing the images:                 \n'...
'    This is the base directory that contains each of the directories         \n'...
'    to be combined into a projection. Relative paths are from the image      \n'...
'    folder: for instance "." operates on the directories in the image folder.\n'...
'                                                                             \n'...
'  * Enter the text that the folders have in common:                          \n'...
'    Enter some portion of the directory name that''''s common to all            \n'...
'    directories for this type of image. For instance, "DNA-A01" and          \n'...
'    "DNA-A02" can be selected by entering "DNA". Enter "*" to take all       \n'...
'    directories.                                                             \n'...
'                                                                             \n'...
'  * Analyze all subfolders within each folder:                               \n'...
'    If yes, the module will read image files in subfolders of each           \n'...
'    folder it looks at. If no, it will only read image files out of          \n'...
'    the named folder.                                                        \n'...
'                                                                             \n'...
'  * How do you want to load these files:                                     \n'...
'    Exact match - if the text below matches some part of the text in the     \n'...
'                  image file name, the file will be accepted.                \n'...
'    Regular expressions - use a regular expression to match the image        \n'...
'                          file name (see LoadImages for details).            \n'...
'                                                                             \n'...
'  * What kind of projection would you like to make?:                         \n'...
'    If you choose Average, the average pixel intensity at each pixel         \n'...
'    position will be used to created the final image.  If you choose         \n'...
'    Maximum, the maximum pixel value at each pixel position will be used to  \n'...
'    created the final image.                                                 \n'...
'  * What do you want to call the projected image?:                           \n'...
'    Give a name to the resulting image, which could be used in subsequent    \n'...
'    modules.                                                                 \n'...
'                                                                             \n'...
'  Measurements:                                                              \n'...
'  Image / DirectoryName - the name of the directory from which we took       \n'...
'                          the image files for this image                     \n'...
'        / PathName      - the path to that directory                         \n'...
'                                                                             \n'...
'  See also LoadImages                                                        \n'...
]);

ToolHelp{46} = LoadImageDirectoryHelp;

LoadImagesHelp = sprintf([...
'  Help for the Load Images module:                                                          \n'...
'  Category: File Processing                                                                 \n'...
'                                                                                            \n'...
'  SHORT DESCRIPTION:                                                                        \n'...
'  Allows you to specify which images or movies are to be loaded and in                      \n'...
'  which order. Groups of images will be loaded per cycle of CellProfiler                    \n'...
'  processing.                                                                               \n'...
'  *************************************************************************                 \n'...
'                                                                                            \n'...
'  Tells CellProfiler where to retrieve images and gives each image a                        \n'...
'  meaningful name for the other modules to access. When used in combination                 \n'...
'  with a SaveImages module, you can load images in one file format and                      \n'...
'  save in another file format, making CellProfiler work as a file format                    \n'...
'  converter.                                                                                \n'...
'                                                                                            \n'...
'  If more than four images per cycle must be loaded, more than one                          \n'...
'  LoadImages module can be run sequentially. Running more than one of these                 \n'...
'  modules also allows images to be retrieved from different folders. Hint:                  \n'...
'  if you want to load all images in a directory, you can enter the file                     \n'...
'  extension as the text for which to search.                                                \n'...
'                                                                                            \n'...
'  Relative pathnames can be used. For example, in regular expressions text                  \n'...
'  mode, on the Mac platform you could leave the folder where images are to                  \n'...
'  be loaded as ''''.'''' to choose the default image folder, and then enter                       \n'...
'  ../DAPI[123456789].tif as the name of the files you would like to load in                 \n'...
'  order to load images from the directory one above the default image                       \n'...
'  directory. Or, you could type .../AnotherSubfolder (note the three                        \n'...
'  periods: the first is interpreted as a standin for the default image                      \n'...
'  folder) as the folder from which images are to be loaded and enter the                    \n'...
'  filename as .tif to load an image from a different subfolder of the                       \n'...
'  parent of the default image folder.                                                       \n'...
'                                                                                            \n'...
'  Note: You can test a pipeline''''s settings on a single image cycle by                       \n'...
'  setting the Load Images module appropriately. For example, if loading by                  \n'...
'  order, you can set the number of images per set to equal the total number                 \n'...
'  of images in the folder (even if it is thousands) so that only the first                  \n'...
'  cycle will be analyzed. Or, if loading by text, you can make the                          \n'...
'  identifying text specific enough that it will recognize only one group of                 \n'...
'  images in the folder. Once the settings look good for a few test images,                  \n'...
'  you can change the Load Images module to recognize all images in your                     \n'...
'  folder.                                                                                   \n'...
'                                                                                            \n'...
'  Settings:                                                                                 \n'...
'                                                                                            \n'...
'  How do you want to load these files?                                                      \n'...
'  - Order is used when images (or movies) are present in a repeating order,                 \n'...
'  like DAPI, FITC, Red, DAPI, FITC, Red, and so on, where images are                        \n'...
'  selected based on how many images are in each group and what position                     \n'...
'  within each group a particular color is located (e.g. three images per                    \n'...
'  group, DAPI is always first).                                                             \n'...
'                                                                                            \n'...
'  - Text is used to load images (or movies) that have a particular piece of                 \n'...
'  text in the name. You have the option of matching text exactly, or using                  \n'...
'  regular expressions to match text. The files containing the text that are                 \n'...
'  in image format will be loaded.                                                           \n'...
'                                                                                            \n'...
'  - When regular expressions is selected, patterns are specified using                      \n'...
'  combinations of metacharacters and literal characters. There are a few                    \n'...
'  classes of metacharacters, partially listed below. More extensive                         \n'...
'  explanation can be found at:                                                              \n'...
'    http://www.mathworks.com/access/helpdesk/help/techdoc/matlab_prog/                      \n'...
'    f0-42649.html                                                                           \n'...
'                                                                                            \n'...
'  The following metacharacters match exactly one character from its                         \n'...
'  respective set of characters:                                                             \n'...
'                                                                                            \n'...
'    Metacharacter   Meaning                                                                 \n'...
'   ---------------  --------------------------------                                        \n'...
'               .    Any character                                                           \n'...
'              []    Any character contained within the brackets                             \n'...
'             [^]    Any character not contained within the brackets                         \n'...
'              \\w    A word character [a-z_A-Z0-9]                                           \n'...
'              \\W    Not a word character [^a-z_A-Z0-9]                                      \n'...
'              \\d    A digit [0-9]                                                           \n'...
'              \\D    Not a digit [^0-9]                                                      \n'...
'              \\s    Whitespace [ \\t\\r\\n\\f\\v]                                                \n'...
'              \\S    Not whitespace [^ \\t\\r\\n\\f\\v]                                           \n'...
'                                                                                            \n'...
'  The following metacharacters are used to logically group subexpressions                   \n'...
'  or to specify context for a position in the match. These metacharacters                   \n'...
'  do not match any characters in the string:                                                \n'...
'                                                                                            \n'...
'    Metacharacter   Meaning                                                                 \n'...
'   ---------------  --------------------------------                                        \n'...
'             ()     Group subexpression                                                     \n'...
'              |     Match subexpression before or after the |                               \n'...
'              ^     Match expression at the start of string                                 \n'...
'              $     Match expression at the end of string                                   \n'...
'             \\<     Match expression at the start of a word                                 \n'...
'             \\>     Match expression at the end of a word                                   \n'...
'                                                                                            \n'...
'  The following metacharacters specify the number of times the previous                     \n'...
'  metacharacter or grouped subexpression may be matched:                                    \n'...
'                                                                                            \n'...
'    Metacharacter   Meaning                                                                 \n'...
'   ---------------  --------------------------------                                        \n'...
'              *     Match zero or more occurrences                                          \n'...
'              +     Match one or more occurrences                                           \n'...
'              ?     Match zero or one occurrence                                            \n'...
'           {n,m}    Match between n and m occurrences                                       \n'...
'                                                                                            \n'...
'  Characters that are not special metacharacters are all treated literally                  \n'...
'  in a match. To match a character that is a special metacharacter, escape                  \n'...
'  that character with a ''''\\''''. For example ''''.'''' matches any character, so to                   \n'...
'  match a ''''.'''' specifically, use ''''\\.'''' in your pattern.                                       \n'...
'                                                                                            \n'...
'  Examples:                                                                                 \n'...
'                                                                                            \n'...
'      * [trm]ail matches ''''tail'''' or ''''rail'''' or ''''mail''''                                         \n'...
'      * [0-9] matches any digit between 0 to 9                                              \n'...
'      * [^Q-S] matches any character other than ''''Q'''' or ''''R'''' or ''''S''''                           \n'...
'      * [[]A-Z] matches any upper case alphabet along with square brackets                  \n'...
'      * [ag-i-9] matches characters ''''a'''' or ''''g'''' or ''''h'''' or ''''i'''' or ''''-'''' or ''''9''''                  \n'...
'      * [a-p]* matches '''''''' or ''''a'''' or ''''aab'''' or ''''p'''' etc.                                       \n'...
'      * [a-p]+ matches  ''''a'''' or ''''abc'''' or ''''p'''' etc.                                            \n'...
'      * [^0-9] matches any string that is not a number                                      \n'...
'      * ^[0-9]*$ matches any string that is a natural number or ''''''''                          \n'...
'      * ^-[0-9]+$|^\\+?[0-9]+$ matches any integer                                           \n'...
'                                                                                            \n'...
'  If you want to exclude files, type in the text that the excluded files                    \n'...
'  have in common.                                                                           \n'...
'  The image/movie files specified with the TEXT option may also include                     \n'...
'  files that you want to exclude from analysis (such as thumbnails created                  \n'...
'  by an imaging system). Here you can specify text that mark files for                      \n'...
'  exclusion. This text is treated as a exact match and not as a regular                     \n'...
'  expression. Note: This choice is ignored with the ORDER option.                           \n'...
'                                                                                            \n'...
'  What do you want to call these images within CellProfiler?                                \n'...
'  Give your images a meaningful name that you will use when referring to                    \n'...
'  these images in later modules.  To avoid errors, image names should                       \n'...
'  follow Matlab naming conventions:                                                         \n'...
'                                                                                            \n'...
'  1. Field names must begin with a letter, which may be followed by any                     \n'...
'  combination of letters, digits, and underscores. The following statements are all invalid:\n'...
'  w = setfield(w, ''''My.Score'''', 3);                                                           \n'...
'  w = setfield(w, ''''1stScore'''', 3);                                                           \n'...
'  w = setfield(w, ''''1+1=3'''', 3);                                                              \n'...
'  w = setfield(w, ''''@MyScore'''', 3);                                                           \n'...
'  3. Although field names can be of any length, MATLAB uses only the first N                \n'...
'  characters of the field name, (where N is the number returned by the function             \n'...
'  namelengthmax), and ignores the rest.                                                     \n'...
'                                                                                            \n'...
'  **NOTE:** When CellProfiler saves image and object measurements, it                       \n'...
'  appends the text of your ImageName with meaningful text about the                         \n'...
'  measurement (ie, Intensity_MeanIntensity_DAPI) which can quickly reach                    \n'...
'  this 63-char limit and are truncated by CellProfiler to avoid errors.                     \n'...
'  Take care to name your images and measurements conservatively to avoid                    \n'...
'  truncating measurements to the same name.                                                 \n'...
'  3. MATLAB distinguishes between uppercase and lowercase characters.                       \n'...
'  Field name length is not the same as field name Length.                                   \n'...
'  4. In most cases, you should refrain from using the names of functions and                \n'...
'  variables as field names.                                                                 \n'...
'                                                                                            \n'...
'  Analyze all subfolders within the selected folder?                                        \n'...
'  You may have subfolders within the folder that is being searched, but if                  \n'...
'  you are in TEXT mode, the names of the folders themselves must not                        \n'...
'  contain the text you are searching for or an error will result.                           \n'...
'                                                                                            \n'...
'  If the images you are loading are binary (black/white only), in what                      \n'...
'  format do you want to store them?                                                         \n'...
'  CellProfiler will save your image in binary format if your image has                      \n'...
'  only two distinct values and you have selected "binary" instead of                        \n'...
'  "grayscale".                                                                              \n'...
'                                                                                            \n'...
'  Do you want to select the subfolders to process?                                          \n'...
'  If you answered "Yes" to both this question and "Analyze subfolders,"                     \n'...
'  CellProfiler will provide a dialog box on the first cycle which will                      \n'...
'  allow you to select which folders under the Image directory you want to                   \n'...
'  process.                                                                                  \n'...
'                                                                                            \n'...
'  Do you want to check image sets for missing or duplicate files?                           \n'...
'  Tokens must be defined for the unique parts of the string. (REGULAR EXPRESSIONS ONLY)     \n'...
'  Selecting this option with REGULAR mode will examine the filenames for                    \n'...
'  unmatched or duplicate files based on the filename prefix (such as those                  \n'...
'  generated by HCS systems).  This setting is only functional if tokens are                 \n'...
'  used in the expression string (either named or unnamed), and does not                     \n'...
'  check for files missing from a particular plate layout.  A dialog box                     \n'...
'  will report the results.                                                                  \n'...
'  Unnamed tokens are defined by enclosing the string in parentheses.                        \n'...
'  For example, if you have 2 channels defined by ''''..._w1...'''' and ''''..._w2...''''                \n'...
'  then call these _w(1) and _w(2)                                                           \n'...
'  Named tokens are defined by this syntax: (?<name>expr), so that in the same               \n'...
'  example as above, the named tokens would be _w(?<wavelength1>1) and                       \n'...
'  _w(?<wavelength2>2).                                                                      \n'...
'                                                                                            \n'...
'  Notes about loading images:                                                               \n'...
'                                                                                            \n'...
'  CellProfiler can open and read .ZVI files. .ZVI files are Zeiss files                     \n'...
'  that are generated by the microscope imaging software Axiovision. These                   \n'...
'  images are stored in 12-bit depth. Currently, CellProfiler cannot read                    \n'...
'  stacked or color ZVI images.                                                              \n'...
'                                                                                            \n'...
'  CellProfiler can open and read .DIB files. These files are stored with                    \n'...
'  12-bit depth using a 16-bit file format.                                                  \n'...
'                                                                                            \n'...
'  Notes about loading movies:                                                               \n'...
'                                                                                            \n'...
'  (Update 10-11-2007) CellProfiler can read tif,tiff,flex multi-page                        \n'...
'  tif file in addition to those formats specified below.                                    \n'...
'                                                                                            \n'...
'  Movies can be avi-formatted movies (must be uncompressed avi format on                    \n'...
'  UNIX and Mac platforms) or stk-format movies (stacks of tif images                        \n'...
'  produced by MetaMorph or NIHImage/ImageJ; The ability to read stk files                   \n'...
'  is thanks to code by: Francois Nedelec, EMBL, Copyright 1999-2003). Once                  \n'...
'  the files are identified, this module extracts each frame of each movie                   \n'...
'  as a separate image, and gives these images a meaningful name for the                     \n'...
'  other modules to access.                                                                  \n'...
'                                                                                            \n'...
'  Suggestions for third party software to uncompress AVI files and convert                  \n'...
'  MOV files:                                                                                \n'...
'                                                                                            \n'...
'  WINDOWS...                                                                                \n'...
'  To convert movies to uncompressed avi format, you can use a free software                 \n'...
'  product called RAD Video Tools, which is available from:                                  \n'...
'    http://www.radgametools.com/down/Bink/RADTools.exe                                      \n'...
'                                                                                            \n'...
'  To convert a compressed AVI file or a MOV file into an uncompressed AVI:                  \n'...
'    1. Open RAD Video Tools                                                                 \n'...
'    2. Select the file you want to convert                                                  \n'...
'    3. Click the "Convert a file" button                                                    \n'...
'    4. On the next screen, type the desired output file name, and                           \n'...
'  click the "Convert" button.  Everything else can be left as default.                      \n'...
'    5. A window will pop up that asks you for the Video Compression to                      \n'...
'  use.  Choose "Full Frames (Uncompressed)", and click OK.                                  \n'...
'                                                                                            \n'...
'  MAC OSX...                                                                                \n'...
'  The iMovie program which comes with Mac OSX can be used to convert movies                 \n'...
'  to uncompressed avi format as follows:                                                    \n'...
'                                                                                            \n'...
'  1. File > New Project                                                                     \n'...
'  2. File > Import (select the movie)                                                       \n'...
'  3. File > Share                                                                           \n'...
'  	Choose the QuickTime tab                                                                 \n'...
'  	Compress movie for Expert Settings, click Share                                          \n'...
'  	Name the file, choose Export: Movie to Avi                                               \n'...
'  	Click Options...                                                                         \n'...
'  	Click Settings...                                                                        \n'...
'  		Compression = None                                                                      \n'...
'  		Depth = Millions of Colors (NOT "+")                                                    \n'...
'  		Quality = best                                                                          \n'...
'  		Frames per second = doesn''''t matter.                                                     \n'...
'  	OK, OK, Save                                                                             \n'...
'                                                                                            \n'...
'  4. To check/troubleshoot the conversion, you can use the following                        \n'...
'  commands in Matlab:                                                                       \n'...
'  >> MovieInfo = aviinfo(''''My Great Movie3.avi'''')                                             \n'...
'                                                                                            \n'...
'  MovieInfo =                                                                               \n'...
'                Filename: ''''My Great Movie3.avi''''                                             \n'...
'                FileSize: 481292920                                                         \n'...
'             FileModDate: ''''25-Mar-2005 09:59:56''''                                            \n'...
'               NumFrames: 422                                                               \n'...
'         FramesPerSecond: 20                                                                \n'...
'                   Width: 720                                                               \n'...
'                  Height: 528                                                               \n'...
'               ImageType: ''''truecolor''''                                                       \n'...
'        VideoCompression: ''''none''''                                                            \n'...
'                 Quality: 4.2950e+07                                                        \n'...
'      NumColormapEntries: 0                                                                 \n'...
'                                                                                            \n'...
'  The following error means that the Depth was improper (either you tried                   \n'...
'  to save in grayscale or the wrong bit depth color):                                       \n'...
'  >> movie = aviread(''''My Great Movie2.avi'''');                                                \n'...
'  ??? Error using ==> aviread                                                               \n'...
'  Bitmap data must be 8-bit Index images or 24-bit TrueColor images                         \n'...
'  ------------------------------------------------------------------                        \n'...
'                                                                                            \n'...
'  See also LoadSingleImage.                                                                 \n'...
]);

ToolHelp{47} = LoadImagesHelp;

LoadSingleImageHelp = sprintf([...
'  Help for the Load Single Image module:                                   \n'...
'  Category: File Processing                                                \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Loads a single image, which will be used for all image cycles.           \n'...
'  *************************************************************************\n'...
'  Note: for most purposes, you will probably want to use the Load Images   \n'...
'  module, not this one.                                                    \n'...
'                                                                           \n'...
'  Tells CellProfiler where to retrieve a single image and gives the image a\n'...
'  meaningful name for the other modules to access.  This module processes  \n'...
'  the input text string in one of two ways:                                \n'...
'  (1) A string referring to a filename. In this case, the module only      \n'...
'  executes the first time through the pipeline, and thereafter the image   \n'...
'  is accessible to all subsequent cycles being processed. This is          \n'...
'  particularly useful for loading an image like an Illumination correction \n'...
'  image to be used by the CorrectIllumination_Apply module. Note: Actually,\n'...
'  you can load four ''''single'''' images using this module.                     \n'...
'  (2) A string referring to a regular expression. In this case, the module \n'...
'  should be placed after a FileNameMetadata module and use the same regular\n'...
'  expression applied in the FileNameMetadata module. It will execute each  \n'...
'  cycle of the pipeline, matching the regular expression to the metadata   \n'...
'  previously measured. This is useful for when you have multiple images    \n'...
'  that need to be used once per cycle, but have a different name each      \n'...
'  cycle.                                                                   \n'...
'                                                                           \n'...
'  Relative pathnames can be used. For example, on the Mac platform you     \n'...
'  could leave the folder where images are to be loaded as ''''.'''' to choose the\n'...
'  default image folder, and then enter ../Imagetobeloaded.tif as the name  \n'...
'  of the file you would like to load in order to load the image from the   \n'...
'  directory one above the default image directory. Or, you could type      \n'...
'  .../AnotherSubfolder (note the three periods: the first is interpreted as\n'...
'  a standin for the default image folder) as the folder from which images  \n'...
'  are to be loaded and enter the filename as Imagetobeloaded.tif to load an\n'...
'  image from a different subfolder of the parent of the default image      \n'...
'  folder.  The above also applies for ''''&'''' with regards to the default      \n'...
'  output folder.                                                           \n'...
'                                                                           \n'...
'  If more than four single images must be loaded, more than one Load Single\n'...
'  Image module can be run sequentially. Running more than one of these     \n'...
'  modules also allows images to be retrieved from different folders.       \n'...
'                                                                           \n'...
'  LoadImages can now open and read .ZVI files.  .ZVI files are Zeiss files \n'...
'  that are generated by the microscope imaging software, Axiovision.  These\n'...
'  images are stored with 12-bit precision.  Currently, this will not work  \n'...
'  with stacked or color images.                                            \n'...
'                                                                           \n'...
'  See also LoadImages.                                                     \n'...
]);

ToolHelp{48} = LoadSingleImageHelp;

LoadTextHelp = sprintf([...
'  Help for the Load Text module:                                                 \n'...
'  Category: File Processing                                                      \n'...
'                                                                                 \n'...
'  SHORT DESCRIPTION:                                                             \n'...
'  Loads text information corresponding to images. This data (e.g. gene           \n'...
'  names or sample numbers) can be displayed on a grid or exported with the       \n'...
'  measurements to help track samples.                                            \n'...
'  *************************************************************************      \n'...
'                                                                                 \n'...
'  Use this tool to load in text information. This is useful for two              \n'...
'  reasons:                                                                       \n'...
'  1. Some modules, like DisplayGridInfo, place text information onto             \n'...
'  images. In this case, the number of text entries that you load with this       \n'...
'  module must be identical to the number of grid locations.                      \n'...
'  2. If the number of text entries that you load with this module is             \n'...
'  identical to the number of cycles you are processing, the text                 \n'...
'  information you load will be placed in the output files alongside the          \n'...
'  measurements that are made. Therefore, the information will be exported        \n'...
'  with the measurements when you use the ExportData data tool, helping you       \n'...
'  to keep track of your samples. If you forget this module, you can also         \n'...
'  run the AddData data tool after processing is complete; its function is        \n'...
'  the same for this purpose.                                                     \n'...
'                                                                                 \n'...
'  The text information to be loaded must be in a separate text file with         \n'...
'  the following syntax:                                                          \n'...
'                                                                                 \n'...
'  DESCRIPTION <description>                                                      \n'...
'  <Text info 1>                                                                  \n'...
'  <Text info 2>                                                                  \n'...
'  <Text info 3>                                                                  \n'...
'               .                                                                 \n'...
'               .                                                                 \n'...
'                                                                                 \n'...
'  <description> is a description of the text information stored in the           \n'...
'  file. It can contain spaces or unusual characters.                             \n'...
'                                                                                 \n'...
'  For example:                                                                   \n'...
'                                                                                 \n'...
'  DESCRIPTION Gene names                                                         \n'...
'  Gene X                                                                         \n'...
'  Gene Y                                                                         \n'...
'  Gene Z                                                                         \n'...
'                                                                                 \n'...
'  Be sure that the file is saved in plain text format (.txt), not Rich Text      \n'...
'  Format (.rtf).                                                                 \n'...
'                                                                                 \n'...
'  Path Name:                                                                     \n'...
'  Type period (.) for the default image folder, or ampersand (&) for the         \n'...
'  default output folder.                                                         \n'...
'  NOTE: this nomenclature is opposite that in SaveImages for historical purposes.\n'...
'                                                                                 \n'...
'  See also DisplayGridInfo module and AddData data tool.                         \n'...
]);

ToolHelp{49} = LoadTextHelp;

MakeProjectionHelp = sprintf([...
'  Help for the Average module:                                                         \n'...
'  Category: Image Processing                                                           \n'...
'                                                                                       \n'...
'  SHORT DESCRIPTION:                                                                   \n'...
'  Makes a projection either by averaging or taking the maximum pixel value             \n'...
'  at each pixel position.                                                              \n'...
'                                                                                       \n'...
'  *************************************************************************            \n'...
'                                                                                       \n'...
'  This module averages a set of images by averaging the pixel intensities              \n'...
'  at each pixel position. When this module is used to average a Z-stack                \n'...
'  (3-D image stack), this process is known as making a projection.                     \n'...
'                                                                                       \n'...
'  Settings:                                                                            \n'...
'                                                                                       \n'...
'  * What did you call the images to be made into a projection?:                        \n'...
'    Choose an image from among those loaded by a module or created by the              \n'...
'  pipeline, which will be made into a projection with the corresponding images of every\n'...
'  image set.                                                                           \n'...
'                                                                                       \n'...
'  * What kind of projection would you like to make?:                                   \n'...
'    If you choose Average, the average pixel intensity at each pixel                   \n'...
'    position will be used to created the final image.  If you choose                   \n'...
'    Maximum, the maximum pixel value at each pixel position will be used to            \n'...
'    created the final image.                                                           \n'...
'  * What do you want to call the projected image?:                                     \n'...
'    Give a name to the resulting image, which could be used in subsequent              \n'...
'  modules. See the next setting for restrictions.                                      \n'...
'                                                                                       \n'...
'  * Are the images you want to use to be loaded straight from a Load Images            \n'...
'  module, or are they being produced by the pipeline?:                                 \n'...
'    If you choose Load Images Module, the module will calculate the single,            \n'...
'  projected image the first time through the pipeline (i.e. for cycle 1) by            \n'...
'  loading the image of the type specified above of every image set.                    \n'...
'  It is then acceptable to use the resulting image                                     \n'...
'  later in the pipeline. Subsequent runs through the pipeline (i.e. for                \n'...
'  cycle 2 through the end) produce no new results. The projcted image                  \n'...
'  calculated during the first cycle is still available to other modules                \n'...
'  during subsequent cycles.                                                            \n'...
'    If you choose Pipeline, the module will calculate the single, projected            \n'...
'  image during the last cycle of the pipeline. This is because it must wait            \n'...
'  for preceding modules in the pipeline to produce their results before it             \n'...
'  can calculate an projected image. For example, you cannot calculate the              \n'...
'  projection of all Cropped images until after the last image cycle completes          \n'...
'  and the last cropped image is produced. Note that in this mode, the                  \n'...
'  resulting projected image will not be available until the last cycle has             \n'...
'  been processed, so the projected image it produces cannot be used in                 \n'...
'  subsequent modules unless they are instructed to wait until the last                 \n'...
'  cycle.                                                                               \n'...
'                                                                                       \n'...
'  See also CorrectIllumination_Calculate.                                              \n'...
]);

ToolHelp{50} = MakeProjectionHelp;

MaskImageHelp = sprintf([...
'  Help for the Mask Image module:                                          \n'...
'  Category: Image Processing                                               \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Masks image and saves it for future use.                                 \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module masks an image and saves it in the handles structure for     \n'...
'  future use. The masked image is based on the original image and the      \n'...
'  object selected.                                                         \n'...
'                                                                           \n'...
'  Note that the image saved for further processing downstream is grayscale.\n'...
'  If a binary mask is desired in subsequent modules, you might be able to  \n'...
'  access [''''CropMask'''',MaskedImageName] (e.g. ''''CropMaskMaskBlue''''), or simply \n'...
'  use the ApplyThreshold module instead of MaskImage.                      \n'...
]);

ToolHelp{51} = MaskImageHelp;

MeasureCorrelationHelp = sprintf([...
'  Help for the Measure Correlation module:                                 \n'...
'  Category: Measurement                                                    \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Measures the correlation between intensities in different images (e.g.   \n'...
'  different color channels) on a pixel by pixel basis, within identified   \n'...
'  objects or across an entire image.                                       \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Given two or more images, calculates the correlation between the         \n'...
'  pixel intensities. The correlation can be measured for the entire        \n'...
'  images, or individual correlation measurements can be made within each   \n'...
'  individual object. For example:                                          \n'...
'                                      Image overall:  In Nuclei:           \n'...
'  OrigBlue_OrigGreen    Correlation:    0.49955        -0.07395            \n'...
'  OrigBlue_OrigRed      Correlation:    0.59886        -0.02752            \n'...
'  OrigGreen_OrigRed     Correlation:    0.83605         0.68489            \n'...
'                                                                           \n'...
'  Features measured:      Feature Number:                                  \n'...
'  Correlation          |         1                                         \n'...
'  Slope                |         2                                         \n'...
'                                                                           \n'...
'  See also MeasureObjectIntensity, MeasureImageIntensity.                  \n'...
]);

ToolHelp{52} = MeasureCorrelationHelp;

MeasureImageAreaOccupiedHelp = sprintf([...
'  Help for the Measure Image Area Occupied module:                         \n'...
'  Category: Measurement                                                    \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Measures total area covered by stain in an image.                        \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module simply measures the total area covered by stain in an        \n'...
'  image, using a threshold to determine stain vs background.               \n'...
'                                                                           \n'...
'  How it works:                                                            \n'...
'  This module applies a threshold to the incoming image so that any pixels \n'...
'  brighter than the specified value are assigned the value 1 (white) and   \n'...
'  the remaining pixels are assigned the value zero (black), producing a    \n'...
'  binary image. The number of white pixels are then counted. This provides \n'...
'  a measurement of the area occupied by the staining.                      \n'...
'                                                                           \n'...
'  Features measured:      Feature Number:                                  \n'...
'  AreaOccupied        |        1                                           \n'...
'  TotalImageArea      |        2                                           \n'...
'  ThresholdUsed       |        3                                           \n'...
'                                                                           \n'...
'  (Note: to use with Calculate modules, the "category of measures you would\n'...
'  like to use" should be entered as: AreaOccupied_Name, where Name is the  \n'...
'  name you entered in the MeasureAreaOccupied module.)                     \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  * Select automatic thresholding method:                                  \n'...
'     The threshold affects the stringency of the lines between the         \n'...
'  objects and the background. You can have the threshold automatically     \n'...
'  calculated using several methods, or you can enter an absolute number    \n'...
'  between 0 and 1 for the threshold (to see the pixel intensities for your \n'...
'  images in the appropriate range of 0 to 1, use the CellProfiler Image    \n'...
'  Tool, ''''Show Or Hide Pixel Data'''', in a window showing your image).        \n'...
'  There are advantages either way.  An absolute number treats every        \n'...
'  image identically, but is not robust to slight changes in                \n'...
'  lighting/staining conditions between images. An automatically            \n'...
'  calculated threshold adapts to changes in lighting/staining              \n'...
'  conditions between images and is usually more robust/accurate, but       \n'...
'  it can occasionally produce a poor threshold for unusual/artifactual     \n'...
'  images. It also takes a short time to calculate.                         \n'...
'     The threshold which is used for each image is recorded as a           \n'...
'  measurement in the output file, so if you find unusual measurements      \n'...
'  from one of your images, you might check whether the automatically       \n'...
'  calculated threshold was unusually high or low compared to the           \n'...
'  other images.                                                            \n'...
'     There are four methods for finding thresholds automatically, Otsu''''s   \n'...
'  method, the Mixture of Gaussian (MoG) method, the Background method, and \n'...
'  the Ridler-Calvard method. The Otsu method uses our version of the Matlab\n'...
'  function graythresh (the code is in the CellProfiler subfunction         \n'...
'  CPthreshold). Our modifications include taking into account the max and  \n'...
'  min values in the image and log-transforming the image prior to          \n'...
'  calculating the threshold. Otsu''''s method is probably better if you don''''t \n'...
'  know anything about the image, or if the percent of the image covered by \n'...
'  objects varies substantially from image to image. But if you know the    \n'...
'  object coverage percentage and it does not vary much from image to image,\n'...
'  the MoG can be better, especially if the coverage percentage is not near \n'...
'  50%%. Note, however, that the MoG function is experimental and has not    \n'...
'  been thoroughly validated. The background function is very simple and is \n'...
'  appropriate for images in which most of the image is background. It finds\n'...
'  the mode of the histogram of the image, which is assumed to be the       \n'...
'  background of the image, and chooses a threshold at twice that value     \n'...
'  (which you can adjust with a Threshold Correction Factor, see below).    \n'...
'  This can be very helpful, for example, if your images vary in overall    \n'...
'  brightness but the objects of interest are always twice (or actually, any\n'...
'  constant) as bright as the background of the image. The Ridler-Calvard   \n'...
'  method is simple and its results are often very similar to Otsu''''s. It    \n'...
'  chooses and initial threshold, and then iteratively calculates the next  \n'...
'  one by taking the mean of the average intensities of the background and  \n'...
'  foreground pixels determined by the first threshold, repeating this until\n'...
'  the threshold converges.                                                 \n'...
'                                                                           \n'...
'  * Threshold correction factor:                                           \n'...
'  When the threshold is calculated automatically, it may consistently be   \n'...
'  too stringent or too lenient. You may need to enter an adjustment factor \n'...
'  which you empirically determine is suitable for your images. The number 1\n'...
'  means no adjustment, 0 to 1 makes the threshold more lenient and greater \n'...
'  than 1 (e.g. 1.3) makes the threshold more stringent. For example, the   \n'...
'  Otsu automatic thresholding inherently assumes that 50%% of the image is  \n'...
'  covered by objects. If a larger percentage of the image is covered, the  \n'...
'  Otsu method will give a slightly biased threshold that may have to be    \n'...
'  corrected using a threshold correction factor.                           \n'...
'                                                                           \n'...
'  * Lower and upper bounds on threshold:                                   \n'...
'  Can be used as a safety precaution when the threshold is calculated      \n'...
'  automatically. For example, if there are no objects in the field of view,\n'...
'  the automatic threshold will be unreasonably low. In such cases, the     \n'...
'  lower bound you enter here will override the automatic threshold.        \n'...
'                                                                           \n'...
'  * Approximate percentage of image covered by objects:                    \n'...
'  An estimate of how much of the image is covered with objects. This       \n'...
'  information is currently only used in the MoG (Mixture of Gaussian)      \n'...
'  thresholding but may be used for other thresholding methods in the       \n'...
'  future.                                                                  \n'...
'                                                                           \n'...
'  See also IdentifyPrimAutomatic, IdentifyPrimManual, and                  \n'...
'  MeasureObjectAreaShape modules.                                          \n'...
]);

ToolHelp{53} = MeasureImageAreaOccupiedHelp;

MeasureImageGranularityHelp = sprintf([...
'  Help for the Measure Image Granularity module:                           \n'...
'  Category: Measurement                                                    \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  This module measures the image granularity as described by Ilya Ravkin.  \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Image granularity can be useful to measure particular assays.            \n'...
'                                                                           \n'...
'  Features measured:      Feature Number:                                  \n'...
'  GS1                 |        1                                           \n'...
'  GS2                 |        2                                           \n'...
'  GS3                 |        3                                           \n'...
'  GS4                 |        4                                           \n'...
'  GS5                 |        5                                           \n'...
'  GS6                 |        6                                           \n'...
'  GS7                 |        7                                           \n'...
'  GS8                 |        8                                           \n'...
'  GS9                 |        9                                           \n'...
'  GS10                |        10                                          \n'...
'  GS11                |        11                                          \n'...
'  GS12                |        12                                          \n'...
'  GS13                |        13                                          \n'...
'  GS14                |        14                                          \n'...
'  GS15                |        15                                          \n'...
'  GS16                |        16                                          \n'...
'                                                                           \n'...
'                                                                           \n'...
'  Subsample Size:                                                          \n'...
'  Subsampling of the image for background removal, given as fraction       \n'...
'                                                                           \n'...
'  Structuring Element Size:                                                \n'...
'  Radius of structuring element (in subsampled image)                      \n'...
'                                                                           \n'...
'  References for Granular Spectrum:                                        \n'...
'  J.Serra, Image Analysis and Mathematical Morphology, Vol. 1. Academic    \n'...
'  Press, London, 1989 Maragos,P. "Pattern spectrum and multiscale shape    \n'...
'  representation", IEEE Transactions on Pattern Analysis and Machine       \n'...
'  Intelligence, 11, N 7, pp. 701-716, 1989                                 \n'...
'                                                                           \n'...
'  L.Vincent "Granulometries and Opening Trees", Fundamenta Informaticae,   \n'...
'  41, No. 1-2, pp. 57-90, IOS Press, 2000.                                 \n'...
'                                                                           \n'...
'  L.Vincent "Morphological Area Opening and Closing for Grayscale Images", \n'...
'  Proc. NATO Shape in Picture Workshop, Driebergen, The Netherlands, pp.   \n'...
'  197-208, 1992.                                                           \n'...
'                                                                           \n'...
'  I.Ravkin, V.Temov "Bit representation techniques and image processing",  \n'...
'  Applied Informatics, v.14, pp. 41-90, Finances and Statistics, Moskow,   \n'...
'  1988 (in Russian)                                                        \n'...
]);

ToolHelp{54} = MeasureImageGranularityHelp;

MeasureImageIntensityHelp = sprintf([...
'  Help for the Measure Image Intensity module:                             \n'...
'  Category: Measurement                                                    \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Measures the total image intensity by summing every pixel''''s intensity,   \n'...
'  but can discard some pixel values if desired.                            \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module will sum all pixel values to measure the total image         \n'...
'  intensity. The user can also choose to ignore pixels below or above a    \n'...
'  particular intensity level.                                              \n'...
'                                                                           \n'...
'  Features measured:      Feature Number:                                  \n'...
'  TotalIntensity       |         1                                         \n'...
'  MeanIntensity        |         2                                         \n'...
'  TotalArea            |         3                                         \n'...
'                                                                           \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  You may tell the module to ignore pixels above or below a pixel intensity\n'...
'  value that you specify, in the range 0 to 1 (use the CellProfiler image  \n'...
'  tool ''''ShowOrHidePixelData'''' to see the pixel intensities for your images  \n'...
'  in the appropriate range of 0 to 1). Leaving these values at 0 and 1     \n'...
'  means that every pixel intensity will be included in the measurement.    \n'...
'  This setting is useful to adjust when you are attempting to exclude      \n'...
'  bright artifactual objects: you can first set the threshold to exclude   \n'...
'  these bright objects, but it may also be desirable to expand the         \n'...
'  thresholded region around those bright objects by a certain distance so  \n'...
'  as to avoid a ''''halo'''' effect.                                             \n'...
'                                                                           \n'...
'  For publication purposes, it is important to note that the units of      \n'...
'  intensity from microscopy images are usually described as "Intensity     \n'...
'  units" or "Arbitrary intensity units" since microscopes are not          \n'...
'  callibrated to an absolute scale. Also, it is important to note whether  \n'...
'  you are reporting either the mean or the total intensity, so specify     \n'...
'  "Mean intensity units" or "Total intensity units" accordingly.           \n'...
'                                                                           \n'...
'  See also MeasureObjectIntensity.                                         \n'...
'                                                                           \n'...
'  CellProfiler is distributed under the GNU General Public License.        \n'...
'  See the accompanying file LICENSE for details.                           \n'...
'                                                                           \n'...
'  Developed by the Whitehead Institute for Biomedical Research.            \n'...
'  Copyright 2003,2004,2005.                                                \n'...
'                                                                           \n'...
'  Please see the AUTHORS file for credits.                                 \n'...
'                                                                           \n'...
'  Website: http://www.cellprofiler.org                                     \n'...
'                                                                           \n'...
'  $Revision: 7502 $                                                        \n'...
]);

ToolHelp{55} = MeasureImageIntensityHelp;

MeasureImageQualityHelp = sprintf([...
'  Help for the Measure Image Quality module:                                   \n'...
'  Category: Measurement                                                        \n'...
'                                                                               \n'...
'  SHORT DESCRIPTION:                                                           \n'...
'  Measures the percentage of pixels in the image that are saturated and        \n'...
'  measures blur (poor focus).                                                  \n'...
'  *************************************************************************    \n'...
'                                                                               \n'...
'  This module replaces the module previously known as Image Saturation and     \n'...
'  Blur.                                                                        \n'...
'                                                                               \n'...
'  Features measured:      Feature Number:                                      \n'...
'  FocusScore           |         1                                             \n'...
'  LocalFocusScore      |         2                                             \n'...
'  WindowSize           |         3                                             \n'...
'  PercentSaturation    |         4                                             \n'...
'  PercentMaximal       |         5                                             \n'...
'                                                                               \n'...
'  In addition, an OrigThreshold value is added to the Image measurements       \n'...
'  under the MeasureImageQuality category.                                      \n'...
'                                                                               \n'...
'  Lastly, the following measurements are placed in the Experiment category:    \n'...
'  MeanThreshold                                                                \n'...
'  MedianThreshold                                                              \n'...
'  StdevThreshold                                                               \n'...
'                                                                               \n'...
'  Please note that these Experiment measurements are calculated once the       \n'...
'  pipeline has run through all of the cycles consecutively. It will not        \n'...
'  produce a result for a batch run, since the cycles are processed             \n'...
'  independently from each other.                                               \n'...
'                                                                               \n'...
'  The percentage of pixels that are saturated is calculated and stored as a    \n'...
'  measurement in the output file. ''''Saturated'''' means that the pixel''''s           \n'...
'  intensity value is equal to the maximum possible intensity value for that    \n'...
'  image type.                                                                  \n'...
'                                                                               \n'...
'  Because the saturated pixels may not reach to the maximum possible           \n'...
'  intensity value of the image type for some reasons such as CCDs saturate     \n'...
'  before 255 in graylevel, we also calculate the percentage of the maximal     \n'...
'  intensity value.  Even though we may capture the maximal intensity           \n'...
'  percentage of ''''dark'''' images, the maximal percentage is mostly very minimal or\n'...
'  ignorable. So, PercentMaximal is another good indicator for saturation       \n'...
'  detection.                                                                   \n'...
'                                                                               \n'...
'  The module can also measure blur by calculating a focus score (higher =      \n'...
'  better focus). This calculation takes much longer than the saturation        \n'...
'  checking, so it is optional. We are calculating the focus using the          \n'...
'  normalized variance. We used this algorithm because it was ranked best in    \n'...
'  this paper:                                                                  \n'...
'  Sun, Y., Duthaler, S., Nelson, B. "Autofocusing in Computer Microscopy:      \n'...
'     Selecting the optimals focus algorithm." Microscopy Research and          \n'...
'     Technique 65:139-149 (2004)                                               \n'...
'                                                                               \n'...
'  The calculation of the focus score is as follows:                            \n'...
'  [m,n] = size(Image);                                                         \n'...
'  MeanImageValue = mean(Image(:));                                             \n'...
'  SquaredNormalizedImage = (Image-MeanImageValue).^2;                          \n'...
'  FocusScore{ImageNumber} = ...                                                \n'...
'     sum(SquaredNormalizedImage(:))/(m*n*MeanImageValue);                      \n'...
'                                                                               \n'...
'  The above score is to measure a relative score given a focus setting of      \n'...
'  a certain microscope. Using this, one can calibrrate the microscope''''s        \n'...
'  focus setting. However it doesn''''t necessarily tell you how well an image     \n'...
'  was focused when taken. That means these scores obtained from many different \n'...
'  images probably taken in different situations and with different cell        \n'...
'  contents can not be used for focus comparison.                               \n'...
'                                                                               \n'...
'  The LocalFocusScore is a local version of the original FocusScore.           \n'...
'  LocalFocusScore was just named after the original one to be consistent       \n'...
'  with naming. Note that these focus scores do not necessarily                 \n'...
'  represent the qualities of focusing between different images.                \n'...
'  LocalFocusScore was added to differentiate good segmentation and bad         \n'...
'  segmentation images in the cases when bad segmentation images usually        \n'...
'  contain no cell objects with high background noise.                          \n'...
'                                                                               \n'...
'  Example Output:                                                              \n'...
'                                                                               \n'...
'  Percent of pixels that are Saturated:                                        \n'...
'  RescaledOrig:     0.002763                                                   \n'...
'                                                                               \n'...
'  Percent of pixels that are in the Maximal                                    \n'...
'  Intensity:                                                                   \n'...
'  RescaledOrig:     0.0002763                                                  \n'...
'                                                                               \n'...
'                                                                               \n'...
'  Focus Score:                                                                 \n'...
'  RescaledOrig: 0.016144                                                       \n'...
'                                                                               \n'...
'  Suggested Threshold:                                                         \n'...
'  Orig: 0.0022854                                                              \n'...
'                                                                               \n'...
'  CellProfiler is distributed under the GNU General Public License.            \n'...
'  See the accompanying file LICENSE for details.                               \n'...
'                                                                               \n'...
'  Developed by the Whitehead Institute for Biomedical Research.                \n'...
'  Copyright 2003--2008.                                                        \n'...
'                                                                               \n'...
'  Please see the AUTHORS file for credits.                                     \n'...
'                                                                               \n'...
'  Website: http://www.cellprofiler.org                                         \n'...
'                                                                               \n'...
'  $Revision: 7502 $                                                            \n'...
]);

ToolHelp{56} = MeasureImageQualityHelp;

MeasureObjectAreaShapeHelp = sprintf([...
'  Help for the Measure Object Area Shape module:                              \n'...
'  Category: Measurement                                                       \n'...
'                                                                              \n'...
'  SHORT DESCRIPTION:                                                          \n'...
'  Measures several area and shape features of identified objects.             \n'...
'  *************************************************************************   \n'...
'                                                                              \n'...
'  Given an image with objects identified (e.g. nuclei or cells), this         \n'...
'  module extracts area and shape features of each object. Note that these     \n'...
'  features are only reliable for objects that are completely inside the       \n'...
'  image borders, so you may wish to exclude objects touching the edge of      \n'...
'  the image in Identify modules.                                              \n'...
'                                                                              \n'...
'  Basic shape features:     Feature Number:                                   \n'...
'                                                                              \n'...
'  Zernike shape features measure shape by describing a binary object (or      \n'...
'  more precisely, a patch with background and an object in the center) in a   \n'...
'  basis of Zernike polynomials, using the coefficients as features (Boland    \n'...
'  et al., 1998). Currently, Zernike polynomials from order 0 to order 9 are   \n'...
'  calculated, giving in total 30 measurements. While there is no limit to     \n'...
'  the order which can be calculated (and indeed users could add more by       \n'...
'  adjusting the code), the higher order polynomials carry less information.   \n'...
'                                                                              \n'...
'  Details about how measurements are calculated:                              \n'...
'  This module retrieves objects in label matrix format and measures them.     \n'...
'  The label matrix image should be "compacted": that is, each number should   \n'...
'  correspond to an object, with no numbers skipped. So, if some objects       \n'...
'  were discarded from the label matrix image, the image should be converted   \n'...
'  to binary and re-made into a label matrix image before feeding into this    \n'...
'  module.                                                                     \n'...
'                                                                              \n'...
'  The following measurements are extracted using the Matlab regionprops.m     \n'...
'  function:                                                                   \n'...
'  *Area - Computed from the the actual number of pixels in the region.        \n'...
'  *Eccentricity - Also known as elongation or elongatedness. For an ellipse   \n'...
'  that has the same second-moments as the object, the eccentricity is the     \n'...
'  ratio of the between-foci distance and the major axis length. The value     \n'...
'  is between 0 (a circle) and 1 (a line segment).                             \n'...
'  *Solidity - Also known as convexity. The proportion of the pixels in the    \n'...
'  convex hull that are also in the object. Computed as Area/ConvexArea.       \n'...
'  *Extent - The proportion of the pixels in the bounding box that are also    \n'...
'  in the region. Computed as the Area divided by the area of the bounding box.\n'...
'  *EulerNumber - Equal to the number of objects in the image minus the        \n'...
'  number of holes in those objects. For modules built to date, the number     \n'...
'  of objects in the image is always 1.                                        \n'...
'  *MajorAxisLength - The length (in pixels) of the major axis of the          \n'...
'  ellipse that has the same normalized second central moments as the          \n'...
'  region.                                                                     \n'...
'  *MinorAxisLength - The length (in pixels) of the minor axis of the          \n'...
'  ellipse that has the same normalized second central moments as the          \n'...
'  region.                                                                     \n'...
'  *Perimeter - the total number of pixels around the boundary of each         \n'...
'  region in the image.                                                        \n'...
'                                                                              \n'...
'  In addition, the following feature is calculated:                           \n'...
'                                                                              \n'...
'  FormFactor = 4*pi*Area/Perimeter^2, equals 1 for a perfectly circular       \n'...
'  object%%                                                                     \n'...
'                                                                              \n'...
'  HERE IS MORE DETAILED INFORMATION ABOUT THE MEASUREMENTS FOR YOUR           \n'...
'  REFERENCE                                                                   \n'...
'                                                                              \n'...
'  ''''Area'''' ? Scalar; the actual number of pixels in the region. (This value     \n'...
'  might differ slightly from the value returned by bwarea, which weights      \n'...
'  different patterns of pixels differently.)                                  \n'...
'                                                                              \n'...
'  ''''Eccentricity'''' ? Scalar; the eccentricity of the ellipse that has the       \n'...
'  same second-moments as the region. The eccentricity is the ratio of the     \n'...
'  distance between the foci of the ellipse and its major axis length. The     \n'...
'  value is between 0 and 1. (0 and 1 are degenerate cases; an ellipse whose   \n'...
'  eccentricity is 0 is actually a circle, while an ellipse whose eccentricity \n'...
'  is 1 is a line segment.) This property is supported only for 2-D input      \n'...
'  label matrices.                                                             \n'...
'                                                                              \n'...
'  ''''Solidity'''' -? Scalar; the proportion of the pixels in the convex hull that  \n'...
'  are also in the region. Computed as Area/ConvexArea. This property is       \n'...
'  supported only for 2-D input label matrices.                                \n'...
'                                                                              \n'...
'  ''''Extent'''' ? Scalar; the proportion of the pixels in the bounding box that    \n'...
'  are also in the region. Computed as the Area divided by the area of the     \n'...
'  bounding box. This property is supported only for 2-D input label matrices. \n'...
'                                                                              \n'...
'  ''''EulerNumber'''' ? Scalar; equal to the number of objects in the region        \n'...
'  minus the number of holes in those objects. This property is supported      \n'...
'  only for 2-D input label matrices. regionprops uses 8-connectivity to       \n'...
'  compute the EulerNumber measurement. To learn more about connectivity,      \n'...
'  see Pixel Connectivity.                                                     \n'...
'                                                                              \n'...
'  ''''perimeter'''' ? p-element vector containing the distance around the boundary  \n'...
'  of each contiguous region in the image, where p is the number of regions.   \n'...
'  regionprops computes the perimeter by calculating the distance between      \n'...
'  each adjoining pair of pixels around the border of the region. If the       \n'...
'  image contains discontiguous regions, regionprops returns unexpected        \n'...
'  results. The following figure shows the pixels included in the perimeter    \n'...
'  calculation for this object                                                 \n'...
'                                                                              \n'...
'  ''''MajorAxisLength'''' ? Scalar; the length (in pixels) of the major axis of     \n'...
'  the ellipse that has the same normalized second central moments as the      \n'...
'  region. This property is supported only for 2-D input label matrices.       \n'...
'                                                                              \n'...
'  ''''MinorAxisLength'''' ? Scalar; the length (in pixels) of the minor axis of     \n'...
'  the ellipse that has the same normalized second central moments as the      \n'...
'  region. This property is supported only for 2-D input label matrices.       \n'...
'                                                                              \n'...
'  ''''Orientation'''' ? Scalar; the angle (in degrees ranging from -90 to 90        \n'...
'  degrees) between the x-axis and the major axis of the ellipse that has the  \n'...
'  same second-moments as the region. This property is supported only for      \n'...
'  2-D input label matrices.                                                   \n'...
'                                                                              \n'...
'  See also MeasureImageAreaOccupied.                                          \n'...
]);

ToolHelp{57} = MeasureObjectAreaShapeHelp;

MeasureObjectIntensityHelp = sprintf([...
'  Help for the Measure Object Intensity module:                            \n'...
'  Category: Measurement                                                    \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Measures several intensity features for identified objects.              \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Given an image with objects identified (e.g. nuclei or cells), this      \n'...
'  module extracts intensity features for each object based on a            \n'...
'  corresponding grayscale image. Measurements are recorded for each object.\n'...
'                                                                           \n'...
'  Features measured:       Feature Number:                                 \n'...
'  IntegratedIntensity     |       1                                        \n'...
'  MeanIntensity           |       2                                        \n'...
'  StdIntensity            |       3                                        \n'...
'  MinIntensity            |       4                                        \n'...
'  MaxIntensity            |       5                                        \n'...
'  IntegratedIntensityEdge |       6                                        \n'...
'  MeanIntensityEdge       |       7                                        \n'...
'  StdIntensityEdge        |       8                                        \n'...
'  MinIntensityEdge        |       9                                        \n'...
'  MaxIntensityEdge        |      10                                        \n'...
'  MassDisplacement        |      11                                        \n'...
'  LowerQuartileIntensity  |      12                                        \n'...
'  MedianIntensity         |      13                                        \n'...
'  UpperQuartileIntensity  |      14                                        \n'...
'                                                                           \n'...
'  How it works:                                                            \n'...
'  Retrieves objects in label matrix format and a corresponding original    \n'...
'  grayscale image and makes measurements of the objects. The label matrix  \n'...
'  image should be "compacted": that is, each number should correspond to an\n'...
'  object, with no numbers skipped. So, if some objects were discarded from \n'...
'  the label matrix image, the image should be converted to binary and      \n'...
'  re-made into a label matrix image before feeding it to this module.      \n'...
'                                                                           \n'...
'  Intensity Measurement descriptions:                                      \n'...
'                                                                           \n'...
'  * IntegratedIntensity - The sum of the pixel intensities within an       \n'...
'  object.                                                                  \n'...
'  * MeanIntensity - The average pixel intensity within an object.          \n'...
'  * StdIntensity - The standard deviation of the pixel intensities within  \n'...
'  an object.                                                               \n'...
'  * MaxIntensity - The maximal pixel intensity within an object.           \n'...
'  * MinIntensity - The minimal pixel intensity within an object.           \n'...
'  * IntegratedIntensityEdge - The sum of the edge pixel intensities of an  \n'...
'  object.                                                                  \n'...
'  * MeanIntensityEdge - The average edge pixel intensity of an object.     \n'...
'  * StdIntensityEdge - The standard deviation of the edge pixel intensities\n'...
'  of an object.                                                            \n'...
'  * MaxIntensityEdge - The maximal edge pixel intensity of an object.      \n'...
'  * MinIntensityEdge - The minimal edge pixel intensity of an object.      \n'...
'  * MassDisplacement - The distance between the centers of gravity in the  \n'...
'  gray-level representation of the object and the binary representation of \n'...
'  the object.                                                              \n'...
'  * LowerQuartileIntensity - the intensity value of the pixel for which 25%%\n'...
'  of the pixels in the object have lower values.                           \n'...
'  * MedianIntensity - the median intensity value within the object         \n'...
'  * UpperQuartileIntensity - the intensity value of the pixel for which 75%%\n'...
'  of the pixels in the object have lower values.                           \n'...
'                                                                           \n'...
'  For publication purposes, it is important to note that the units of      \n'...
'  intensity from microscopy images are usually described as "Intensity     \n'...
'  units" or "Arbitrary intensity units" since microscopes are not          \n'...
'  callibrated to an absolute scale. Also, it is important to note whether  \n'...
'  you are reporting either the mean or the integrated intensity, so specify\n'...
'  "Mean intensity units" or "Integrated intensity units" accordingly.      \n'...
'                                                                           \n'...
'  See also MeasureImageIntensity.                                          \n'...
]);

ToolHelp{58} = MeasureObjectIntensityHelp;

MeasureObjectNeighborsHelp = sprintf([...
'  Help for the Measure Object Neighbors module:                            \n'...
'  Category: Measurement                                                    \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Calculates how many neighbors each object has.                           \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Given an image with objects identified (e.g. nuclei or cells), this      \n'...
'  module determines how many neighbors each object has. The user selects   \n'...
'  the distance within which objects should be considered neighbors. The    \n'...
'  module can measure the number of neighbors each object has if every      \n'...
'  object were expanded up until the point where it hits another object; to \n'...
'  use this option, enter 0 (the number zero) for the pixel distance. If you\n'...
'  want your objects to be touching before you count neighbors (for         \n'...
'  instance, in an image of tissue), use the ExpandOrShrink module to expand\n'...
'  your objects beforehand.                                                 \n'...
'                                                                           \n'...
'  Features measured:      Feature Number:                                  \n'...
'  NumberOfNeighbors         |    1                                         \n'...
'  PercentTouching           |    2                                         \n'...
'  FirstClosestObjectNumber  |    3                                         \n'...
'  FirstClosestXVector       |    4                                         \n'...
'  FirstClosestYVector       |    5                                         \n'...
'  SecondClosestObjectNumber |    6                                         \n'...
'  SecondClosestXVector      |    7                                         \n'...
'  SecondClosestYVector      |    8                                         \n'...
'  AngleBetweenNeighbors     |    9                                         \n'...
'                                                                           \n'...
'  How it works: Retrieves objects in label matrix format. The objects      \n'...
'  are expanded by the number of pixels the user specifies, and then        \n'...
'  the module counts up how many other objects the object is                \n'...
'  overlapping.  PercentTouching, if computed, is defined as the number     \n'...
'  of boundary pixels on an object not obscured when other objects are      \n'...
'  dilated by the Neighbor distance limit (or 2 pixels if this distance     \n'...
'  is set to 0 for the maximum expansion option detailed above).            \n'...
'                                                                           \n'...
'  Interpreting the module output:                                          \n'...
'  In the color image output of the module, there is a color spectrum used  \n'...
'  to determine which objects have neighbors, and how many. According to the\n'...
'  indices on the spectrum, the background is -1, objects with no neighbors \n'...
'  are 0, and objects with neighbors are greater than 0, with the increasing\n'...
'  index corresponding to more neighbors.                                   \n'...
'                                                                           \n'...
'  Note that the identity of neighbors for each object is saved in the      \n'...
'  output file but that the structure of that data makes it incompatible    \n'...
'  with CellProfiler''''s export functions. To access this data, you will have \n'...
'  to use MATLAB.                                                           \n'...
'                                                                           \n'...
'  Saving the objects:                                                      \n'...
'  * You can save the objects colored by number of neighbors to the handles \n'...
'  structure to be used in other modules. Here, the scalar value 1 is added \n'...
'  to every pixel so that the background is zero and the objects range from \n'...
'  1 up to the highest number of neighbors, plus one. This makes the objects\n'...
'  compatible with the Convert To Image module.                             \n'...
'                                                                           \n'...
'  Saving the image:                                                        \n'...
'  * You can save the grayscale image of objects to the handles structure so\n'...
'  it can be saved to the hard drive. Here, the background is -1, and the   \n'...
'  objects range from 0 (if it has no neighbors) up to the highest number of\n'...
'  neighbors. The -1 value makes it incompatible with the Convert To Image  \n'...
'  module which expects a label matrix starting at zero.                    \n'...
'                                                                           \n'...
]);

ToolHelp{59} = MeasureObjectNeighborsHelp;

MeasureRadialDistributionHelp = sprintf([...
'  Help for the Measure Radial Distribution module:                         \n'...
'  Category: Measurement                                                    \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Measures radial distribution of one or more proteins within a cell.      \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Given an image with objects identified, this module measures the         \n'...
'  intensity distribution from the center of those objects to their         \n'...
'  boundary within a user-controlled number of bins, for each object.       \n'...
'                                                                           \n'...
'  The distribution can be measured within a single identified object,      \n'...
'  in which case it is relative to the "center" of the object (as           \n'...
'  defined as the point farthest from the boundary), or another object      \n'...
'  can be used as the center, an example of which would be using Nuclei     \n'...
'  for centers within Cells.                                                \n'...
'                                                                           \n'...
'  Three features are measured for each object:                             \n'...
'  - Fraction of total stain in an object at a given radius.                \n'...
'  - Mean fractional intensity at a given radius (Fraction of total         \n'...
'     intenstiy normalized by fraction of pixels at a given radius).        \n'...
'  - Coefficient of variation of intensity within a ring, calculated        \n'...
'    over 8 slices.                                                         \n'...
'                                                                           \n'...
'  Features measured:      Feature Number:                                  \n'...
'  FracAtD               |    1                                             \n'...
'  MeanFrac              |    2                                             \n'...
'  RadialCV              |    3                                             \n'...
'                                                                           \n'...
'  CellProfiler is distributed under the GNU General Public License.        \n'...
'  See the accompanying file LICENSE for details.                           \n'...
'                                                                           \n'...
'  Developed by the Whitehead Institute for Biomedical Research.            \n'...
'  Copyright 2003,2004,2005.                                                \n'...
'                                                                           \n'...
'  Please see the AUTHORS file for credits.                                 \n'...
'                                                                           \n'...
'  Website: http://www.cellprofiler.org                                     \n'...
'                                                                           \n'...
'  $Revision: 7477 $                                                        \n'...
]);

ToolHelp{60} = MeasureRadialDistributionHelp;

MeasureTextureHelp = sprintf([...
'  Help for the Measure Texture module:                                     \n'...
'  Category: Measurement                                                    \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Measures several texture features for identified objects or for entire   \n'...
'  images.                                                                  \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Given an image with objects identified (e.g. nuclei or cells), this      \n'...
'  module extracts texture features for each object based on a corresponding\n'...
'  grayscale image. Measurements are recorded for each object. If "Image" is\n'...
'  chosen, the texture of the image overall is measured.                    \n'...
'                                                                           \n'...
'  How it works:                                                            \n'...
'  Retrieves objects in label matrix format and a corresponding original    \n'...
'  grayscale image and makes measurements of the objects. The label matrix  \n'...
'  image should be "compacted": that is, each number should correspond to an\n'...
'  object, with no numbers skipped. So, if some objects were discarded from \n'...
'  the label matrix image, the image should be converted to binary and      \n'...
'  re-made into a label matrix image before feeding into this module.       \n'...
'                                                                           \n'...
'  The scale of texture measured is chosen by the user, in pixel units. A   \n'...
'  higher number for the scale of texture measures larger patterns of       \n'...
'  texture whereas smaller numbers measure more localized patterns of       \n'...
'  texture. It is best to measure texture on a scale smaller than your      \n'...
'  objects'''' sizes, so be sure that the value entered for scale of texture is\n'...
'  smaller than most of your objects. For very small objects (smaller than  \n'...
'  the scale of texture you are measuring), the texture cannot be measured  \n'...
'  and will result in a value of NaN (Not a Number) in the output file.     \n'...
'                                                                           \n'...
'  Note that texture measurements are affected by the overall intensity of  \n'...
'  the object (or image). For example, if Image1 = Image2 + 0.2, then the   \n'...
'  texture measurements should be the same for Image1 and Image2. However,  \n'...
'  if the images are scaled differently, for example Image1 = 0.9*Image2,   \n'...
'  then this will be reflected in the texture measurements, and they will be\n'...
'  different. For example, in the extreme case of Image1 = 0*Image2 it is   \n'...
'  obvious that the texture measurements must be different. To make the     \n'...
'  measurements useful (both intensity, texture, etc.), it must be ensured  \n'...
'  that the images are scaled similarly. In other words, if differences in  \n'...
'  intensity are seen between two images or objects, the differences in     \n'...
'  texture cannot be trusted as being completely independent of the         \n'...
'  intensity difference.                                                    \n'...
'                                                                           \n'...
'  Features measured:      Feature Number:                                  \n'...
'  AngularSecondMoment     |       1                                        \n'...
'  Contrast                |       2                                        \n'...
'  Correlation             |       3                                        \n'...
'  Variance                |       4                                        \n'...
'  InverseDifferenceMoment |       5                                        \n'...
'  SumAverage              |       6                                        \n'...
'  SumVariance             |       7                                        \n'...
'  SumEntropy              |       8                                        \n'...
'  Entropy                 |       9                                        \n'...
'  DifferenceVariance      |      10                                        \n'...
'  DifferenceEntropy       |      11                                        \n'...
'  InfoMeas                |      12                                        \n'...
'  InfoMeas2               |      13                                        \n'...
'  GaborX                  |      14                                        \n'...
'  GaborY                  |      15                                        \n'...
'                                                                           \n'...
'  Texture Measurement descriptions:                                        \n'...
'                                                                           \n'...
'  Haralick Features:                                                       \n'...
'  Haralick texture features are derived from the co-occurrence matrix,     \n'...
'  which contains information about how image intensities in pixels with a  \n'...
'  certain position in relation to each other occur together. For example,  \n'...
'  how often does a pixel with intensity 0.12 have a neighbor 2 pixels to   \n'...
'  the right with intensity 0.15? The current implementation in CellProfiler\n'...
'  uses a shift of 1 pixel to the right for calculating the co-occurence    \n'...
'  matrix. A different set of measurements is obtained for larger shifts,   \n'...
'  measuring texture on a larger scale. The original reference for the      \n'...
'  Haralick features is Haralick et al. (1973) Textural Features for Image  \n'...
'  Classification. IEEE Transaction on Systems Man, Cybernetics,            \n'...
'  SMC-3(6):610-621, where 14 features are described:                       \n'...
'  H1. Angular Second Moment                                                \n'...
'  H2. Contrast                                                             \n'...
'  H3. Correlation                                                          \n'...
'  H4. Sum of Squares: Variation                                            \n'...
'  H5. Inverse Difference Moment                                            \n'...
'  H6. Sum Average                                                          \n'...
'  H7. Sum Variance                                                         \n'...
'  H8. Sum Entropy                                                          \n'...
'  H9. Entropy                                                              \n'...
'  H10. Difference Variance                                                 \n'...
'  H11. Difference Entropy                                                  \n'...
'  H12. Information Measure of Correlation 1                                \n'...
'  H13. Information Measure of Correlation 2                                \n'...
'  H14. Max correlation coefficient                                         \n'...
'                                                                           \n'...
'  *H14 is disabled because it is computationally demanding.                \n'...
'                                                                           \n'...
'  Gabor "wavelet" features:                                                \n'...
'  These features are similar to wavelet features, and they are obtained by \n'...
'  applying so-called Gabor filters to the image. The Gabor filters measure \n'...
'  the frequency content in different orientations. They are very similar to\n'...
'  wavelets, and in the current context they work exactly as wavelets, but  \n'...
'  they are not wavelets by a strict mathematical definition. As currently  \n'...
'  implemented, the frequency content of the object is measured along the x-\n'...
'  and y-axis (i.e. in two different orientations). The original reference  \n'...
'  is Gabor, D. (1946). "Theory of communication" Journal of the Institute  \n'...
'  of Electrical Engineers, 93:429-441.                                     \n'...
]);

ToolHelp{61} = MeasureTextureHelp;

MorphHelp = sprintf([...
'  Help for the Morph module:                                                \n'...
'  Category: Image Processing                                                \n'...
'                                                                            \n'...
'  SHORT DESCRIPTION:                                                        \n'...
'  Beta version: provides access to built in Matlab morphological functions. \n'...
'  ************************************************************************* \n'...
'                                                                            \n'...
'  Beta version: provides access to built in Matlab morphological functions. \n'...
'  If you have defined more than one function to be applied, each individual \n'...
'  function is repeated the number of times specified before progressing to  \n'...
'  the next function in the list.                                            \n'...
'                                                                            \n'...
'  Note that these will only operate on binary images                        \n'...
'                                                                            \n'...
'  Settings:                                                                 \n'...
'  The number of times repeated can be ''''Inf'''', which ceases operation when    \n'...
'  the image no longer changes.                                              \n'...
'                                                                            \n'...
'  Beta                                                                      \n'...
]);

ToolHelp{62} = MorphHelp;

OverlayOutlinesHelp = sprintf([...
'  Help for the Overlay Outlines module:                                    \n'...
'  Category: Image Processing                                               \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Places outlines produced by an identify module over a desired image.     \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Outlines (in a special format produced by an identify module) can be     \n'...
'  placed on any desired image (grayscale, color, or blank) and then this   \n'...
'  resulting image can be saved using the SaveImages module.                \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'  Would you like to set the intensity (brightness) of the outlines to be   \n'...
'  the same as the brightest point in the image, or the maximum possible    \n'...
'  value for this image format?                                             \n'...
'                                                                           \n'...
'  If your image is quite dim, then putting bright white lines onto it may  \n'...
'  not be useful. It may be preferable to make the outlines equal to the    \n'...
'  maximal brightness already occurring in the image.                       \n'...
'                                                                           \n'...
'  If you choose to display outlines on a Blank image, the maximum intensity\n'...
'  will default to ''''Max possible''''.                                          \n'...
'                                                                           \n'...
'  See also identify modules.                                               \n'...
]);

ToolHelp{63} = OverlayOutlinesHelp;

PauseCellProfilerHelp = sprintf([...
'  Help for the PauseCP module:                                             \n'...
'  Category: Other                                                          \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Pauses CellProfiler interactively.                                       \n'...
'  *************************************************************************\n'...
]);

ToolHelp{64} = PauseCellProfilerHelp;

PlaceAdjacentHelp = sprintf([...
'  Help for the Place Adjacent module:                                      \n'...
'  Category: Image Processing                                               \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Places up to six images next to each other, either horizontally or       \n'...
'  vertically, to produce a single image.                                   \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  To place together many images, you can use this module multiple times in \n'...
'  one pipeline.                                                            \n'...
'                                                                           \n'...
'  See also Tile.                                                           \n'...
]);

ToolHelp{65} = PlaceAdjacentHelp;

RelabelObjectsHelp = sprintf([...
'  Help for RelabelObjects module:                                                                  \n'...
'  Category: Object Processing                                                                      \n'...
'                                                                                                   \n'...
'  SHORT DESCRIPTION:                                                                               \n'...
'                                                                                                   \n'...
'  Relabels objects so that objects within a specified distance of each                             \n'...
'  other, or objects with a straight line connecting                                                \n'...
'  their centroids that has a relatively uniform intensity,                                         \n'...
'  get the same label and thereby become the same object.                                           \n'...
'  Optionally, if an object consists of two or more unconnected components, this                    \n'...
'  module can relabel them so that the components become separate objects.                          \n'...
'                                                                                                   \n'...
'  *************************************************************************                        \n'...
'  Relabeling objects changes the labels of the pixels in an object such                            \n'...
'  that it either becomes equal to the label of another (unify) or changes                          \n'...
'  the labels to distinguish two different components of an object such that                        \n'...
'  they are two different objects (Split).                                                          \n'...
'                                                                                                   \n'...
'  If the distance threshold is zero (the default), only                                            \n'...
'  objects that are touching will be unified. Note that selecting "unify" will not connect or bridge\n'...
'  the two objects by adding any new pixels. The new, unified object                                \n'...
'  may consist of two or more unconnected components.                                               \n'...
'                                                                                                   \n'...
'  As an experimental feature, it is possible to specify a grayscale                                \n'...
'  image to help guide the decision of which objects to unify.  When                                \n'...
'  the module considers merging two objects, it looks at the pixels                                 \n'...
'  along the line connecting their centroids in this image.  If the                                 \n'...
'  intensity of any of these pixels is below 90 percent of either                                   \n'...
'  centroid, the objects are not unified.                                                           \n'...
'                                                                                                   \n'...
'  In order to ensure that objects are labeled consecutively (which                                 \n'...
'  other modules depend on), RelabelObjects may change the label (i.e.,                             \n'...
'  the object number) of any object.  A new "measurement" will be added                             \n'...
'  for each input object.  This "measurement" is a number that                                      \n'...
'  indicates the relabeled object number.                                                           \n'...
]);

ToolHelp{66} = RelabelObjectsHelp;

RelateHelp = sprintf([...
'  Help for the Relate module:                                              \n'...
'  Category: Object Processing                                              \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Assigns relationships: All objects (e.g. speckles) within a parent object\n'...
'  (e.g. nucleus) become its children.                                      \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Allows associating "children" objects with "parent" objects. This is     \n'...
'  useful for counting the number of children associated with each parent,  \n'...
'  and for calculating mean measurement values for all children that are    \n'...
'  associated with each parent. For every measurement that has been made of \n'...
'  the children objects upstream in the pipeline, this module calculates the\n'...
'  mean value of that measurement over all children and stores it as a      \n'...
'  measurement for the parent, as "Means_<child>_per_<parent>".             \n'...
'  For this reason, this module should be placed *after* all Measure modules\n'...
'  that make measurements of the children objects.                          \n'...
'                                                                           \n'...
'  An object will be considered a child even if the edge is the only part   \n'...
'  touching a parent object. If an object is touching two parent objects,   \n'...
'  the objects parent will be the higher numbered parent.                   \n'...
'                                                                           \n'...
'  The minimum distances of each child to its parent are also calculated.   \n'...
'  These values are associated with the child objects. If an "Other" object \n'...
'  is defined (e.g. Nuclei), then distances are calculated to this object   \n'...
'  too, as well as normalized distances.  Normalized distances for each     \n'...
'  child have a range [0 1] and are calculated as:                          \n'...
'  (distance to the Parent) / sum(distances to parent and Other object)     \n'...
'                                                                           \n'...
'  To access the Child/Parent label matrix image in downstream modules, use \n'...
'  the "Other..." method to choose your image and type Parent_Child,        \n'...
'  where ''''Parent'''' and ''''Child'''' are the names of the objects as selected in   \n'...
'  Relate''''s first two settings.  For example, if the parent objects are     \n'...
'  "Cytoplasm" and the child objects are "Speckles", then downstream choose \n'...
'  "Cytoplasm_Speckles".                                                    \n'...
'                                                                           \n'...
'  Measurement Categories (each with only one Feature):                     \n'...
'  Parent, Children, SubObjectFlag, Distance, NormDistance                  \n'...
]);

ToolHelp{67} = RelateHelp;

RenameOrRenumberFilesHelp = sprintf([...
'  Help for the Rename Or Renumber Files module:                            \n'...
'  Category: File Processing                                                \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Renames or renumbers files on the hard drive.                            \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This file renaming utility adjusts text within image file names.         \n'...
'  Be very careful with this module because its purpose is to rename (=     \n'...
'  overwrite) files!! You will have the opportunity to confirm the name     \n'...
'  change for the first cycle only. The folder containing the files must not\n'...
'  contain subfolders or the subfolders and their contents will also be     \n'...
'  renamed. It is worth doing a practice run with copies of images first.   \n'...
'                                                                           \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  * How many characters to retain at the beginning and end of each         \n'...
'  filename? These are the characters that will remain unaltered and note   \n'...
'  that all other characters in between will be removed.                    \n'...
'  * The user may choose to add text or numbers between                     \n'...
'  the characters that are to be retained.                                  \n'...
'                                                                           \n'...
'                                                                           \n'...
'  Examples:                                                                \n'...
'                                                                           \n'...
'  Renumber:                                                                \n'...
'  DrosDAPI_1.tif    -> DrosDAPI_001.tif                                    \n'...
'  DrosDAPI_10.tif   -> DrosDAPI_010.tif                                    \n'...
'  DrosDAPI_100.tif  -> DrosDAPI_100.tif                                    \n'...
'  (to accomplish this, retain 4 characters at the end, retain 9 characters \n'...
'  at the beginning, and use 3 numerical digits between).                   \n'...
'                                                                           \n'...
'  Renumbering is especially useful when numbers within image filenames do  \n'...
'  not have a minimum number of digits and thus appear out of order when    \n'...
'  listed in some Unix/Mac OSX systems. For example, on some systems, files \n'...
'  would appear like this and be measured out of expected sequence by       \n'...
'  CellProfiler:                                                            \n'...
'  DrosDAPI_1.tif                                                           \n'...
'  DrosDAPI_10.tif                                                          \n'...
'  DrosDAPI_2.tif                                                           \n'...
'  DrosDAPI_3.tif                                                           \n'...
'  DrosDAPI_4.tif                                                           \n'...
'  ...                                                                      \n'...
'                                                                           \n'...
'  Rename:                                                                  \n'...
'  1DrosophilaDAPI_1.tif    -> 1DrosDP_1.tif                                \n'...
'  2DrosophilaDAPI_10.tif   -> 2DrosDP_10.tif                               \n'...
'  3DrosophilaDAPI_100.tif  -> 3DrosDP_100.tif                              \n'...
'  (to accomplish this, retain 4 characters at the end, retain 5 characters \n'...
'  at the beginning, enter "DP" as text to place between, and leave         \n'...
'  numerical digits as is).                                                 \n'...
]);

ToolHelp{68} = RenameOrRenumberFilesHelp;

RescaleIntensityHelp = sprintf([...
'  Help for the Rescale Intensity module:                                         \n'...
'  Category: Image Processing                                                     \n'...
'                                                                                 \n'...
'  SHORT DESCRIPTION:                                                             \n'...
'  Changes intensity range of an image to desired specifications.                 \n'...
'  *************************************************************************      \n'...
'                                                                                 \n'...
'  The intensity of the incoming images are rescaled by one of several            \n'...
'  methods. This is especially helpful for converting 12-bit images saved in      \n'...
'  16-bit format to the correct range (see method E).                             \n'...
'                                                                                 \n'...
'  Settings:                                                                      \n'...
'                                                                                 \n'...
'  Rescaling method:                                                              \n'...
'  (S) Stretch the image so that the minimum is zero and the maximum is           \n'...
'  one.                                                                           \n'...
'                                                                                 \n'...
'  (E) Enter the minimum and maximum values of the original image and the         \n'...
'  desired resulting image. Pixels are scaled from their user-specified           \n'...
'  original range to a new user-specified range.  If the user enters "AE"         \n'...
'  (Automatic for Each), then the highest and lowest pixel values will be         \n'...
'  Automatically computed for each image by taking the maximum and minimum        \n'...
'  pixel values in each image.  If the user enters "AA" (Automatic for All),      \n'...
'  then the highest and/or lowest pixel values will be Automatically computed     \n'...
'  by taking the maximum and minimum pixel values in all the images in the        \n'...
'  set.                                                                           \n'...
'                                                                                 \n'...
'  The user also has the option of selecting the values that pixels               \n'...
'  outside the original min/max range are set to, by entering numbers in          \n'...
'  the "For pixels above/below the chosen value..." boxes. If you want            \n'...
'  these pixels to be set to the highest/lowest rescaled intensity values,        \n'...
'  enter the same number in these boxes as was entered in the highest/lowest      \n'...
'  rescaled intensity boxes. However, using other values permits a simple form of \n'...
'  thresholding (e.g., setting the upper bounding value to 0 can be used for      \n'...
'  removing bright pixels above a specified value)                                \n'...
'                                                                                 \n'...
'  To convert 12-bit images saved in 16-bit format to the correct                 \n'...
'  range, use the settings 0, 0.0625, 0, 1, 0, 1.  The value 0.0625 is equivalent \n'...
'  to 2^12 divided by 2^16, so it will convert a 16 bit image containing          \n'...
'  only 12 bits of data to the proper range.                                      \n'...
'                                                                                 \n'...
'  (G) Rescale the image so that all pixels are equal to or greater               \n'...
'  than one.                                                                      \n'...
'                                                                                 \n'...
'  (M) Match the maximum of one image to the maximum of another.                  \n'...
'                                                                                 \n'...
'  (C) Convert to 8 bit: Images in CellProfiler are normally stored as            \n'...
'  numerical class double in the range of 0 to 1. This option converts these      \n'...
'  images to class uint8, meaning an 8 bit integer in the range of 0 to 255.      \n'...
'  This is useful to reduce the amount of memory required to store the            \n'...
'  image. Warning: Most CellProfiler modules require the incoming image to        \n'...
'  be in the standard 0 to 1 range, so this conversion may cause downstream       \n'...
'  modules to behave unexpectedly.                                                \n'...
'                                                                                 \n'...
'  (T) Text: rescale by dividing by a value loaded from a text file with LoadText.\n'...
'                                                                                 \n'...
'  See also SubtractBackground.                                                   \n'...
]);

ToolHelp{69} = RescaleIntensityHelp;

ResizeHelp = sprintf([...
'  Help for the Resize module:                                              \n'...
'  Category: Image Processing                                               \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Resizes images.                                                          \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Images are resized (smaller or larger) based on the user''''s inputs. You   \n'...
'  can resize an image by applying a resizing factor or by specifying a     \n'...
'  pixel size for the resized image. You can also select which interpolation\n'...
'  method to use. This module uses the MATLAB built-in function imresize.   \n'...
]);

ToolHelp{70} = ResizeHelp;

RestartHelp = sprintf([...
'  Help for the Restart module:                                             \n'...
'  Category: File Processing                                                \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Restarts image analysis which had failed or was canceled, using the      \n'...
'  partially completed output file.                                         \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Restarts an analysis run where it left off. Put Restart into a new       \n'...
'  pipeline with no other modules. Click Analyze images. When the dialog    \n'...
'  "Choose a settings or output file" appears, select the output file of the\n'...
'  incomplete run. Click OK and the pipeline will load from the output file \n'...
'  and analysis will continue where it left off during the partially        \n'...
'  completed run.                                                           \n'...
]);

ToolHelp{71} = RestartHelp;

SaveImagesHelp = sprintf([...
'  Help for the Save Images module:                                          \n'...
'  Category: File Processing                                                 \n'...
'                                                                            \n'...
'  SHORT DESCRIPTION:                                                        \n'...
'  Saves any image produced during the image analysis, in any image format.  \n'...
'  ************************************************************************* \n'...
'                                                                            \n'...
'  Because CellProfiler usually performs many image analysis steps on many   \n'...
'  groups of images, it does *not* save any of the resulting images to the   \n'...
'  hard drive unless you use the SaveImages module to do so. Any of the      \n'...
'  processed images created by CellProfiler during the analysis can be       \n'...
'  saved using this module.                                                  \n'...
'                                                                            \n'...
'  You can choose from among 18 image formats to save your files in. This    \n'...
'  allows you to use the module as a file format converter, by loading files \n'...
'  in their original format and then saving them in an alternate format.     \n'...
'                                                                            \n'...
'  Please note that this module works for the cases we have tried, but it    \n'...
'  has not been extensively tested, particularly for how it handles color    \n'...
'  images, non-8 bit images, images coming from subdirectories, multiple     \n'...
'  incoming movie files, or filenames made by numerical increments.          \n'...
'                                                                            \n'...
'  Settings:                                                                 \n'...
'                                                                            \n'...
'  Update file names within CellProfiler:                                    \n'...
'  This setting stores file and path name data in handles.Pipeline           \n'...
'  as well as a Per_image measurement.  This is useful when exporting to a   \n'...
'  database, allowing access to the saved image.  This also allows           \n'...
'  downstream modules (e.g. CreateWebPage) to look up the newly              \n'...
'  saved files on the hard drive. Normally, whatever files are present on    \n'...
'  the hard drive when CellProfiler processing begins (and when the          \n'...
'  LoadImages module processes its first cycle) are the only files that are  \n'...
'  accessible within CellProfiler. This setting allows the newly saved files \n'...
'  to be accessible to downstream modules. This setting might yield unusual  \n'...
'  consequences if you are using the SaveImages module to save an image      \n'...
'  directly as loaded (e.g. using the SaveImages module to convert file      \n'...
'  formats), because it will, in some places in the output file, overwrite   \n'...
'  the file names of the loaded files with the file names of the the saved   \n'...
'  files. Because this function is rarely needed and may introduce           \n'...
'  complications, the default answer is "No".                                \n'...
'                                                                            \n'...
'  Do you want to create the input image subdirectory structure in the       \n'...
'  output directory?                                                         \n'...
'  If the input images are located in subdirectories (such that you used     \n'...
'  "Analyze all subfolders within the selected folder" in LoadImages), you   \n'...
'  can re-create the subdirectory structure in the output directory. Note:   \n'...
'  This option can only be applied if you specified an original image for the\n'...
'  filename prefix above, and not with "N" or "=DesiredFilename" options.    \n'...
'  Otherwise, all images will be saved in the output directory.              \n'...
'                                                                            \n'...
'  Special notes for saving in movie format (avi):                           \n'...
'  The movie will be saved after the last cycle is processed. You have the   \n'...
'  option to also save the movie periodically during image processing, so    \n'...
'  that the partial movie will be available in case image processing is      \n'...
'  canceled partway through. Saving movies in avi format is quite slow, so   \n'...
'  you can enter a number to save the movie after every Nth cycle. For       \n'...
'  example, entering a 1 will save the movie after every cycle. When working \n'...
'  with very large movies, you may also want to save the CellProfiler output \n'...
'  file every Nth cycle to save time, because the entire movie is stored in  \n'...
'  the output file (this may only be the case if you are working in          \n'...
'  diagnostic mode, see Set Preferences). See the SpeedUpCellProfiler        \n'...
'  module. If you are processing multiple movies, especially movies in       \n'...
'  subdirectories, you should save after every cycle (and also, be aware     \n'...
'  that this module has not been thoroughly tested under those conditions).  \n'...
'  Note also that the movie data is stored in the handles.Pipeline.Movie     \n'...
'  structure of the output file, so you can retrieve the movie data there in \n'...
'  case image processing is aborted. At the time this module was written,    \n'...
'  MATLAB was only capable of saving in uncompressed avi format (at least on \n'...
'  the UNIX platform), which is time and space-consuming. You should convert \n'...
'  the results to a compressed movie format, like .mov using third-party     \n'...
'  software. For suggested third-party software, see the help for the        \n'...
'  LoadImages module.                                                        \n'...
'                                                                            \n'...
'  See also LoadImages, SpeedUpCellProfiler.                                 \n'...
]);

ToolHelp{72} = SaveImagesHelp;

SendEmailHelp = sprintf([...
'  Help for the Send Email module:                                          \n'...
'  Category: Other                                                          \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Sends emails to a specified address at desired stages of the processing. \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module emails the user-specified recipients about the current       \n'...
'  progress of the image processing. The user can specify how often emails  \n'...
'  are sent out (for example, after the first cycle, after the last cycle,  \n'...
'  after every N cycles, after N cycles). This module should be placed at   \n'...
'  the point in the pipeline when you want the emails to be sent. If email  \n'...
'  sending fails for any reason, a warning message will appear but          \n'...
'  processing will continue regardless.                                     \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'  Address to: you can send messages to multiple email addresses by entering\n'...
'  them with commas in between.                                             \n'...
'                                                                           \n'...
'  SMTP server: often the default ''''mail'''' will work. If not, ask your network\n'...
'  administrator for your outgoing mail server, which is often made up of   \n'...
'  part of your email address, e.g., Something@company.com. You might be    \n'...
'  able to find this information by checking your settings/preferences in   \n'...
'  whatever email program you use.                                          \n'...
]);

ToolHelp{73} = SendEmailHelp;

SmoothOrEnhanceHelp = sprintf([...
'  Help for the SmoothOrEnhance module:                                                         \n'...
'  Category: Image Processing                                                                   \n'...
'                                                                                               \n'...
'  SHORT DESCRIPTION:                                                                           \n'...
'  Smooths (blurs) images.                                                                      \n'...
'  *************************************************************************                    \n'...
'                                                                                               \n'...
'  Settings:                                                                                    \n'...
'                                                                                               \n'...
'  Smoothing Method:                                                                            \n'...
'  Note that smoothing is a time-consuming process, and fitting a polynomial                    \n'...
'  is fastest but does not allow a very tight fit as compared to the slower                     \n'...
'  median filtering method. Artifacts with widths over ~50 take substantial                     \n'...
'  amounts of time to process.                                                                  \n'...
'                                                                                               \n'...
'  BRIGHT SPECKLE DETECTION: ''''Enhance BrightRoundSpeckles'''' performs                             \n'...
'  morphological tophat filtering, which has the effect of enhancing round                      \n'...
'  objects with size equal to, or slightly smaller than, the ObjectWidth setting.               \n'...
'    ''''Remove BrightRoundSpeckles'''' is a filtering method to remove bright, round                 \n'...
'  speckles, equivalent to a morphological open operation (an erosion followed by a dilation).  \n'...
'  When followed by a Subtract module which subtracts the smoothed image from the original,     \n'...
'  bright round-shaped speckles will be enhanced. This is effectively the                       \n'...
'  same as ''''Enhance BrightRoundSpeckles'''', or tophat filtering.  We used                         \n'...
'  MATLAB''''s built-in imtophat and imopen function to perform these                              \n'...
'  operations; more information can be found by accessing MATLAB''''s help at                      \n'...
'  http://www.mathworks.com.                                                                    \n'...
'    Then, you could use the ApplyThreshold module to make a binary                             \n'...
'  speckles/non-speckles image. Furthermore, the IdentifyPrimAutomatic can                      \n'...
'  be used on the thresholded image to label each speckle for your analysis.                    \n'...
'                                                                                               \n'...
'  SMOOTH KEEPING EDGES: ''''Smooth Keeping Edges'''' smooths the images while                        \n'...
'  preserving the edges. It uses the Bilateral Filter, as implemented by                        \n'...
'  Jiawen Chen.                                                                                 \n'...
'                                                                                               \n'...
'  Special note on saving images: If you want to save the smoothed image to                     \n'...
'  use it for later analysis, you should save the smoothed image in ''''.mat''''                      \n'...
'  format to prevent degradation of the data.                                                   \n'...
'                                                                                               \n'...
'  Technical note on the median filtering method: the artifact width is                         \n'...
'  divided by two to obtain the radius of a disk-shaped structuring element                     \n'...
'  which is used for filtering. No longer done this way.                                        \n'...
'                                                                                               \n'...
'  See also CorrectIllumination_Apply, CorrectIllumination_Calculate.                           \n'...
]);

ToolHelp{74} = SmoothOrEnhanceHelp;

SpeedUpCellProfilerHelp = sprintf([...
'  Help for the Speed Up CellProfiler module:                               \n'...
'  Category: Other                                                          \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Speeds up CellProfiler processing and conserves memory.                  \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Speeds up CellProfiler processing and conserves memory by reducing the   \n'...
'  frequency of saving partial output files and/or clearing the memory.     \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  * Output files should be saved every Nth cycle?                          \n'...
'  To save the output file after every cycle, as usual, leave this set to 1.\n'...
'  Entering a larger integer allows faster image processing by refraining   \n'...
'  from saving the output file after every cycle is processed. Instead, the \n'...
'  output file is saved after every Nth cycle (and always after the first   \n'...
'  and last cycles). For large output files, this can result in substantial \n'...
'  time savings. The only disadvantage is that if processing is canceled    \n'...
'  prematurely, the output file will contain only data up to the last cycle \n'...
'  that was a multiple of N, even if several cycles have been processed     \n'...
'  since then. Another hint: be sure you are not in Diagnostic mode (see    \n'...
'  File > Set Preferences) to avoid saving very large output files with     \n'...
'  intermediate images, because this slows down CellProfiler as well.       \n'...
'                                                                           \n'...
'  * Do you want to clear the memory?                                       \n'...
'  If yes, everything in temporary memory will be removed except for the    \n'...
'  images you specify. Therefore, only the images you specify will be       \n'...
'  accessible to modules downstream in the pipeline. This module can        \n'...
'  therefore be used to clear space in the memory.                          \n'...
'  Note: currently, this option will remove everything in the memory, which \n'...
'  may not be compatible with some modules, which often store non-image     \n'...
'  information in memory to be re-used during every cycle.                  \n'...
]);

ToolHelp{75} = SpeedUpCellProfilerHelp;

SplitOrSpliceMovieHelp = sprintf([...
'  Help for the Split Or Splice Movie module:                               \n'...
'  Category: File Processing                                                \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Creates one large movie from several small movies, or creates several    \n'...
'  small movies from one large movie.                                       \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  This module is only compatible with AVI format movies.                   \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  Where are the existing avi-formatted movies?                             \n'...
'  Typing a period (.) will use the default image folder. Relative folder   \n'...
'  locations will work also (e.g.   ../SIBLINGFOLDER)                       \n'...
'                                                                           \n'...
'  Where do you want to put the resulting files?                            \n'...
'  Typing a period (.) will use the default output folder. Relative folder  \n'...
'  locations will work also (e.g.   ../SIBLINGFOLDER)                       \n'...
'                                                                           \n'...
'  For SPLICE, what is the common text in your movie file names?            \n'...
'  The files to be spliced should all be located within a single folder. You\n'...
'  can choose a subset of movies in the folder to splice by specifying      \n'...
'  common text in their names. To splice all movies in the folder, you can  \n'...
'  just enter the file extension (e.g. ''''.avi'''').                             \n'...
'                                                                           \n'...
'  For SPLIT, you can split only one movie at a time, and the full file name\n'...
'  should be entered here.                                                  \n'...
'                                                                           \n'...
'  For SPLIT, how many frames per movie do you want?                        \n'...
'  The way CellProfiler reads movie files is that it reads each movie frame \n'...
'  by frame. It will open the first frame and run through the pipeline then \n'...
'  open the next and do the same. This is done until there are no more      \n'...
'  frames. Indicating the number of frames can be seen as also indicating   \n'...
'  the number cycles that a pipeline will be run.                           \n'...
'                                                                           \n'...
'  Note: This module is run by itself in a pipeline; there is no need to use\n'...
'  a LoadImages or SaveImages module.                                       \n'...
]);

ToolHelp{76} = SplitOrSpliceMovieHelp;

SubtractBackgroundHelp = sprintf([...
'  Help for the Subtract Background module:                                 \n'...
'  Category: Image Processing                                               \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Calculates the minimum pixel intensity value for the entire set of images\n'...
'  and subtracts this value from every pixel in every image.                \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Note that this is not an illumination correction module. It subtracts a  \n'...
'  single value from every pixel across the image.                          \n'...
'                                                                           \n'...
'  The intensity due to camera or illumination or antibody background       \n'...
'  (intensity where no cells are sitting) can in good conscience be         \n'...
'  subtracted from the images, but it must be subtracted from every pixel,  \n'...
'  not just the pixels where cells actually are sitting.  This is because we\n'...
'  assume that this staining is additive with real staining. This module    \n'...
'  calculates the lowest possible pixel intensity across the entire image   \n'...
'  set and subtracts this background value from every pixel in every image. \n'...
'  This module is identical to the Apply Threshold module (in shift mode),  \n'...
'  except in the SubtractBackground module, the threshold is automatically  \n'...
'  calculated as the 10th lowest pixel value. This will not push any values \n'...
'  below zero (therefore, we aren''''t losing any information). It moves the   \n'...
'  baseline up and looks prettier (improves signal to noise) without any    \n'...
'  ''''ethical'''' concerns.                                                      \n'...
'                                                                           \n'...
'  If images have already been quantified and you want to apply the concept \n'...
'  of this module without reprocessing your images, then multiply the       \n'...
'  background threshold calculated by this module during the first image    \n'...
'  cycle by the number of pixels in the image to get the number that should \n'...
'  be subtracted from the intensity measurements.                           \n'...
'                                                                           \n'...
'  If you want to run this module only to calculate the proper threshold to \n'...
'  use, simply run the module as usual and use the button on the Status     \n'...
'  window to stop processing after the first image cycle.                   \n'...
'                                                                           \n'...
'  How it works:                                                            \n'...
'  Sort each image''''s pixel values and pick the 10th lowest pixel value as   \n'...
'  the minimum. Typical images have a million pixels. The lowest pixel value\n'...
'  is chosen because it might be zero if it is a stuck pixel. It is quite   \n'...
'  certain that there will not be 10 stuck pixels so this should be safe.   \n'...
'  Then, take the minimum of these values from all the images. This scalar  \n'...
'  value should be subtracted from every pixel in the image. CellProfiler is\n'...
'  not calculating a different value for each pixel position in the image   \n'...
'  because in a small image set, that position may always be occupied by    \n'...
'  real staining.                                                           \n'...
'                                                                           \n'...
'  Features measured:    Feature Number:                                    \n'...
'  IntensityToShift    |   1                                                \n'...
'                                                                           \n'...
'  NOTE: The functionality performed by this module can also be performed by\n'...
'  CorrectIllumination_Calculate and CorrectIllumination_Apply. You may want\n'...
'  to consider using those modules instead.                                 \n'...
'                                                                           \n'...
'  See also ApplyThreshold.                                                 \n'...
]);

ToolHelp{77} = SubtractBackgroundHelp;

TileHelp = sprintf([...
'  Help for the Tile module:                                                \n'...
'  Category: Image Processing                                               \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Creates one large, tiled image from all images of a certain type.        \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  Allows many images to be viewed simultaneously, in a grid layout you     \n'...
'  specify (e.g. in the actual layout in which the images were collected).  \n'...
'                                                                           \n'...
'  If you want to view a large number of images, you will generate an       \n'...
'  extremely large file (roughly the size of all the images'''' sizes added    \n'...
'  together) which, even if it could be created, could not be opened by any \n'...
'  image software anyway. There are several ways to allow a larger image to \n'...
'  be produced, given memory limitations: (1) Decrease the resolution of    \n'...
'  each image tile by entering a fraction where requested. Then, in the     \n'...
'  window which pops open after Tile finishes, you can use the ''''Get high res\n'...
'  image'''' button to retrieve the original high resolution image. (Sorry,    \n'...
'  this button is not yet functional). (2) Use the SpeedUpCellProfiler      \n'...
'  module just before this module to clear out images that are stored in    \n'...
'  memory. Place this module just prior to the Tile module (and maybe also  \n'...
'  afterwards) and ask it to retain only those images which are needed for  \n'...
'  downstream modules. (3) Rescale the images to 8 bit format by putting in \n'...
'  the RescaleIntensity module just prior to the Tile module. Normally      \n'...
'  images are stored in memory as class "double" which takes about 10 times \n'...
'  the space of class "uint8" which is 8 bits. You will lose resolution in  \n'...
'  terms of the number of different graylevels - this will be limited to 256\n'...
'  - but you will not lose spatial resolution.                              \n'...
'                                                                           \n'...
'  The file name (automatic) and sample info (optional) can be displayed on \n'...
'  each image using buttons in the final figure window.                     \n'...
'                                                                           \n'...
'  See also PlaceAdjacent.                                                  \n'...
]);

ToolHelp{78} = TileHelp;

TrackObjectsHelp = sprintf([...
'  Help for the Track Objects module:                                       \n'...
'  Category: Object Processing                                              \n'...
'                                                                           \n'...
'  SHORT DESCRIPTION:                                                       \n'...
'  Allows tracking objects throughout sequential frames of a movie, so that \n'...
'  each object maintains a unique identity in the output measurements.      \n'...
'  *************************************************************************\n'...
'  This module must be run after the object to be tracked has been          \n'...
'  identified using an Identification module (e.g., IdentifyPrimAutomatic). \n'...
'                                                                           \n'...
'  Settings:                                                                \n'...
'                                                                           \n'...
'  Tracking method:                                                         \n'...
'  Choose between the methods based on which is most consistent from frame  \n'...
'  to frame of your movie. For each, the maximum search distance that a     \n'...
'  tracked object will looked for is specified with the Neighborhood setting\n'...
'  below:                                                                   \n'...
'                                                                           \n'...
'    Overlap - Compare the amount of overlaps between identified objects in \n'...
'    the previous frame with those in the current frame. The object with the\n'...
'    greatest amount of overlap will be assigned the same label. Recommended\n'...
'    for movies with high frame rates as compared to object motion.         \n'...
'                                                                           \n'...
'    Distance - Compare the distance between the centroid of each identified\n'...
'    object in the previous frame with that of the current frame. The       \n'...
'    closest objects to each other will be assigned the same label.         \n'...
'    Distances are measured from the perimeter of each object. Recommended  \n'...
'    for movies with lower frame rates as compared to object motion, but    \n'...
'    the objects are clearly separable.                                     \n'...
'                                                                           \n'...
'    Measurement - Compare the specified measurement of each object in the  \n'...
'    current frame with that of objects in the previous frame. The object   \n'...
'    with the closest measurement will be selected as a match and will be   \n'...
'    assigned the same label. This selection requires that you run the      \n'...
'    specified Measurement module previous to this module in the pipeline so\n'...
'    that the measurement values can be used to track the objects.          \n'...
'                                                                           \n'...
'  Catagory/Feature Name or Number/Image/Scale:                             \n'...
'  Specifies which type of measurement (catagory) and which feature from the\n'...
'  Measure module will be used for tracking. Select the feature name from   \n'...
'  the popup box or see each Measure module''''s help for the numbered list of \n'...
'  the features measured by that module. Additional details such as the     \n'...
'  image that the measurements originated from and the scale used as        \n'...
'  specified below if neccesary.                                            \n'...
]);

ToolHelp{79} = TrackObjectsHelp;

handles.Current.ModulesFilenames = {'Align' 'ApplyThreshold' 'CalculateImageOverlap' 'CalculateMath' 'CalculateStatistics' 'ClassifyObjects' 'ClassifyObjectsByTwoMeasurements' 'ColorToGray' 'Combine' 'ConvertToImage' 'CorrectIllumination_Apply' 'CorrectIllumination_Calculate' 'CreateBatchFiles' 'CreateWebPage' 'Crop' 'DICTransform' 'DefineGrid' 'DifferentiateStains' 'DisplayDataOnImage' 'DisplayGridInfo' 'DisplayHistogram' 'DisplayImageHistogram' 'DisplayMeasurement' 'EditObjectsManually' 'Exclude' 'ExpandOrShrink' 'ExportToDatabase' 'ExportToExcel' 'FileNameMetadata' 'FilterByObjectMeasurement' 'FindEdges' 'FlagImageForQC' 'FlipAndRotate' 'GrayToColor' 'GroupMovieFrames' 'IdentifyObjectsInGrid' 'IdentifyPrimAutomatic' 'IdentifyPrimLoG' 'IdentifyPrimManual' 'IdentifySecondary' 'IdentifyTertiarySubregion' 'ImageMath' 'InvertForPrinting' 'KeepLargestObject' 'LabelImages' 'LoadImageDirectory' 'LoadImages' 'LoadSingleImage' 'LoadText' 'MakeProjection' 'MaskImage' 'MeasureCorrelation' 'MeasureImageAreaOccupied' 'MeasureImageGranularity' 'MeasureImageIntensity' 'MeasureImageQuality' 'MeasureObjectAreaShape' 'MeasureObjectIntensity' 'MeasureObjectNeighbors' 'MeasureRadialDistribution' 'MeasureTexture' 'Morph' 'OverlayOutlines' 'PauseCellProfiler' 'PlaceAdjacent' 'RelabelObjects' 'Relate' 'RenameOrRenumberFiles' 'RescaleIntensity' 'Resize' 'Restart' 'SaveImages' 'SendEmail' 'SmoothOrEnhance' 'SpeedUpCellProfiler' 'SplitOrSpliceMovie' 'SubtractBackground' 'Tile' 'TrackObjects'};
handles.Current.ModulesHelp = ToolHelp;

%%% HELP
GSToolHelp{1} = sprintf([...
'  Get the latest code from www.cellprofiler.org                            \n'...
'                                                                           \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  CellProfiler Installation Guide: Macintosh OSX Version                   \n'...
'                                                                           \n'...
'  1. Download and unzip CellProfiler to any folder, but all files must     \n'...
'  remain in the same folder and the folder''s name must not have spaces     \n'...
'  (e.g. /Applications/CellProfiler).                                       \n'...
'                                                                           \n'...
'  2. Download and install X11.                                             \n'...
'  http://www.apple.com/downloads/macosx/apple/x11formacosx.html            \n'...
'                                                                           \n'...
'  3. To start CellProfiler, double click CellProfiler.command, located in  \n'...
'  the folder where CellProfiler was un-zipped.                             \n'...
'                                                                           \n'...
'  4. (Optional steps) Get up and running quickly with one of the sample    \n'...
'  pipelines on our Examples page, and check out Help > HelpGettingStarted  \n'...
'  within CellProfiler. In CellProfiler, set some basic preferences in File \n'...
'  > Set preferences, which will make it easier to use CellProfiler. You can\n'...
'  drag CellProfiler.command to the dock (on the side near the trash) so the\n'...
'  program is easily accessible in the future.                              \n'...
'                                                                           \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  CellProfiler Installation Guide: Windows PC Version                      \n'...
'                                                                           \n'...
'  1. Download and extract CellProfiler.exe, CellProfiler.ctf, and the      \n'...
'  Modules directory to any folder, but all files must remain in the same   \n'...
'  folder (e.g. C:\\Program Files\\CellProfiler).                             \n'...
'                                                                           \n'...
'  2. Download and run MCRInstaller.exe (see link on CellProfiler website). \n'...
'                                                                           \n'...
'  3. To start CellProfiler, run CellProfiler.exe. The first time the       \n'...
'  program is run, it will take a bit longer to de-compress the CTF file.   \n'...
'                                                                           \n'...
'  4. (Optional steps) Get up and running quickly with one of the sample    \n'...
'  pipelines on our Examples page, and check out Help > HelpGettingStarted  \n'...
'  within CellProfiler. In CellProfiler, set some basic preferences in File \n'...
'  > Set preferences, which will make it easier to use CellProfiler. On many\n'...
'  PC''s, it is beneficial to set the font size to 8 instead of 10.          \n'...
'                                                                           \n'...
'  *************************************************************************\n'...
'                                                                           \n'...
'  CellProfiler Installation Guide: Developer''s version                     \n'...
'                                                                           \n'...
'  1. (Mac only) Set X11 setting... Close MATLAB & X11. Open the Mac        \n'...
'  application called ''Terminal'' (Applications > Utilities > Terminal) and  \n'...
'  type the following to ensure that display windows behave properly:       \n'...
'  defaults write com.apple.x11 wm_click_through -bool true                 \n'...
'                                                                           \n'...
'  2. Start MATLAB and check licenses... Start MATLAB and type into the main\n'...
'  window (command line): license(''test'',''image_toolbox'') If the Image      \n'...
'  Processing Toolbox is installed with a valid license you will see: ans = \n'...
'  1, but if ans = 0, the toolbox and/or license is not installed.          \n'...
'  CellProfiler was designed for MATLAB Release 14, version 7.1, SP3        \n'...
'  although it is possible that many functions will work on other versions. \n'...
'  We have noticed lots of MATLAB crashing with Mac OS10.2 but OS10.3 is    \n'...
'  fine.                                                                    \n'...
'                                                                           \n'...
'  3. Copy the CellProfiler files to your computer... Put them in a folder  \n'...
'  named CellProfiler at any location - suggested: On Mac:                  \n'...
'  /Applications/CellProfiler On PC: C:\\Program Files Once the files are    \n'...
'  copied, do not move or rename this folder or any folders containing it,  \n'...
'  or you will have to repeat the next step.                                \n'...
'                                                                           \n'...
'  4. Start CellProfiler... To start CellProfiler for the first time, you   \n'...
'  must call it directly. After the first time, you may simply type         \n'...
'  "CellProfiler" in the main MATLAB window to start CellProfiler. To call  \n'...
'  CellProfiler directly, type the following in the main MATLAB window      \n'...
'  (LOCATION is where the CellProfiler folder is located): On Mac: run      \n'...
'  ''/LOCATION/CellProfiler/CellProfiler.m'' For example: run                 \n'...
'  ''/Applications/CellProfiler/CellProfiler.m''                              \n'...
'                                                                           \n'...
'  On PC: run ''\\LOCATION\\CellProfiler\\CellProfiler.m'' For example: run      \n'...
'  ''C:\\Program Files\\CellProfiler\\CellProfiler.m''                           \n'...
'                                                                           \n'...
'  5. (Optional steps) Get up and running quickly with one of the sample    \n'...
'  pipelines on our Examples page, and check out Help > HelpGettingStarted  \n'...
'  within CellProfiler. In CellProfiler, set some basic preferences in File \n'...
'  > Set preferences, which will make it easier to use CellProfiler.        \n'...
]);

GSToolHelp{2} = sprintf([...
'  The best way to learn how to use CellProfiler is to load an example      \n'...
'  pipeline (from www.cellprofiler.org) and try it out. Or, you can build a \n'...
'  pipeline from scratch. A pipeline is a sequential set of individual image\n'...
'  analysis modules. See also Help (main menu of CellProfiler) and "?"      \n'...
'  buttons in the main window.                                              \n'...
'  To learn how to program in CellProfiler, see Help > DeveloperInfo.       \n'...
'  To learn how to use a cluster of computers to process large batches      \n'...
'  of images, see Help > BatchProcessing.                                   \n'...
'                                                                           \n'...
'  ************************   LOADING A PIPELINE   ************************ \n'...
'                                                                           \n'...
'  STEP 1: Put the images and pipeline into a folder on your computer.      \n'...
'                                                                           \n'...
'  STEP 2: Set the default image and output folders (lower right of the main\n'...
'  window) to be the folder where you put the images.                       \n'...
'                                                                           \n'...
'  STEP 3: Load the pipeline using File > Load Pipeline in the main menu of \n'...
'  CellProfiler.                                                            \n'...
'                                                                           \n'...
'  STEP 4: Click "Analyze images" to start processing.                      \n'...
'                                                                           \n'...
'  STEP 5: Examine the measurements using Data Tools.                       \n'...
'  Data Tools are accessible in the main menu of CellProfiler and allow you \n'...
'  to plot, view, or export your measurements (e.g. to Excel).              \n'...
'                                                                           \n'...
'  STEP 6: If you modify the modules or settings in the pipeline, you can   \n'...
'  save the pipeline using File > Save Pipeline. See the end of this        \n'...
'  document for more information on pipeline files.                         \n'...
'                                                                           \n'...
'  *****************   BUILDING A PIPELINE FROM SCRATCH   ***************** \n'...
'                                                                           \n'...
'  STEP 1: Place modules in a new pipeline.                                 \n'...
'  Choose image analysis modules to add to your analysis routine (your      \n'...
'  "pipeline") by clicking ''+''. Typically, the first module which must be   \n'...
'  run is the Load Images module, where you specify the identity of the     \n'...
'  images that you want to analyze. Modules are added to the end of the     \n'...
'  pipeline, but their order can be adjusted in the main window by selecting\n'...
'  module(s) and using the Move up ''^'' and Move down ''v'' buttons. The ''-''   \n'...
'  button will delete selected module(s) from the pipeline.                 \n'...
'                                                                           \n'...
'  Most pipelines depend on a major step: Identifying objects. In           \n'...
'  CellProfiler, the objects you identify are called Primary, Secondary, or \n'...
'  Tertiary. What does this mean? Identify Primary modules identify objects \n'...
'  without relying on any information other than a single grayscale input   \n'...
'  image (e.g. nuclei are typically primary objects). Identify Secondary    \n'...
'  modules require a grayscale image plus an image where primary objects    \n'...
'  have already been identified, because the secondary objects'' locations   \n'...
'  are determined in part based on the primary objects (e.g. cells can be   \n'...
'  secondary objects). Identify Tertiary modules require images where two   \n'...
'  sets of objects have already been identified (e.g. nuclei and cell       \n'...
'  regions are used to define the cytoplasm objects, which are tertiary     \n'...
'  objects).                                                                \n'...
'                                                                           \n'...
'  Saving images in your pipeline: Due to the typically high number of      \n'...
'  intermediate images produced during processing, images produced during   \n'...
'  processing are not saved to the hard drive unless you specifically       \n'...
'  request it, using a Save Images module.                                  \n'...
'                                                                           \n'...
'  STEP 2: Adjust the settings in each module.                              \n'...
'  Back in the main window of CellProfiler, click a module in the pipeline  \n'...
'  to see its settings in the main workspace. To learn more about the       \n'...
'  settings for each module, select the module in the pipeline and click the\n'...
'  "?" button below the pipeline.                                           \n'...
'                                                                           \n'...
'  STEP 3: Set the default image folder, default output folder, pixel       \n'...
'  size, and output filename.                                               \n'...
'  For more help, click their nearby "?" buttons in the main window.        \n'...
'                                                                           \n'...
'  STEP 4: Click "Analyze images" to start processing.                      \n'...
'  All of the images in the selected folder(s) will be analyzed using the   \n'...
'  modules and settings you have specified.  You will have the option to    \n'...
'  cancel at any time.  At the end of each cycle, the data are saved in the \n'...
'  output file.                                                             \n'...
'                                                                           \n'...
'  STEP 5: Examine your measurements using Data Tools.                      \n'...
'  Data Tools are accessible in the main menu of CellProfiler and allow you \n'...
'  to plot, view, or export your measurements (e.g. to Excel).              \n'...
'                                                                           \n'...
'  Note: You can test an analysis on a single image cycle by setting the    \n'...
'  Load Images module appropriately.  For example, if loading by order, you \n'...
'  can set the number of images per set to equal the total number of images \n'...
'  in the folder (even if it is thousands) so that only the first cycle will\n'...
'  be analyzed.  Or, if loading by text, you can make the identifying text  \n'...
'  specific enough that it will recognize only one group of images in the   \n'...
'  folder. Once the settings look good for a few test images, you can change\n'...
'  the Load Images module to recognize all images in your folder.           \n'...
'                                                                           \n'...
'  STEP 6: Save your pipeline.                                              \n'...
'  This step can be done at any time using File > Save Pipeline.            \n'...
'                                                                           \n'...
'                                                                           \n'...
'                                                                           \n'...
'                                                                           \n'...
'  Note about CellProfiler "PIPE" pipeline files: A pipeline can be loaded  \n'...
'  from a pipeline file or from any output file created using the pipeline. \n'...
'  A pipeline file is very small and is therefore more convenient for       \n'...
'  sharing with colleagues. It also allows you to save your work on a       \n'...
'  pipeline even if it''s not ready to run yet. Loading/Saving Pipeline files\n'...
'  will load/save these: the image analysis modules, their settings, and the\n'...
'  pixel size. It will not save the default image or output folder.         \n'...
]);

ToolHelp{1} = sprintf([...
'  CellProfiler is designed to analyze images in a high-throughput manner.   \n'...
'  Once a pipeline has been established for a set of images, CellProfiler    \n'...
'  can export batches of images to be analyzed on a cluster with the         \n'...
'  pipeline. We often analyze 40,000-130,000 images for one analysis in this \n'...
'  manner. This is accomplished by breaking the entire set of images into    \n'...
'  separate batches, and then submitting each of these batches as individual \n'...
'  jobs to a cluster. Each individual batch can be separately analyzed from  \n'...
'  the rest.                                                                 \n'...
'                                                                            \n'...
'  There are two methods of processing these batches on a cluster. The first \n'...
'  requires a MATLAB license for every computing node of the cluster. This   \n'...
'  method produces small MATLAB script files which specify the images to     \n'...
'  analyze. The other method does not require MATLAB licenses for the entire \n'...
'  cluster, but does require a bit more effort to set up. This method        \n'...
'  produces small MATLAB .mat files which specify the images to analyze.     \n'...
'                                                                            \n'...
'  *************** SETTING UP CLUSTER WITH MATLAB ************************** \n'...
'  Step 1: Create a folder on your cluster for CellProfiler (e.g.            \n'...
'  /home/username/CellProfiler). This folder must be connected to the        \n'...
'  cluster computers'' network and readable by all. If you don''t know what    \n'...
'  this means, please ask your IT department for help.                       \n'...
'                                                                            \n'...
'  Step 2: Copy all CellProfiler source code files into this folder, keeping \n'...
'  the file structure intact. This version of CellProfiler must be the same  \n'...
'  as the version used to create the pipeline. Sometimes modules are changed \n'...
'  between versions and this can cause errors.                               \n'...
'                                                                            \n'...
'  Step 3: Create batchrun.sh file. This file will allow you to rapidly      \n'...
'  submit jobs to your cluster, rather than you typing out commands one at a \n'...
'  time to submit jobs individually. There are different software programs   \n'...
'  which control how jobs are submitted to a cluster. The example below is   \n'...
'  for our cluster at the Whitehead Institute which uses LSF software.       \n'...
'  Contact your IT department for help writing a similar file to work with   \n'...
'  your own cluster.                                                         \n'...
'                                                                            \n'...
'  Example (LSF): Open any text editor and copy in the code below, then save \n'...
'  the file to any directory, usually your home directory is fine. Then      \n'...
'  change the following lines to fit your cluster:                           \n'...
'  MATLAB=/SOME_PATH/MATLAB                                                  \n'...
'  LICENSE_SERVER="12345@yourservers.edu"                                    \n'...
'  Also, you can specify your e-mail address after the bsub command.         \n'...
'  ---                                                                       \n'...
'  Note that in the example script below, we had to wrap some lines (marked  \n'...
'  with >>>>>: you should remove the >>> symbols and wrap the line with the  \n'...
'  previous.                                                                 \n'...
'  ---                                                                       \n'...
'  #!/bin/sh                                                                 \n'...
'  if test $# -ne 5; then                                                    \n'...
'    echo "usage: $0 M_fileDir BatchTxtOutputDir mat_fileDir BatchFilePrefix \n'...
' >>>>>  QueueType" 1>&2 exit 1                                              \n'...
'  fi                                                                        \n'...
'  # start to process                                                        \n'...
'  BATCHDIR=$1                                                               \n'...
'  BATCHTXTOUTPUTDIR=$2                                                      \n'...
'  BATCHMATOUTPUTDIR=$3                                                      \n'...
'  BATCHFILEPREFIX=$4                                                        \n'...
'  QueueType=$5                                                              \n'...
'  MATLAB=/SOME_PATH/MATLAB                                                  \n'...
'  LICENSE_SERVER="12345@yourservers.edu"                                    \n'...
'  export DISPLAY=""                                                         \n'...
'  # loop through each .mat file                                             \n'...
'  for i in $BATCHDIR/$BATCHFILEPREFIX*.m; do                                \n'...
'     BATCHFILENAME=`basename $i .m`                                         \n'...
'      if [ ! -e $BATCHMATOUTPUTDIR/${BATCHFILENAME}_OUT.mat ]; then         \n'...
'        echo Re-running $BATCHDIR/$BATCHFILENAME                            \n'...
'        bsub -q $5 -o $BATCHTXTOUTPUTDIR/$BATCHFILENAME.txt -u              \n'...
'        username@wi.mit.edu -R ''rusage [img_kit=1:duration=1]''              \n'...
' >>>>>"$MATLAB/bin/matlab -nodisplay -nojvm -c $LICENSE_SERVER <            \n'...
' >>>>>$BATCHDIR/$BATCHFILENAME.m"                                           \n'...
'     fi                                                                     \n'...
'  done                                                                      \n'...
'  #INSTRUCTIONS                                                             \n'...
'  #From the command line, logged into your cluster submit the jobs using    \n'...
'  #this script as follows:                                                  \n'...
'  #./batchrun.sh /FOLDERWHEREMFILESARE /FOLDERWHERETEXTLOGSSHOULDGO         \n'...
' >>>>>/FOLDERWHEREMATFILESARE BATCHPREFIXNAME QueueType                     \n'...
'  #Note that FOLDERWHEREMATFILESARE is usually the same as                  \n'...
'  #FOLDERWHEREMFILESARE. This is mainly if you are trying to re-run failed  \n'...
'  #jobs - it only runs m files if there is no corresponding mat file        \n'...
'  #located in the FOLDERWHEREMATFILESARE.   For example:                    \n'...
'  #./batchrun.sh /nfs/sabatini2_ata/PROJECTFOLDER                           \n'...
' >>>>>/nfs/sabatini2_ata/PROJECTFOLDER /nfs/sabatini2_ata/                  \n'...
' >>>>>PROJECTFOLDER Batch_ normal                                           \n'...
'  # END COPY                                                                \n'...
'  ---                                                                       \n'...
'                                                                            \n'...
'  Step 4: Change batchrun.sh to be executable. Open a terminal, navigate to \n'...
'  the folder where batchrun.sh is located, and type:                        \n'...
'                                                                            \n'...
'  chmod a+x batchrun.sh                                                     \n'...
'                                                                            \n'...
'  If you don''t know what this means, please ask your IT department.         \n'...
'                                                                            \n'...
'  Step 5: Submit files. See SUBMITTING FILES FOR BATCH PROCESSING below.    \n'...
'                                                                            \n'...
'  *********** END OF SETTING UP CLUSTER WITH MATLAB *********************** \n'...
'                                                                            \n'...
'                                                                            \n'...
'  ************** SETTING UP CLUSTER WITHOUT MATLAB ************************ \n'...
'  Step 1: Download and install correct version of CPCluster from            \n'...
'  www.cellprofiler.org. If the versions there do not work, it means your    \n'...
'  cluster is running different versions of the operating systems, so you    \n'...
'  will have to download the CPCluster source code and compile it            \n'...
'  specifically for your cluster. This requires a single MATLAB license. For \n'...
'  more instructions on accomplishing this, see the instructions that are    \n'...
'  downloaded with the CPCluster source code.                                \n'...
'                                                                            \n'...
'  Step 2: Create batchrun.sh file. This file will allow you to rapidly      \n'...
'  submit jobs to your cluster, rather than you typing out commands one at a \n'...
'  time to submit jobs individually. There are different software programs   \n'...
'  which control how jobs are submitted to a cluster. The example below is   \n'...
'  for our cluster at the Whitehead Institute which uses LSF software.       \n'...
'  Contact your IT department for help writing a similar file to work with   \n'...
'  your own cluster.                                                         \n'...
'                                                                            \n'...
'  Example (LSF): Open any text editor and copy in the code below, then save \n'...
'  the file to any directory, usually your home directory is fine. Then      \n'...
'  change the following lines to fit your cluster:                           \n'...
'  CPCluster=/Users/username/CPCluster                                       \n'...
'  Also, you can specify your e-mail address after the qsub command.         \n'...
'  ---                                                                       \n'...
'  Note that in the example script below, we had to wrap some lines (marked  \n'...
'  with >>>>>: you should remove the >>> symbols and wrap the line with the  \n'...
'  previous.                                                                 \n'...
'  ---                                                                       \n'...
'  #!/bin/sh                                                                 \n'...
'  if test $# -ne 5; then                                                    \n'...
'      echo "usage: $0 M_fileDir BatchTxtOutputDir mat_fileDir               \n'...
' >>>>>BatchFilePrefix QueueType" 1>&2                                       \n'...
'      exit 1                                                                \n'...
'  fi                                                                        \n'...
'                                                                            \n'...
'  BATCHDIR=$1                                                               \n'...
'  BATCHTXTOUTPUTDIR=$2                                                      \n'...
'  BATCHMATOUTPUTDIR=$3                                                      \n'...
'  BATCHFILEPREFIX=$4                                                        \n'...
'  QueueType=$5                                                              \n'...
'                                                                            \n'...
'  echo $BATCHDIR                                                            \n'...
'  echo $BATCHTXTOUTPUTDIR                                                   \n'...
'  echo $BATCHMATOUTPUTDIR                                                   \n'...
'  echo $BATCHFILEPREFIX                                                     \n'...
'  echo $QueueType                                                           \n'...
'                                                                            \n'...
'  CPCluster=/Users/username/CPCluster                                       \n'...
'                                                                            \n'...
'  for i in $BATCHDIR/$BATCHFILEPREFIX*.mat; do                              \n'...
'      BATCHFILENAME=`basename $i .mat`                                      \n'...
'      if [ $BATCHFILENAME != ${BATCHFILEPREFIX}data ]; then                 \n'...
'          if [ ! -e $BATCHMATOUTPUTDIR/${BATCHFILENAME}_OUT.mat ]; then     \n'...
'              echo Running $BATCHDIR/$BATCHFILENAME                         \n'...
'              qsub -S /bin/bash -o $BATCHTXTOUTPUTDIR/$BATCHFILENAME.txt -M \n'...
' >>>>>username@wi.mit.edu $CPCluster/CPCluster.command                      \n'...
' >>>>>$BATCHDIR/${BATCHFILEPREFIX}data.mat $BATCHDIR/$BATCHFILENAME.mat     \n'...
'          fi                                                                \n'...
'      fi                                                                    \n'...
'  done                                                                      \n'...
'  ---                                                                       \n'...
'                                                                            \n'...
'  Step 3: Change batchrun.sh to be executable. Open a terminal, navigate to \n'...
'  the folder where batchrun.sh is located, and type:                        \n'...
'                                                                            \n'...
'  chmod a+x batchrun.sh                                                     \n'...
'                                                                            \n'...
'  If you don''t know what this means, please ask your IT department.         \n'...
'                                                                            \n'...
'  Step 4: Submit files. See SUBMITTING FILES FOR BATCH PROCESSING below.    \n'...
'                                                                            \n'...
'  ********** END OF SETTING UP CLUSTER WITHOUT MATLAB ********************* \n'...
'                                                                            \n'...
'  ************ SUBMITTING FILES FOR BATCH PROCESSING ********************** \n'...
'  ---                                                                       \n'...
'  Note that in several steps below, we had to wrap some lines (marked       \n'...
'  with >>>>>: you should remove the >>> symbols and wrap the line with the  \n'...
'  previous.                                                                 \n'...
'  ---                                                                       \n'...
'  Step 1:                                                                   \n'...
'  Create a project folder on your cluster. For high throughput analysis, it \n'...
'  is a good idea to create a separate project folder for each run. In       \n'...
'  general, we like to name our folders with the following convention:       \n'...
'  200X_MM_DD_ProjectName. Within this folder, we usually create an "images" \n'...
'  folder and an "output" folder. We then transfer all of our images to the  \n'...
'  images folder. The output folder is where all of your data will be        \n'...
'  stored. These folders must be connected to the cluster computers network  \n'...
'  and the output folder must be writeable by everyone (or at least your     \n'...
'  cluster) because each of the separate cluster computers will write output \n'...
'  files in this folder. If you don''t know what this means, ask your IT      \n'...
'  department for help. Within the CellProfiler window, set the appropriate  \n'...
'  project folders to be the default image and output folders.               \n'...
'                                                                            \n'...
'  Step 2: Create a pipeline for your image set, testing it on a few example \n'...
'  images from your image set. In this process, you must be careful to       \n'...
'  consider the worst case scenarios in your images. For instance, some      \n'...
'  images may contain no cells. If this happens, the automatic thresholding  \n'...
'  algorithms will incorrectly choose a very low threshold, and therefore    \n'...
'  ''find'' objects which don''t exist. This can be overcome by setting a       \n'...
'  ''minimum'' threshold in IdentifyPrimAutomatic module.                      \n'...
'                                                                            \n'...
'  Step 3: Add the module CreateBatchFiles to the end of your pipeline.      \n'...
'  Please refer to the help for this module to choose the correct settings.  \n'...
'  If you are processing large batches of images, you may also consider      \n'...
'  adding ExportToDatabase to your pipeline, before the CreateBatchFiles     \n'...
'  module. This module will export your data into comma separated values     \n'...
'  format (CSV), and also create a script to import your data into Oracle or \n'...
'  MySQL databases.                                                          \n'...
'                                                                            \n'...
'  Step 4: Click the Analyze images button. The analysis will begin locally  \n'...
'  processing the first image set. Do not be surprised if processing the     \n'...
'  first image set takes much longer than usual. The first step is to check  \n'...
'  all the images that are present in the images folder - they are not       \n'...
'  opened or loaded, but just checking the presence of all the files takes a \n'...
'  while. At the end of processing the first cycle locally, the              \n'...
'  CreateBatchFiles module causes local processing to stop and it then       \n'...
'  creates the proper batch files and saves them in the default output       \n'...
'  folder (Step 1). It will also save the necessary data file, which is      \n'...
'  called XXX_data.mat. You are now ready to submit these batch files to the \n'...
'  cluster to run each of the batches of images on different computers on    \n'...
'  the cluster.                                                              \n'...
'                                                                            \n'...
'  Step 5: Log on to your cluster, and navigate to the directory where you   \n'...
'  have saved the batchrun.sh file (See "Setting Up Cluster For              \n'...
'  CellProfiler"). The usage of batchrun.sh is as follows:                   \n'...
'                                                                            \n'...
'  ./batchrun.sh M_fileDir BatchTxtOutputDir mat_fileDir BatchFilePrefix     \n'...
' >>>>>QueueType                                                             \n'...
'                                                                            \n'...
'  where M_fileDir is the location of the batch files created by             \n'...
'  CreateBatchFiles in step 4, BatchTxtOutputDir is where you want to store  \n'...
'  the txt files which have the output of MATLAB during the analysis         \n'...
'  (includes information like errors and run times), mat_fileDir is the      \n'...
'  folder where XXX_data.mat is located (this file is created in Step 4),    \n'...
'  BatchFilePrefix is the prefix named in CreateBatchFiles (usually Batch_), \n'...
'  and QueueType is the queue for your cluster. Usually, the first three     \n'...
'  arguments are all the same. Here is an example of how you would submit    \n'...
'  all of your batch files to the cluster:                                   \n'...
'                                                                            \n'...
'  ./batchrun.sh /Some_Path/200X_XX_XX_ProjectName/output                    \n'...
' >>>>>/Some_Path/200X_XX_XX_ProjectName/output                              \n'...
' >>>>>/Some_Path/200X_XX_XX_ProjectName/output Batch_ normal                \n'...
'                                                                            \n'...
'  In this case, the output folder contains the script files, the            \n'...
'  XXX_data.mat file, and is the folder where we want the txt files with the \n'...
'  MATLAB output to be written. The prefix is Batch_ so XXX_data.mat is      \n'...
'  actually Batch_data.mat. The queue type is normal, but this is specific   \n'...
'  to your cluster. Ask your IT department what queues are available for     \n'...
'  your use.                                                                 \n'...
'                                                                            \n'...
'  Once all the jobs are submitted, the cluster will run each script         \n'...
'  individually and produce a separate output file containing the data for   \n'...
'  that batch of images in the output directory. Then you can decide how to  \n'...
'  access your data. In general, data from large analyses will be loaded     \n'...
'  into a database. Please refer to the ExportToDatabase module for          \n'...
'  information on how to do this. If you have made a very small number of    \n'...
'  measurements, you might be able to use the MergeOutputFiles DataTool, see \n'...
'  its instructions for further details.                                     \n'...
'                                                                            \n'...
'  If the batch processing fails for some reason, the handles structure in   \n'...
'  the output file will have a field BatchError, and the error will also be  \n'...
'  written to standard out.  Check the output from the batch processes to    \n'...
'  make sure all batches complete.  Batches that fail for transient reasons  \n'...
'  can be resubmitted.                                                       \n'...
'                                                                            \n'...
'  ********* END OF SUBMITTING FILES FOR BATCH PROCESSING ****************** \n'...
]);

ToolHelp{2} = sprintf([...
'  Default colormaps can be set in File > Set preferences.                  \n'...
'                                                                           \n'...
'  Label colormap - affects how objects are colored. Colorcube (and possibly\n'...
'  other colormaps) is not recommended because some intensity values are    \n'...
'  displayed as black. Jet is the default.                                  \n'...
'                                                                           \n'...
'  Intensity colormap - affects how grayscale images are displayed.         \n'...
'  Colorcube (and possibly other colormaps) is not recommended because some \n'...
'  intensity values are displayed as black. Gray is recommended.            \n'...
'                                                                           \n'...
'  Choose from these colormaps:                                             \n'...
'  autumn bone colorcube cool copper flag gray hot hsv jet lines pink       \n'...
'  prism spring summer white winter                                         \n'...
]);

ToolHelp{3} = sprintf([...
'  Help for the default image folder, in the main CellProfiler window:      \n'...
'  Select the main folder containing the images you want to analyze.  Use   \n'...
'  the Browse button to select the folder, or carefully type the full       \n'...
'  pathname in the box. You can change the folder which is the              \n'...
'  default image folder upon CellProfiler startup by using File > Set       \n'...
'  Preferences.                                                             \n'...
'                                                                           \n'...
'  The contents of the folder are shown to the left, which allows you to    \n'...
'  check file names or look at the order of images from within CellProfiler.\n'...
'  Doubleclicking image file names in this list will open them.             \n'...
'  Doubleclicking on PIPE or OUT files will ask if you want to load a       \n'...
'  pipeline from the file. To refresh the contents of this window, press    \n'...
'  enter in the default image directory edit box.                           \n'...
'                                                                           \n'...
'  You will have the option within the Load Images module to retrieve images\n'...
'  from other folders, but the folder selected here will be the default.    \n'...
'                                                                           \n'...
'  Be careful that files other than your images of interest are not stored  \n'...
'  within the folder you have selected.  The following file extensions are  \n'...
'  ignored by CellProfiler, so these are the only types which can be left in\n'...
'  the folder with the images you want to analyze:                          \n'...
'    m, m~, frk~, xls, doc, rtf, txt, csv, or any file beginning with a dot.\n'...
'                                                                           \n'...
'                                                                           \n'...
'                                                                           \n'...
'  CellProfiler Developer''s version note: If you would like to add a        \n'...
'  particular file format to this list, first save a copy of the main       \n'...
'  CellProfiler program (CellProfiler.m) in a separate location as a backup \n'...
'  in case you make an error, then go to File > Open and select             \n'...
'  CellProfiler.m.  Find the line that looks like the following and add any \n'...
'  extensions:                                                              \n'...
'    DiscardsByExtension = regexpi(FileNamesNoDir, ''\\.(m|mat|m~|frk~|xls|   \n'...
'                                         doc|rtf|txt|csv)$'', ''once'');      \n'...
'  Save the file.  You do not need to relaunch MATLAB or CellProfiler for   \n'...
'  this change to take effect.                                              \n'...
]);

ToolHelp{4} = sprintf([...
'  Help for the default output folder, in the main CellProfiler window:     \n'...
'  Select the main folder where you want CellProfiler''s output to be saved. \n'...
'  Use the Browse button to select the folder, or carefully type the full   \n'...
'  pathname in the box. You can change the folder which appears upon        \n'...
'  CellProfiler startup by using File > Set Preferences.                    \n'...
'                                                                           \n'...
'  You will have the option to save output to other locations: for example, \n'...
'  the output file can be saved elsewhere by typing a full pathname in the  \n'...
'  ''Name the output file'' box, and many modules (like Save Images) allow you\n'...
'  to override the default output folder by entering the pathname in the    \n'...
'  settings.                                                                \n'...
]);

ToolHelp{5} = sprintf([...
'  Programming Notes for CellProfiler Developer''s version                               \n'...
'                                                                                       \n'...
'  *** INTRODUCTION ***                                                                 \n'...
'                                                                                       \n'...
'  You can write your own modules, image tools, and data tools for                      \n'...
'  CellProfiler - the easiest way is to modify an existing one. CellProfiler            \n'...
'  is modular: every module, image tool, and data tool is a single MATLAB               \n'...
'  m-file (extension = .m). Upon startup, CellProfiler scans its Modules,               \n'...
'  DataTools, and ImageTools folders looking for files. Simply put your new             \n'...
'  file in the proper folder and it will appear in the proper place. They               \n'...
'  are automatically categorized, their help extracted, etc.                            \n'...
'                                                                                       \n'...
'  If you have never tried computer programming or have not used MATLAB,                \n'...
'  please do give it a try. Many beginners find this language easy to learn             \n'...
'  and the code for CellProfiler is heavily documented so that you can                  \n'...
'  understand what each line does. It was designed so that biologists                   \n'...
'  without programming experience could adapt it.                                       \n'...
'                                                                                       \n'...
'  *** HELP SECTIONS AT THE BEGINNING OF EACH MODULE AND TOOL ***                       \n'...
'                                                                                       \n'...
'  The first unbroken block of lines will be extracted as help by                       \n'...
'  CellProfiler''s ''Help for this analysis module'' button, Help for image                \n'...
'  tools and data tools (Help menu in the main CellProfiler window) as well             \n'...
'  as MATLAB''s built in ''help'' and ''doc'' functions at the command line. It              \n'...
'  will also be used to automatically generate a pdf manual page for the                \n'...
'  module. An example image demonstrating the function of the module can                \n'...
'  also be saved in tif format, using the same name as the module, and it               \n'...
'  will automatically be included in the pdf manual page as well. Follow                \n'...
'  the convention of: Help for the XX module, Category (use an exact match              \n'...
'  of one of the categories so your module appears in the proper place in               \n'...
'  the "Add module" window), Short description, purpose of the module,                  \n'...
'  description of the settings and acceptable range for each, how it works              \n'...
'  (technical description), and See also NameOfModule. The license/author               \n'...
'  information should be separated from the help lines with a blank line so             \n'...
'  that it does not show up in the help displays.                                       \n'...
'                                                                                       \n'...
'  *** SETTINGS (CALLED ''VARIABLES'' IN THE CODE) ***                                    \n'...
'                                                                                       \n'...
'  Variables are automatically extracted from lines in a commented section              \n'...
'  near the beginning of each module. Even though they look like comments               \n'...
'  they are critical for the functioning of the code. The syntax here is                \n'...
'  critical - indenting lines or changing the spaces before and after the               \n'...
'  equals sign will affect the ability of the variables to be read properly.            \n'...
'                                                                                       \n'...
'  * The ''%%textVAR'' lines contain the variable descriptions which are                   \n'...
'  displayed in the CellProfiler main window next to each variable box. This            \n'...
'  text will wrap appropriately so it can be as long as desired, but it must            \n'...
'  be kept on a single line in the m-file (do not allow it to wrap).                    \n'...
'                                                                                       \n'...
'  * Whether the variable is entered into an edit box, chosen from a popup              \n'...
'  menu, or selected using browse buttons is determined by %%inputtypeVAR                \n'...
'  lines and the %%textVAR lines. The options are:                                       \n'...
'  - edit box (omit any %%inputtypeVAR line for that variable number and use             \n'...
'  a %%defaultVAR line to specify what text will appear in the box when the              \n'...
'  user first loads the module)                                                         \n'...
'  - popup menu (use %%inputtypeVAR = popupmenu and then use %%choiceVAR                  \n'...
'  lines, in the order you want them to appear, for each option that should             \n'...
'  appear in the popup menu)                                                            \n'...
'  - popupmenu custom (this allows the user to choose from choices but also             \n'...
'  to have the option of typing in a custom entry. Use %%inputtypeVAR =                  \n'...
'  popupmenu custom and then use %%choiceVAR lines, in the order you want                \n'...
'  them to appear, for each option that should appear in the popup menu)                \n'...
'  - pathname box + browse button (omit the %%inputtypeVAR line and instead              \n'...
'  use %%pathnametextVAR - the default shown in the edit box will be a                   \n'...
'  period; this default is currently not alterable)                                     \n'...
'  - filename box + browse button (omit the %%inputtypeVAR line and instead              \n'...
'  use %%filenametextVAR - the default shown in the edit box will be the text            \n'...
'  "Do not use"; this default is currently not alterable)                               \n'...
'                                                                                       \n'...
'  * The %%infotypeVAR lines specify the group that a particular entry will              \n'...
'  belong to. You will notice that many entries that the user types into the            \n'...
'  main window of CellProfiler are then available in popup menus in other               \n'...
'  modules. This works by classifying certain types of variable entries as              \n'...
'  follows:                                                                             \n'...
'  - imagegroup indep: the user''s entry will be added to the imagegroup, and            \n'...
'  will therefore appear in the list of selectable images for variables                 \n'...
'  whose type is ''imagegroup''. Usually used in combination with an edit                 \n'...
'  box; i.e. no %%inputtype line.                                                        \n'...
'  - imagegroup: will display the user''s image entries. Usually used in                 \n'...
'  combination with a popupmenu.                                                        \n'...
'  - objectgroup indep and objectgroup: Same idea as imagegroup, for passing            \n'...
'  along object names.                                                                  \n'...
'  - outlinegroup indep and outlinegroup: Same idea as imagegroup, for                  \n'...
'  passing along outline names.                                                         \n'...
'  - datagroup indep and datagroup: Same idea as imagegroup, for passing                \n'...
'  along text/data names.                                                               \n'...
'  - gridgroup indep and gridgroup: Same idea as imagegroup, for passing                \n'...
'  along grid names.                                                                    \n'...
'                                                                                       \n'...
'  * The line of actual code within each group of variable lines is what                \n'...
'  actually extracts the value that the user has entered in the main window             \n'...
'  of CellProfiler (which is stored in the handles structure) and saves it              \n'...
'  as a variable in the workspace of this module with a meaningful name.                \n'...
'                                                                                       \n'...
'  * For CellProfiler to load modules and pipelines correctly, the order of             \n'...
'  variable information should be as follows:                                           \n'...
'  %%textVAR01 = Whatever text description you want to appear                            \n'...
'  %%defaultVAR01 = Whatever text you want to appear                                     \n'...
'  (OR, %%choiceVAR01 = Whatever text)                                                   \n'...
'  %%infotypeVAR01 = imagegroup indep                                                    \n'...
'  BlaBla = char(handles.Settings.VariableValues{CurrentModuleNum,1});                  \n'...
'  %%inputtypeVAR01 = popupmenu                                                          \n'...
'    For cases in which the variable input is optional or your module should            \n'...
'  ignore the contents of the variable box, the standard placeholder text is            \n'...
'  "Do not use." Please follow this naming convention whenever new modules              \n'...
'  are created or modified.                                                             \n'...
' 	In particular, when the input type is "popupmenu custom", the                        \n'...
'  choiceVAR01 line should be after textVAR01. This order is necessary                  \n'...
'  because the textVAR01 creates a VariableBox associated with a variable               \n'...
'  number. Also, the defaultVAR01 value will inadvertently overwrite saved              \n'...
'  settings when loading a saved pipeline if it is located after                        \n'...
'  infotypeVAR01 or inputtypeVAR01.                                                     \n'...
'                                                                                       \n'...
'  When loading the settings of pipeline modules, CellProfiler tries to find            \n'...
'        handles.Settings.VariableValues{ModuleNums,i} from the list of                 \n'...
'        handles.VariableBox{ModuleNums}(i),                                            \n'...
'  for example,                                                                         \n'...
'        the pipeline-specified ''Gaussian Filter'' from the list of                      \n'...
'        available Smoothing methods in the loaded module.                              \n'...
'  It is searched and set in CellProfiler.m, exactly starting                           \n'...
'  with this line of code:                                                              \n'...
'        PPos = find(strcmp(handles.Settings.VariableValues{ModuleNums,i},OptList));    \n'...
'  You may want to add your own action code here when a certain setting is              \n'...
'  found in a loaded module.                                                            \n'...
'                                                                                       \n'...
'  * CellProfiler uses VariableRevisionNumbers to help programmers notify               \n'...
'  users when something significant has changed about the variables.                    \n'...
'  For example, if you have switched the position of two variables,                     \n'...
'  loading a pipeline made with the old version of the module will not                  \n'...
'  behave as expected when using the new version of the module, because                 \n'...
'  the settings (variables) will be mixed up. The line should use this                  \n'...
'  syntax:                                                                              \n'...
'  %%%%%%VariableRevisionNumber = 1                                                        \n'...
'     If the module does not have this line, the VariableRevisionNumber is              \n'...
'  assumed to be 0.  This number need only be incremented when a change made            \n'...
'  to the modules will affect a user''s previously saved settings. There is a            \n'...
'  revision number at the end of the license info at the top of the m-file              \n'...
'  for our source-control revisions - this revision number does not affect              \n'...
'  the user''s previously saved settings files and you can ignore it.                    \n'...
'  However, a line with "%% $Revision: 5791 $" should be added to any new                \n'...
'  function, so that the version-control system will find and update the                \n'...
'  number upon new commits.                                                             \n'...
'                                                                                       \n'...
'  *** STORING AND RETRIEVING DATA: THE HANDLES STRUCTURE ***                           \n'...
'                                                                                       \n'...
'  In CellProfiler (and MATLAB in general), each independent function                   \n'...
'  (module) has its own workspace and is not able to ''see'' variables                    \n'...
'  produced by other modules. For data or images to be shared from one                  \n'...
'  module to the next, they must be saved to what is called the ''handles                \n'...
'  structure''. This is a variable, whose class is ''structure'', and whose                \n'...
'  name is handles. The contents of the handles structure can be printed out            \n'...
'  at the command line of MATLAB using the Tech Diagnosis button and typing             \n'...
'  "handles" (no quotes). The only variables present in the *main* handles              \n'...
'  structure are handles to figures and GUI elements. Everything else should            \n'...
'  be saved in one of the following substructures:                                      \n'...
'                                                                                       \n'...
'  handles.Settings:                                                                    \n'...
'  Everything in handles.Settings is stored when the user uses File > Save              \n'...
'  pipeline, and these data are loaded into CellProfiler when the user uses             \n'...
'  File > Load pipeline. This substructure contains all necessary                       \n'...
'  information to re-create a pipeline, including which modules were used               \n'...
'  (including variable revision numbers), their settings (variables), and               \n'...
'  the pixel size. Fields currently in handles.Settings: PixelSize,                     \n'...
'  VariableValues, NumbersOfVariables, VariableInfoTypes,                               \n'...
'  VariableRevisionNumbers, ModuleNames, SelectedOption.                                \n'...
'     *** N.B. handles.Settings.PixelSize is where you should retrieve the              \n'...
'  PixelSize if needed, not in handles.Preferences!                                     \n'...
'                                                                                       \n'...
'  handles.Pipeline: This substructure is deleted at the beginning of                   \n'...
'  the analysis run (see ''Which substructures are deleted prior to an                   \n'...
'  analysis run?'' below).  handles.Pipeline is for storing data which                   \n'...
'  must be retrieved by other modules. This data can be overwritten as                  \n'...
'  each image cycle is processed, or it can be generated once and then                  \n'...
'  retrieved during every subsequent image set''s processing, or it can                  \n'...
'  be saved for each image set by saving it according to which image                    \n'...
'  cycle is being analyzed, depending on how it will be used by other                   \n'...
'  modules. Example fields in handles.Pipeline: FileListOrigBlue,                       \n'...
'  PathnameOrigBlue, FilenameOrigBlue, OrigBlue (which contains the                     \n'...
'  actual image). Whether the handles.Pipeline structure is stored in                   \n'...
'  the output file or not depends on whether you are in Fast Mode (see                  \n'...
'  Help > HelpFastMode or File > SetPreferences).  See note below for                   \n'...
'  the FileList..., Pathname..., and Filename... fields.                                \n'...
'                                                                                       \n'...
'  handles.Current:                                                                     \n'...
'  This substructure contains information needed for the main CellProfiler              \n'...
'  window display and for the various modules and help files to function. It            \n'...
'  does not contain any module-specific data (which is in handles.Pipeline).            \n'...
'  Example fields in handles.Current: NumberOfModules, StartupDirectory,                \n'...
'  DefaultOutputDirectory, DefaultImageDirectory, FilenamesInImageDir,                  \n'...
'  CellProfilerPathname, CurrentHandles, ImageToolsFilenames, ImageToolHelp,            \n'...
'  DataToolsFilenames, DataToolHelp, HelpFilenames, Help, NumberOfImageSets,            \n'...
'  SetBeingAnalyzed, SaveOutputHowOften, TimeStarted, CurrentModuleNumber,              \n'...
'  FigureNumberForModuleXX.                                                             \n'...
'                                                                                       \n'...
'  handles.Preferences:                                                                 \n'...
'  Everything in handles.Preferences is stored in the file                              \n'...
'  CellProfilerPreferences.mat when the user uses File > Set Preferences.               \n'...
'  These preferences are loaded upon launching CellProfiler, or individual              \n'...
'  preferences files can be loaded using File > Load Preferences. Fields in             \n'...
'  handles.Preferences: PixelSize, DefaultModuleDirectory,                              \n'...
'  DefaultOutputDirectory, DefaultImageDirectory, IntensityColorMap,                    \n'...
'  LabelColorMap, StripPipeline, SkipErrors, FontSize.                                  \n'...
'     The PixelSize, DefaultImageDirectory, and DefaultOutputDirectory                  \n'...
'  fields can be changed for the current session by the user using edit                 \n'...
'  boxes in the main CellProfiler window, which changes their values in                 \n'...
'  handles.Settings or handles.Current. Therefore:                                      \n'...
'     *** N.B. handles.Settings.PixelSize is where you should retrieve the              \n'...
'  PixelSize if needed, not in handles.Preferences!                                     \n'...
'     *** N.B. handles.Current.DefaultImageDirectory is where you should                \n'...
'  retrieve the DefaultImageDirectory if needed, not in handles.Preferences!            \n'...
'     *** N.B. handles.Current.DefaultOutputDirectory is where you should               \n'...
'  retrieve the DefaultOutputDirectory if needed, not in                                \n'...
'  handles.Preferences!                                                                 \n'...
'                                                                                       \n'...
'  handles.Measurements:                                                                \n'...
'  Everything in handles.Measurements contains data specific to each image              \n'...
'  analyzed and is therefore accessed by the data tools. This substructure              \n'...
'  is deleted at the beginning of the analysis run (see ''Which substructures            \n'...
'  are deleted prior to an analysis run?'' below).                                       \n'...
'     Note that two types of measurements are typically made: Object                    \n'...
'  and Image measurements.  Object measurements have one number for every               \n'...
'  object in the image (e.g. Object Area) and image measurements have one               \n'...
'  number for the entire image, which could come from one measurement from              \n'...
'  the entire image (e.g. Image TotalIntensity), or which could be an                   \n'...
'  aggregate measurement based on individual object measurements (e.g. Image            \n'...
'  MeanAreaCells).  Use the appropriate substructure to ensure that your data           \n'...
'  will be extracted properly.                                                          \n'...
'    The relationships between objects can also be defined.  For                        \n'...
'  example, a nucleus might be associated with a particular cytoplasm                   \n'...
'  and therefore each nucleus has a cytoplasm''s number in the nucleus''                  \n'...
'  measurement field which links the two. Or, for multiple speckles                     \n'...
'  within a nucleus, each speckle will have a nucleus'' number                           \n'...
'  indicating which nucleus the speckle belongs to (see the Relate                      \n'...
'  module or Identify Secondary or Tertiary modules). Image                             \n'...
'  measurements include a few standard fields: ModuleErrorFeatures,                     \n'...
'  ModuleError, TimeElapsed, FileName_IMAGENAME, and                                    \n'...
'  PathName_IMAGENAME.  See note below for fields having to do with                     \n'...
'  file and path names.                                                                 \n'...
'                                                                                       \n'...
'    Measurement storage was overhauled 2008-04-25 such that all modules                \n'...
'  that record measurements must use the subfunction CPaddmeasurements. The             \n'...
'  usage is:                                                                            \n'...
'                                                                                       \n'...
'    handles = CPaddmeasurements(handles,ObjectName,FeatureName,Data);                  \n'...
'                                                                                       \n'...
'  This will create this data structure:                                                \n'...
'                                                                                       \n'...
'    handles.Measurements.ObjectName.FeatureName = Data                                 \n'...
'                                                                                       \n'...
'    where                                                                              \n'...
'      -ObjectName is a single string denoting the name of the object, or               \n'...
'        simply "Image" for image measurements                                          \n'...
'      -FeatureName is a single string, with category and parameters                    \n'...
'        (optional) underscored, like this:                                             \n'...
'                                                                                       \n'...
'                    Category_SpecificFeatureName_Parameters                            \n'...
'                                                                                       \n'...
'            * Category = Module name (e.g., AreaShape), or useful category,            \n'...
'                or nothing if there is no appropriate category (e.g., if               \n'...
'                feature name = ObjectCount there is no category).                      \n'...
'                - Note: Do not include the word "Measure" when naming.                 \n'...
'                - Note: If you create a new category, be sure to add it to             \n'...
'                the list of categories below, as well as in                            \n'...
'                CPgetfeaturenamesfromnumbers, and all choiceVAR lists so that          \n'...
'                your new category will be selectable (in the future, this will         \n'...
'                be a drop down menu) for modules that ask the user to                  \n'...
'                choose a category.                                                     \n'...
'            * SpecificFeatureName = specific feature recorded by a module              \n'...
'                (e.g., Perimeter). Usually the module recording the                    \n'...
'                measurement assigns this name, but a few modules allow the             \n'...
'                user to type in the name of the feature (e.g., the                     \n'...
'                CalculateRatios module allows the user to name the ratio).             \n'...
'                - Note: Be sure to list the Specific features measured by              \n'...
'                the module in the Help section. See MeasureObjectAreaShape             \n'...
'                for an example.                                                        \n'...
'            * Parameters (optional) are used for modules that measure the              \n'...
'                same objects in different ways (e.g. the                               \n'...
'                MeasureObjectIntensity module can measure intensities for              \n'...
'                Nuclei in two different images, blue and green). Primarily             \n'...
'                used for Channel or scale of Texture. Multiple parameters              \n'...
'                can be separated by underscores.                                       \n'...
'                (someday, CP will look at upstream modules and make dropdowns)         \n'...
'                                                                                       \n'...
'            Category List:                                                             \n'...
'            These reflect choiceVAR lists in many modules, with their                  \n'...
'            necessary extra parameters:                                                \n'...
'                No extra parameters:                                                   \n'...
'                    AreaShape, Math                                                    \n'...
'                Image:                                                                 \n'...
'                    Imageintensity, Granularity, Children, Parent, AreaOccupied        \n'...
'                SizeScale:                                                             \n'...
'                    Neighbors                                                          \n'...
'                SizeScale and Image:                                                   \n'...
'                    Texture and RadialDistribution                                     \n'...
'                Not to include in choiceVAR lists:                                     \n'...
'                    Align, Ratio, ClassifyObjects, ClassifyObjsByTwoMeas,              \n'...
'                    ModuleError, Crop (though Crop could be added to the               \n'...
'                    Image group above if needed), DefinedGrid                          \n'...
'            When these categories are altered, please update the code in               \n'...
'                CPgetfeaturenamesfromnumbers and any module that uses this             \n'...
'                subfunction.                                                           \n'...
'                                                                                       \n'...
'        Note: CPjoinstrings can be helpful in constructing feature                     \n'...
'        names from strings and integers.  (If you are just joining                     \n'...
'        strings, it is usually more convenient to join them                            \n'...
'        directly with [''texture_'', stringvariable], etc.)                              \n'...
'        Usage: CPjoinstrings(''texture'',42,''foo'') => ''texture_42_foo''                   \n'...
'                                                                                       \n'...
'      -Data is either:                                                                 \n'...
'        (a) Nx1 vector of numerical data, one number per object where there            \n'...
'        are N objects.                                                                 \n'...
'        (b) [], i.e., the empty matrix if the module did not measure any               \n'...
'        objects in this instance. YES, it is very important to pass the                \n'...
'        empty matrix through CPaddmeasurements even if no objects were                 \n'...
'        found or measured for a particular image.                                      \n'...
'        (c) A single string (only makes sense when the ObjectName =                    \n'...
'        "Image")                                                                       \n'...
'        (d) In the future, we might add the capability to store Nx1                    \n'...
'        strings, i.e., one string for every object.                                    \n'...
'                                                                                       \n'...
'    Be sure to consider whether measurements you are storing will overwrite            \n'...
'  each other if more than one of the same module is placed in the pipeline.            \n'...
'  You can differentiate measurements by including something specific in the            \n'...
'  name (e.g. Intensity modules include the image name (e.g. Blue or Green)             \n'...
'  in the substructure name). There are also several examples of modules                \n'...
'  where new measures are appended to the end of an existing substructure               \n'...
'  (i.e. forming a new column). See Calculate Ratios.                                   \n'...
'                                                                                       \n'...
'  handles.Measurements: Order                                                          \n'...
'  Be certain that the order in which measurements are added correspond to              \n'...
'  the Feature & FeatureNumber in each function''s Help section.  This                   \n'...
'  FeatureNumber will correspond to the order of CPaddmeasurements                      \n'...
'  statements within each function.  In the future, this will be superceded             \n'...
'  by a more intelligent measurement selection system using context dependent           \n'...
'  drop-down slectors.                                                                  \n'...
'                                                                                       \n'...
' %%%%%%%%                                                                                  \n'...
'  Why are file names stored in several places in the handles                           \n'...
'  structure?  The Load Images module creates all of the following:                     \n'...
'   - handles.Pipeline.FileListIMAGENAME                                                \n'...
'   - handles.Pipeline.Pathname                                                         \n'...
'   - handles.Pipeline.FilenameIMAGENAME                                                \n'...
'   - handles.Measurements.Image.PathName_IMAGENAME                                     \n'...
'   - handles.Measurements.Image.FileName_IMAGENAME                                     \n'...
'  The primary reason for the fields in the Measurements branch is that                 \n'...
'  it allows the information to be exported easily.  However, these                     \n'...
'  fields are also used elsewhere, e.g., the SaveImages module.                         \n'...
'    The FileList field is mainly useful for movies.  For movies, the                   \n'...
'  FileList field has the original name of the movie file and how many                  \n'...
'  frames it contains. The Filenames field has the original movie file                  \n'...
'  name and appends the frame number for every frame in the movie. This                 \n'...
'  allows the names to be used in other modules such as SaveImages,                     \n'...
'  which would otherwise over-write itself on every cycle using the                     \n'...
'  original file name. The FileList location is created at the                          \n'...
'  beginning of the run and contains all the images that will possibly                  \n'...
'  be analyzed, whereas the Filename location is only populated as the                  \n'...
'  images cycle through.                                                                \n'...
'    When images are loaded from subdirectories, the information stored                 \n'...
'  in the Pipeline and Measurements branches become subtly different.                   \n'...
'  Let B be the base directory (either the default image directory or                   \n'...
'  the directory specified as an option to LoadImages).  Suppose that N                 \n'...
'  image files are loaded from various subdirectories of B.  Let Si be                  \n'...
'  the subdirectory of the i-th file loaded, and let Fi be its file                     \n'...
'  name.  Then h.P.Pathname will be the string B; h.P.FilenameIMAGENAME                 \n'...
'  will be a cell array { ''S1/F1'', ''S2/F2'', ... };                                      \n'...
'  h.M.I.PathName_IMAGENAME will be a cell array { ''B/S1'', ''B/S2'',                      \n'...
'  ... }; and h.M.I.FileName_IMAGENAME will be a cell array { ''F1'',                     \n'...
'  ''F2'', ... }.                                                                         \n'...
'                                                                                       \n'...
'  Which substructures are deleted prior to an analysis run?                            \n'...
'  Anything stored in handles.Measurements or handles.Pipeline will be                  \n'...
'  deleted at the beginning of the analysis run, whereas anything stored in             \n'...
'  handles.Settings, handles.Preferences, and handles.Current will be                   \n'...
'  retained from one analysis to the next. It is important to think about               \n'...
'  which of these data should be deleted at the end of an analysis run                  \n'...
'  because of the way MATLAB saves variables: For example, a user might                 \n'...
'  process 12 image sets of nuclei which results in a set of 12 measurements            \n'...
'  ("TotalStainedArea") stored in handles.Measurements.Image. In addition, a            \n'...
'  processed image of nuclei from the last image set is left in                         \n'...
'  handles.Pipeline.SegmentedNuclei. Now, if the user uses a different                  \n'...
'  module which happens to have the same measurement output name                        \n'...
'  "TotalStainedArea" to analyze 4 image sets, the 4 measurements will                  \n'...
'  overwrite the first 4 measurements of the previous analysis, but the                 \n'...
'  remaining 8 measurements will still be present. So, the user will end up             \n'...
'  with 12 measurements from the 4 sets. Another potential problem is that              \n'...
'  if, in the second analysis run, the user runs only a module which depends            \n'...
'  on the output "SegmentedNuclei" but does not run a module that produces              \n'...
'  an image by that name, the module will run just fine: it will just                   \n'...
'  repeatedly use the processed image of nuclei leftover from the last image            \n'...
'  set, which was left in handles.Pipeline.                                             \n'...
'                                                                                       \n'...
'  How do I save the handles structure in a GUI module?                                 \n'...
'  Any changes you make to the handles structure are not kept from one                  \n'...
'  module to the next unless they are saved to the GUI first. This is done              \n'...
'  in MATLAB by using the command guidata(gcbo,handles), where gcbo is a                \n'...
'  function which identifies the CellProfiler window to the module. Since               \n'...
'  the guidata command can only store one variable at a time, be sure to use            \n'...
'  it on the handles structure only.                                                    \n'...
'                                                                                       \n'...
'  *** IMAGE ANALYSIS ***                                                               \n'...
'                                                                                       \n'...
'  If you plan to use the same function in two different m-files (e.g. a                \n'...
'  module and a data tool, or two modules), it is helpful to write a                    \n'...
'  CPsubfunction called by both m-files so that you have only one                       \n'...
'  subfunction''s code to maintain if any changes are necessary.                         \n'...
'                                                                                       \n'...
'  Images loaded into CellProfiler are in the 0 to 1 range for consistency              \n'...
'  across modules. When retrieving images into your module, you can check               \n'...
'  the images for proper range, size, color/gray, etc using the                         \n'...
'  CPretrieveimage subfunction.                                                         \n'...
'                                                                                       \n'...
'  We have used many MATLAB functions from the image processing toolbox.                \n'...
'  Currently, CellProfiler does not require any other toolboxes for                     \n'...
'  processing.                                                                          \n'...
'                                                                                       \n'...
'  The ''drawnow'' function allows figure windows to be updated and buttons to            \n'...
'  be pushed (like the pause, cancel, help, and view buttons).  The                     \n'...
'  ''drawnow'' function is sprinkled throughout the code so there are plenty              \n'...
'  of breaks where the figure windows/buttons can be interacted with.  This             \n'...
'  does theoretically slow the computation somewhat, so it might be                     \n'...
'  reasonable to remove most of these lines when running jobs on a cluster              \n'...
'  where speed is important.                                                            \n'...
'                                                                                       \n'...
'  *** ERROR HANDLING ***                                                               \n'...
'                                                                                       \n'...
'  * In data tools & image tools:                                                       \n'...
'        CPerrordlg([''Image processing was canceled in the '',ModuleName,''               \n'...
'                module because your entry '',ValueX,'' was invalid.''])                   \n'...
'        return                                                                         \n'...
'                                                                                       \n'...
'  * In modules and CPsubfunctions (no need for "return"):                              \n'...
'        error(''Your error message here.'')                                              \n'...
'                                                                                       \n'...
'  * Note:                                                                              \n'...
'  Always try to make the subfunctions as less likely to have errors as                 \n'...
'  possible. Whenever you can, have error checks in the calling function                \n'...
'  before the subfunction gets called. Since CPsubfunctions use                         \n'...
'  error(''message''), you should try to nest any calls to them in a                      \n'...
'  try/catch. Plus, this allows you to add more specific information to the             \n'...
'  error message (such as where in the calling function did the error                   \n'...
'  occur). To do this, you can just throw an error whose message has your               \n'...
'  additional information together with lasterr (which retrieves the last               \n'...
'  error message). In data tools and image tools CPerrordlg(''message'') and              \n'...
'  return is needed because they are usually called independently, and using            \n'...
'  error(''message'') would just stop execution, but would not prompt the user            \n'...
'  with the corresponding error message.                                                \n'...
'                                                                                       \n'...
'  *** DISPLAYING RESULTS ***                                                           \n'...
'                                                                                       \n'...
'  Each module checks whether its figure is open before calculating images              \n'...
'  that are for display only. This is done by examining all the figure                  \n'...
'  handles for one whose handle is equal to the assigned figure number for              \n'...
'  this algorithm. If the figure is not open, everything between the "if"               \n'...
'  and "end" is ignored (to speed execution), so do not do any important                \n'...
'  calculations there. Otherwise an error message will be produced if the               \n'...
'  user has closed the window but you have attempted to access data that was            \n'...
'  supposed to be produced by this part of the code.  This is especially                \n'...
'  problematic when running on a cluster of computers with no displays. If              \n'...
'  you plan to save images which are normally produced for display only, the            \n'...
'  corresponding lines should be moved outside this if statement. Also, any             \n'...
'  additional uicontrols (popupmenus, pushbuttons) should be designed                   \n'...
'  using the unit of pixels, since this is standard across platforms unlike             \n'...
'  other units such as inches and points.                                               \n'...
'                                                                                       \n'...
'  STEP 1: Find the appropriate figure window. If it is closed, usually none            \n'...
'  of the remaining steps are performed.                                                \n'...
'    ThisModuleFigureNumber = handles.Current.([''FigureNumberForModule'',CurrentModule]);\n'...
'    if any(findobj == ThisModuleFigureNumber)                                          \n'...
'                                                                                       \n'...
'  STEP 2: Activate the appropriate figure window so subsequent steps are               \n'...
'  performed inside this window:                                                        \n'...
'    CPfigure(handles,''Image'',ThisModuleFigureNumber);                                  \n'...
'  For figures that contain any images, choose ''Image'', otherwise choose                \n'...
'  ''Text''. ''Image'' figures will have the RGB checkboxes which allow                     \n'...
'  displaying individual channels, the InteractiveZoom and CellProfiler                 \n'...
'  Image Tools menu items, and the Raw/Stretched intensity scale pulldown.              \n'...
'                                                                                       \n'...
'  Note: unfortunately there is no convenient way right now to have more                \n'...
'  than one figure window per module. We work around this in the case of                \n'...
'  IdPrimAutomatic when run in "test mode", for example, by creating a new              \n'...
'  window with a special ''Tag'' property that allows you to find it again in             \n'...
'  subsequent cycles. Having the ''Name'' property of the figure window                   \n'...
'  containing "cycle #" at the end allows CellProfiler to recognize it and              \n'...
'  list it in the Windows menu.                                                         \n'...
'  Also note: In general, you should not change figure properties like this:            \n'...
'  CPfigure(''Tag'', ''My figure name'')                                                    \n'...
'  ...because it messes up the menus in the figure window. Use this instead:            \n'...
'  set(FigureHandle,''Tag'',''My figure name'');                                            \n'...
'                                                                                       \n'...
'  STEP 3: (only during starting image cycle) Make the figure the proper                \n'...
'  size:                                                                                \n'...
'    if handles.Current.SetBeingAnalyzed == handles.Current.StartingImageSet            \n'...
'      CPresizefigure('''',''NarrowText'',ThisModuleFigureNumber)                           \n'...
'    end                                                                                \n'...
'  The figure is adjusted to fit the aspect ratio of the images, depending              \n'...
'  on how many rows and columns of images should be displayed. The choices              \n'...
'  are: OneByOne, TwoByOne, TwoByTwo, NarrowText. If a figure display is                \n'...
'  unnecessary for the module, skip STEP 2 and here use:                                \n'...
'    if handles.Current.SetBeingAnalyzed == handles.Current.StartingImageSet            \n'...
'      close(ThisModuleFigureNumber)                                                    \n'...
'    end                                                                                \n'...
'  or simply use the subfunction:                                                       \n'...
'    CPclosefigure(handles,CurrentModule)                                               \n'...
'                                                                                       \n'...
'  Note that in the above we do not use this:                                           \n'...
'    if handles.Current.SetBeingAnalyzed == 1                                           \n'...
'  ... because if the user has chosen the Restart module to resume analysis,            \n'...
'  the first image set being processed will not be #1, and yet we want the              \n'...
'  figure window to be sized properly.                                                  \n'...
'                                                                                       \n'...
'  STEP 4: Display your image:                                                          \n'...
'    ImageHandle = CPimagesc(Image,handles);                                            \n'...
'  This CPimagesc displays the image and also embeds an image tool bar which            \n'...
'  will appear when you click on the displayed image. The handles are passed            \n'...
'  in so the user''s preferences for font size and colormap are used.                    \n'...
'                                                                                       \n'...
'  *** DEBUGGING HINTS ***                                                              \n'...
'                                                                                       \n'...
'  * Use breakpoints in MATLAB to stop your code at certain points and                  \n'...
'  examine the intermediate results.                                                    \n'...
'                                                                                       \n'...
'  * To temporarily show an image during debugging, add lines like this to              \n'...
'  your code, or type them at the command line of MATLAB:                               \n'...
'        CPfigure                                                                       \n'...
'        CPimagesc(BlurredImage, [])                                                    \n'...
'        title(''BlurredImage'')                                                          \n'...
'                                                                                       \n'...
'  * To temporarily save an intermediate image during debugging, try this:              \n'...
'        imwrite(BlurredImage, ''FileName.tif'', ''FileFormat'');                           \n'...
'  Note that you may have to alter the format of the image before                       \n'...
'  saving. If the image is not saved correctly, for example, try                        \n'...
'  adding the uint8 command:                                                            \n'...
'        imwrite(uint8(BlurredImage), ''FileName.tif'', ''FileFormat'');                    \n'...
'                                                                                       \n'...
'  * To routinely save images produced by this module, see the help in                  \n'...
'  the SaveImages module.                                                               \n'...
'                                                                                       \n'...
'  * If you want to save images that are produced by other modules but that             \n'...
'  are not given an official name in the settings boxes for that module,                \n'...
'  alter the code for the module to save those images to the handles                    \n'...
'  structure and then use the Save Images module.                                       \n'...
'  The code should look like this:                                                      \n'...
'  fieldname = [''SomeDescription(optional)'',ImgOrObjNameFromSettingsBox];               \n'...
'  handles.Pipeline.(fieldname) = ImageProducedBytheModule;                             \n'...
'  Example 1:                                                                           \n'...
'  fieldname = [''Segmented'', ObjectName];                                               \n'...
'  handles.Pipeline.(fieldname) = SegmentedObjectImage;                                 \n'...
'  Example 2:                                                                           \n'...
'  fieldname = CroppedImageName;                                                        \n'...
'  handles.Pipeline.(fieldname) = CroppedImage;                                         \n'...
'                                                                                       \n'...
'  For General help files:                                                              \n'...
'  We have one line of actual code in these files so that the help is                   \n'...
'  visible. We are not using CPhelpdlg because using helpdlg instead allows             \n'...
'  the help to be accessed from the command line of MATLAB. The one line of             \n'...
'  code in each help file (helpdlg) is never run from inside CP anyway.                 \n'...
'                                                                                       \n'...
'  *** RUNNING CELLPROFILER WITHOUT THE GRAPHICAL USER INTERFACE ***                    \n'...
'                                                                                       \n'...
'  In order to run CellProfiler modules without the GUI you must have the               \n'...
'  following variables:                                                                 \n'...
'                                                                                       \n'...
'  handles.Settings.ModuleNames (for all modules in pipeline)                           \n'...
'  handles.Settings.VariableValues (for all modules in pipeline)                        \n'...
'  handles.Current.CurrentModuleNumber (must be consistent with pipeline)               \n'...
'  handles.Current.SetBeingAnalyzed (must be consistent with pipeline)                  \n'...
'  handles.Current.FigureNumberForModuleXX (for all modules in pipeline)                \n'...
'  handles.Current.NumberOfImageSets (set by LoadImages, so if it is run                \n'...
'  first, you do not need to set it)                                                    \n'...
'  handles.Current.DefaultOutputDirectory                                               \n'...
'  handles.Current.DefaultImageDirectory                                                \n'...
'  handles.Current.NumberOfModules                                                      \n'...
'  handles.Preferences.IntensityColorMap (only used for display purposes)               \n'...
'  handles.Preferences.LabelColorMap (only used for display purposes)                   \n'...
'  handles.Preferences.FontSize (only used for display purposes)                        \n'...
'                                                                                       \n'...
'  You will also need to have the CPsubfunctions folder, since our Modules              \n'...
'  call CP subfunctions for many tasks. The CurrentModuleNumber needs to be             \n'...
'  set correctly for each module in the pipeline since this is how the                  \n'...
'  variable values are called. In order to see what all of these variables              \n'...
'  look like, run a sample analysis and then go to File -> Tech Diagnosis.              \n'...
'  This will let you manipulate the handles variable in MATLAB.                         \n'...
]);

ToolHelp{6} = sprintf([...
'  Fast mode can be set in File > Set preferences.                         \n'...
'                                                                          \n'...
'  If you uncheck the box you will run in diagnostic mode, where all the   \n'...
'  intermediate images and calculations for the most recent image cycle are\n'...
'  saved in the output file, which drastically increases the output file   \n'...
'  size. Check the box if you would instead like to run in normal (fast)   \n'...
'  mode, producing smaller output files.                                   \n'...
'                                                                          \n'...
'  See also the SpeedUpCellProfiler module.                                \n'...
]);

ToolHelp{7} = sprintf([...
'  Help for memory and speed issues in CellProfiler:                         \n'...
'                                                                            \n'...
'  There are several options in CellProfiler for dealing with out-of-memory  \n'...
'  errors associated with analyzing images:                                  \n'...
'                                                                            \n'...
'  (1) Resize the input images                                               \n'...
'    If the image is high-resolution, it may be helpful to determine         \n'...
'    whether the features of interest can be processed (and accurate         \n'...
'    data obtained) by using a lower-resolution image. If this is the        \n'...
'    case, use the Resize module (under Image Processing) to scale down      \n'...
'    the image to a more manageable size, and perform the desired            \n'...
'    operations on the smaller image.                                        \n'...
'                                                                            \n'...
'  (2) Re-use the parameter names                                            \n'...
'    Each image is associated with the unique name that you give it. If      \n'...
'    you have many images, and many intermediate images created by the       \n'...
'    modules you''ve added, the total space occupied by these images may cause\n'...
'    CellProfiler to run out of memory. In this case, a solution may be      \n'...
'    to re-use names that you give to your parameters in later modules       \n'...
'    in your pipeline.                                                       \n'...
'    For example, if you choose to resize your image and you know that you   \n'...
'    don''t need the original image, you can give the resized image the same  \n'...
'    name as the original. This will overwrite the original with the smaller,\n'...
'    resized image, thereby saving space.                                    \n'...
'    Note: You must be certain that you have no use for the original image   \n'...
'    later in the pipeline, since that data will be lost by this method.     \n'...
'                                                                            \n'...
'  (3) Running without display windows                                       \n'...
'    When your images are being analyzed, the display windows created by     \n'...
'    each module in your pipeline requires memory to create. If you are      \n'...
'    not interested in seeing the intermediate output as it is produced,     \n'...
'    you can deactivate the creation of display windows. Under File > Set    \n'...
'    Preferences > Display Mode, you can specify which (if any) windows you  \n'...
'    want displayed.                                                         \n'...
'    Note: The status and error windows will still be shown so you can see   \n'...
'    the pipeline progress as your images are analyzed.                      \n'...
'                                                                            \n'...
'  (4) Use the SpeedUpCellProfiler module.                                   \n'...
'    The SpeedUpCellProfiler module permits the user to clear the images     \n'...
'    stored in memory with the exception of those specified by the user.     \n'...
'    Please see the help for the SpeedUpCellProfiler module for more details \n'...
'    and caveats.                                                            \n'...
'                                                                            \n'...
'  In addition to these, there are other options within MATLAB and within    \n'...
'  the operating system of your choice in order to maximize memory. See the  \n'...
'  MATLAB product support page "Avoiding Out of Memory Errors"               \n'...
'  (http://www.mathworks.com/support/tech-notes/1100/1107.html) for details. \n'...
'                                                                            \n'...
'  Also, there are several options for speeding up the analysis of your      \n'...
'  pipeline:                                                                 \n'...
'  (1) Running without display windows                                       \n'...
'    By setting the display mode under File > Set Preferences > Display      \n'...
'    Mode, you can turn off the module display windows which gives a bit of  \n'...
'    a gain in speed. Once your pipeline is properly set up, we recommend    \n'...
'    running the entire cycle without any windows displayed.                 \n'...
'                                                                            \n'...
'  (2) Use care in object identification                                     \n'...
'    If you have a large image which contains a large number of small        \n'...
'    objects, a good deal of computer time will be used in processing each   \n'...
'    individual object, many of which you might not need. In this case, make \n'...
'    sure that you adjust the diameter options in IdentifyPrimAutomatic to   \n'...
'    exclude small objects you are not interested in, or use a FilterObjects \n'...
'    module to eliminate objects that are not of interest.                   \n'...
]);

ToolHelp{8} = sprintf([...
'  Naming the output file:                                                  \n'...
'  Type in the text you want to use to name the output file, which is where \n'...
'  all of the information about the analysis as well as any measurements are\n'...
'  stored. ''OUT.mat'' will be added automatically at the end of whatever you \n'...
'  type in the box. The file will be saved in the default output directory  \n'...
'  unless you type a full path and file name into the output file name box. \n'...
'  The path must not have spaces or characters disallowed by your platform. \n'...
'                                                                           \n'...
'  The program prevents you from entering a name which exists already (when \n'...
'  ''OUT.mat'' is appended). This prevents overwriting an output data file by \n'...
'  accident, but is also disallowed for the following reason: when a file is\n'...
'  ''overwritten'', instead of completely overwriting the output file,        \n'...
'  MATLAB/CellProfiler just replaces some of the old data with the new data.\n'...
'  So, if you have an output file with 12 measurements and the new set of   \n'...
'  data has only 4 measurements, saving the output file to the same name    \n'...
'  would produce a file with 12 measurements: the new 4 followed by 8 old   \n'...
'  measurements.                                                            \n'...
]);

ToolHelp{9} = sprintf([...
'  What is the pixel size? The pixel size is the number of micrometers per  \n'...
'  pixel. This number is used to convert measurements to micrometers instead\n'...
'  of pixels, if you would like the size measurements to be scaled for your \n'...
'  images. By default, the pixel size is set to "1" which means that all    \n'...
'  distance measurements will be in units of pixel lengths.                 \n'...
'                                                                           \n'...
'  You can let CellProfiler convert pixel lengths to absolute units of      \n'...
'  measure (microns (micrometers)) for you by changing the pixel size or you\n'...
'  can do the conversion yourself later. The default pixel size can be set  \n'...
'  in File > Set preferences. Upon startup, the default preferences are     \n'...
'  loaded or you can load preferences using File > Load Preferences. Either \n'...
'  way, the preference for pixel size will be shown in the main window of   \n'...
'  CellProfiler. You can change the pixel size for the current session by   \n'...
'  typing it into the main window of CellProfiler.  This value is stored    \n'...
'  along with any pipelines you save, so you can check what pixel size was  \n'...
'  used in an old experiment by loading the pipeline from a pipeline file or\n'...
'  output file.                                                             \n'...
'                                                                           \n'...
'  How do you know what value to use for the pixel size? The pixel size     \n'...
'  depends on the resolution and binning of the camera and the magnification\n'...
'  of the objective lens of the microscope, in addition to the physical     \n'...
'  setup of the microscope itself. You have two options: (1) check with the \n'...
'  microscope manufacturer or service person and ask them for a table of    \n'...
'  pixel sizes for each possible combination of                             \n'...
'  resolution/binning/objectives for your scope, or (2) get a ''stage        \n'...
'  micrometer'' (a glass slide with precise markings of distances) and take  \n'...
'  pictures of it at all possible combinations of                           \n'...
'  resolution/binning/objectives for your scope. Once the pictures are      \n'...
'  acquired, open them in CellProfiler, zoom in on them and take a look at  \n'...
'  the markings on the slide relative to a single pixel in the image. Make a\n'...
'  table for yourself of the pixel size at each microscope/camera setting   \n'...
'  for future reference.                                                    \n'...
'                                                                           \n'...
'  Warning: some CellProfiler modules might currently ignore the pixel size \n'...
'  and produce data in pixel length units no matter what pixel size is set. \n'...
'  We are working to fix this.                                              \n'...
]);

ToolHelp{10} = sprintf([...
'  File > Set Preferences: The default preferences file (CellProfilerPreferences.mat) is         \n'...
'  loaded upon starting up CellProfiler and is located in the folder where the software is       \n'...
'  running (or the MATLAB root in CellProfiler Developer''s version). If you do not have          \n'...
'  permission to write files in that location, it saves the file in the current folder           \n'...
'  (Developer''s version), but then the preferences will only be used when CellProfiler is        \n'...
'  launched from that folder. If you do not have write permission in either location, save       \n'...
'  them as personal preferences and use File > Load Preferences each time you start CellProfiler.\n'...
]);

ToolHelp{11} = sprintf([...
'  File > Save Current CellProfiler code.                                 \n'...
'                                                                         \n'...
'  This is only to be used in CellProfiler Developer''s version.           \n'...
'  It allows you to save all the Modules, DataTools, ImageTools and       \n'...
'  CPsubfunctions at the current revision as a ZIP file. This file is then\n'...
'  placed in the default output directory.                                \n'...
]);

ToolHelp{12} = sprintf([...
'  Skip errors mode can be set in File > Set preferences.                   \n'...
'                                                                           \n'...
'  This option will allow you to skip modules which have produced errors. If\n'...
'  a module fails, the pipeline will continue to run. To check if any       \n'...
'  modules have failed, use Data Tools -> ExportData and be sure to export  \n'...
'  the Image data. In the resulting Image file, there will be one           \n'...
'  ModuleError field for each module. If any of these values are above 0,   \n'...
'  that means the module failed at some point in the analysis.              \n'...
]);

ToolHelp{13} = sprintf([...
'  Technical diagnosis mode is available using File > Tech Diagnosis.   \n'...
'                                                                       \n'...
'  This is only to be used in CellProfiler Developer''s version.         \n'...
'  It allows you to access the workspace of CellProfiler directly at the\n'...
'  command line of MATLAB, including looking into the handles structure.\n'...
'                                                                       \n'...
'  Type "return" at the command line of MATLAB to exit this mode.       \n'...
]);

handles.Current.HelpFilenames = {'Help' 'HelpBatchProcessing' 'HelpColormaps' 'HelpDefaultImageFolder' 'HelpDefaultOutputFolder' 'HelpDeveloperInfo' 'HelpFastMode' 'HelpMemoryAndSpeed' 'HelpOutputFilename' 'HelpPixelSize' 'HelpPreferences' 'HelpSaveCurrentCellProfilerCode' 'HelpSkipErrors' 'HelpTechDiagnosis'};
handles.Current.Help = ToolHelp;

handles.Current.GSFilenames = {'Help' 'GSCPInstallGuide' 'GSGettingStarted'};
handles.Current.GS = GSToolHelp;

%%% Compiler: END HELP
guidata(hObject, handles);



FileMenu=uimenu(hObject,'Label','File');
DataToolsMenu=uimenu(hObject,'Label','Data Tools');
WindowsMenu=uimenu(hObject,'Label','Windows','Tag','WindowsMenu','Callback',[...
    'WindowsMenu = findobj(''Tag'',''WindowsMenu'');',...
    'children = allchild(WindowsMenu);',...
    'for i=1:length(children),',...
    'if isempty(get(children(i), ''Tag'')),',...
    'delete(children(i));',...
    'end;',...
    'end;',...
    'OpenWindows = findobj(''NumberTitle'',''on'',''-and'',''-property'',''UserData'');',...
    'OpenWindows = sort(OpenWindows);',...
    'for k = 1:length(OpenWindows),',...
    'if ishandle(OpenWindows(k)),',...
    'userData = get(OpenWindows(k),''UserData'');',...
    'name = get(OpenWindows(k),''Name'');',...
    'if (~isempty(userData) && isfield(userData,''Application'') && ',...
    'isstr(userData.Application) && strcmp(userData.Application,''CellProfiler'') && ',...
    '~isempty(strfind(name,''Display, cycle #''))),',...
    'try,',...
    'h = uimenu(WindowsMenu,''Label'', [''Figure '' num2str(OpenWindows(k)) '': '' name],''UserData'',OpenWindows(k),''Callback'',''figure(get(gcbo,''''UserData''''))'');',...
    'if k==1,',...
    'set(h,''Separator'',''on'');',...
    'end;',...
    'end;',...
    'end;',...
    'end;',...
    'end;',...
    'clear WindowsMenu OpenWindows children i k h userData name;']);
HelpMenu=uimenu(hObject,'Label','Help');

uimenu(FileMenu,'Label','Open Image','Callback','CellProfiler(''OpenImage_Callback'',gcbo,[],guidata(gcbo));');
uimenu(FileMenu,'Label','Clear Pipeline','Callback','CellProfiler(''ClearPipeline_Callback'',gcbo,[],guidata(gcbo));');
uimenu(FileMenu,'Label','Save Pipeline','Accelerator','S','Callback','CellProfiler(''SavePipeline_Callback'',gcbo,[],guidata(gcbo));');
uimenu(FileMenu,'Label','Save Pipeline as text','Callback','CellProfiler(''SavePipelineAsText_Callback'',gcbo,[],guidata(gcbo));');
uimenu(FileMenu,'Label','Load Pipeline','Accelerator','P','Callback','CellProfiler(''LoadPipeline_Callback'',gcbo,[],guidata(gcbo));');
uimenu(FileMenu,'Label','Run Multiple Pipelines','Callback','CellProfiler(''RunMultiplePipelines_Callback'',gcbo,[],guidata(gcbo));');
uimenu(FileMenu,'Label','Set Preferences','Callback','CellProfiler(''SetPreferences_Callback'',gcbo,[],guidata(gcbo));');
uimenu(FileMenu,'Label','Load Preferences','Callback','CellProfiler(''LoadPreferences_Callback'',gcbo,[],guidata(gcbo));');
if ~isdeployed
    uimenu(FileMenu,'Label','Save current CellProfiler code','Callback','CellProfiler(''ZipFiles_Callback'',gcbo,[],guidata(gcbo));');
    uimenu(FileMenu,'Label','Tech Diagnosis','Accelerator','T','Callback','CellProfiler(''TechnicalDiagnosis_Callback'',gcbo,[],guidata(gcbo));');
end
uimenu(FileMenu,'Label','Analyze images','Accelerator','N','Callback','CellProfiler(''AnalyzeImagesButton_Callback'',gcbo,[],guidata(gcbo));');
uimenu(FileMenu,'Label','Quit','Callback',ClosingFunction,'Accelerator','Q');

ListOfDataTools=handles.Current.DataToolsFilenames;
for j=2:length(ListOfDataTools)
    uimenu(DataToolsMenu,'Label',char(ListOfDataTools(j)),'Callback',@(foo, bar)call_data_tool(char(ListOfDataTools(j))));
end

uimenu(WindowsMenu,'Label','Close All','Accelerator','L','Tag','Close All','Callback','CellProfiler(''CloseWindows_Callback'',gcbo,[],guidata(gcbo));');

uimenu(HelpMenu,'Label','Getting Started','Callback','CellProfiler(''HelpFiles_Callback'',gcbo,''GS'',guidata(gcbo))');
uimenu(HelpMenu,'Label','General Help','Callback','CellProfiler(''HelpFiles_Callback'',gcbo,''Help'',guidata(gcbo))');
uimenu(HelpMenu,'Label','Modules Help','Callback','CellProfiler(''ModulesHelp_Callback'',gcbo,[],guidata(gcbo))');
uimenu(HelpMenu,'Label','Image Tools Help','Callback','CellProfiler(''ImageToolsHelp_Callback'',gcbo,[],guidata(gcbo))');
uimenu(HelpMenu,'Label','Data Tools Help','Callback','CellProfiler(''DataToolsHelp_Callback'',gcbo,[],guidata(gcbo))');
%uimenu(HelpMenu,'Label','Report Bugs','Callback','CellProfiler(''ReportBugs_Callback'',gcbo,[],guidata(gcbo));');
% if ~isdeployed
%     uimenu(HelpMenu,'Label','Download New Modules','Callback','CellProfiler(''DownloadModules_Callback'',gcbo,[],guidata(gcbo));');
% end

% Set default output filename
set(handles.OutputFileNameEditBox,'string','DefaultOUT.mat')
%
% Check the website for a new version of CellProfiler
%
try %#ok<TRYNC>
    CurrentSVNVersion = get_svn_info(handles);
    WebsiteSVNVersion = urlread('http://www.cellprofiler.org/CPupdate.txt');
    if str2double(CurrentSVNVersion) < str2double(WebsiteSVNVersion)
        CPmsgbox({'A new version of CellProfiler is available at www.cellprofiler.org',...
            sprintf('You are still running version %s. The new one is version %s',CurrentSVNVersion, WebsiteSVNVersion)},...
            sprintf('Upgrade to version %s of CellProfiler',WebsiteSVNVersion));
    end
end

function call_data_tool(tool_name, foo)
try
    eval([tool_name '(guidata(gcbo));']);
    clear ans;
catch 
    ErrorMessage = lasterr;
    CPerrordlg(['An error occurred in the ' tool_name ' Data Tool: ' ErrorMessage]);
end

% --- Outputs from this function are returned to the command line.
function varargout = CellProfiler_OutputFcn(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
% Get default command line output from handles structure
varargout{1} = handles.output;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% CLEAR PIPELINE BUTTON %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function ClearPipeline_Callback(hObject, eventdata, handles) %#ok Ignore MLint

if isempty(eventdata)
    Answer = CPquestdlg('Are you sure you want to clear the existing pipeline?','Confirm','Yes','No','Yes');
else
    Answer = 'Yes';
end

if strcmp(Answer,'Yes')
    handles.Settings.ModuleNames = {};
    handles.Settings.VariableValues = {};
    handles.Settings.VariableInfoTypes = {};
    handles.Settings.VariableRevisionNumbers = [];
    handles.Settings.ModuleRevisionNumbers = [];
    handles.Settings.ModuleNotes = {};
    handles.Settings.ModuleSupportedFeatures = {};    
    delete(get(handles.variablepanel,'children'));
    set(handles.slider1,'visible','off');
    handles.VariableBox = {};
    handles.VariableDescription = {};
    set(handles.ModulePipelineListBox,'Value',1);
    handles.Settings.NumbersOfVariables = [];
    handles.Current.NumberOfModules = 0;
    contents = {'No Modules Loaded'};
    set(handles.ModulePipelineListBox,'String',contents);
    
    %%% Clear the pipeline name and path info
    handles.Current.SavedPipeline.Info.Pathname = {};
    handles.Current.SavedPipeline.Info.Filename = {};
    guidata(hObject,handles);
    
    set(handles.figure1,'name','CellProfiler');
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% LOAD PIPELINE BUTTON %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [SettingsPathname, SettingsFileName, errFlg, handles] = ...
    LoadPipeline_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.

if isempty(eventdata)
    errFlg = 0;
    [SettingsFileName, SettingsPathname] = ...
	CPuigetfile('*.mat', 'Choose a pipeline file', ...
		    handles.Current.DefaultOutputDirectory); 
    pause(.1);
    figure(handles.figure1);
else
    SettingsFileName = eventdata.SettingsFileName;
    SettingsPathname = eventdata.SettingsPathname;
end

%%% If the user presses "Cancel", the SettingsFileName.m will = 0 and
%%% nothing will happen.
if SettingsFileName == 0
    return
end

drawnow
%%% Loads the Settings file.
try
    LoadedSettings = load(fullfile(SettingsPathname,SettingsFileName));
catch
    error(['CellProfiler was unable to load ',fullfile(SettingsPathname,SettingsFileName),'. The file may be corrupt.']);
end
%%% Error Checking for valid settings file.
if ~(isfield(LoadedSettings, 'Settings') || isfield(LoadedSettings, 'handles'))
    CPerrordlg(['The file ' SettingsPathname SettingsFileName ' does not appear to be a valid settings or output file. Settings can be extracted from an output file created when analyzing images with CellProfiler or from a small settings file saved using the "Save Settings" button.  Either way, this file must have the extension ".mat" and contain a variable named "Settings" or "handles".']);
    errFlg = 1;
    return
end
%%% Figures out whether we loaded a Settings or Output file, and puts
%%% the correct values into Settings. Splices the subset of variables
%%% from the "settings" structure into the handles structure.
if (isfield(LoadedSettings, 'Settings')),
    Settings = LoadedSettings.Settings;
else
    try Settings = LoadedSettings.handles.Settings;
        Settings.NumbersOfVariables = LoadedSettings.handles.Settings.NumbersOfVariables;
    end
end

try
    [NumberOfModules, MaxNumberVariables] = size(Settings.VariableValues); %#ok Ignore MLint
    if (size(Settings.ModuleNames,2) ~= NumberOfModules)||(size(Settings.NumbersOfVariables,2) ~= NumberOfModules);
        CPerrordlg(['The file ' SettingsPathname SettingsFileName ' is not a valid settings or output file. Settings can be extracted from an output file created when analyzing images with CellProfiler or from a small settings file saved using the "Save Settings" button.']);
        errFlg = 1;
        return
    end
catch
    CPerrordlg(['The file ' SettingsPathname SettingsFileName ' is not a valid settings or output file. Settings can be extracted from an output file created when analyzing images with CellProfiler or from a small settings file saved using the "Save Settings" button.']);
    errFlg = 1;
    return
end

%%% Hide stuff in the background, but keep old values in case of errors.
OldValue = get(handles.ModulePipelineListBox,'Value');
OldString = get(handles.ModulePipelineListBox,'String');
set(handles.ModulePipelineListBox,'Value',1);
set(handles.ModulePipelineListBox,'String','Loading...');
set(get(handles.variablepanel,'children'),'visible','off');
set(handles.slider1,'visible','off');

%%% Check to make sure that the module files can be found and get paths
ModuleNames = Settings.ModuleNames;
Skipped = 0;
for k = 1:NumberOfModules
    if ~isdeployed
        CurrentModuleNamedotm = [char(ModuleNames{k}) '.m'];
         
        %% Calculating a suggested image threshold was added to
        %% MeasureImageSaturationBlur. 
        if strcmp(CurrentModuleNamedotm,'MeasureImageSaturationBlur.m')
            CurrentModuleNamedotm  = 'MeasureImageQuality.m'; %% 
            Filename = 'MeasureImageQuality';
            Pathname = handles.Preferences.DefaultModuleDirectory;
            pause(.1);
            figure(handles.figure1);
            Pathnames{k-Skipped} = Pathname;
            Settings.ModuleNames{k-Skipped} = Filename;
            CPwarndlg('Note: The module ''MeasureImageSaturationBlur'' has been replaced with ''MeasureImageQuality''.  The settings have been transferred for your convenience.')
        end
        
        %% Smooth.m was changed to SmoothOrEnhance.m since Tophat Filter
        %% was added to the Smooth Module
        if strcmp(CurrentModuleNamedotm,'Smooth.m')
            CurrentModuleNamedotm  = 'SmoothOrEnhance.m'; %% 
            Filename = 'SmoothOrEnhance';
            Pathname = handles.Preferences.DefaultModuleDirectory;
            pause(.1);
            figure(handles.figure1);
            Pathnames{k-Skipped} = Pathname;
            Settings.ModuleNames{k-Skipped} = Filename;
            CPwarndlg('Note: The module ''Smooth'' has been replaced with ''SmoothOrEnhance''.  The settings have been transferred for your convenience.')
        end
        
        %% SmoothKeepingEdges.m was merged into SmoothOrEnhance.m
        if strcmp(CurrentModuleNamedotm,'SmoothKeepingEdges.m')
            CurrentModuleNamedotm  = 'SmoothOrEnhance.m'; %% 
            Pathname = handles.Preferences.DefaultModuleDirectory;
            Pathnames{k-Skipped} = Pathname;
            CPwarndlg('Note: The module ''SmoothKeepingEdges'' has been merged into ''SmoothOrEnhance''.  The settings have been transferred for your convenience.')
        end

        %% Flip and Rotate.m were combined - the fixup for this is handled in CPimportPreviousModuleSettings
        if strcmp(CurrentModuleNamedotm,'Flip.m') || strcmp(CurrentModuleNamedotm,'Rotate.m')
            CurrentModuleNamedotm  = 'FlipAndRotate.m'; %% 
            Pathname = handles.Preferences.DefaultModuleDirectory;
            Pathnames{k-Skipped} = Pathname;
        end
        
        if strcmp(CurrentModuleNamedotm,'Subtract.m')
            CurrentModuleNamedotm = 'ImageMath.m';
            Pathname = handles.Preferences.DefaultModuleDirectory;
            Pathnames{k-Skipped} = Pathname;
        end
        
        if strcmp(CurrentModuleNamedotm,'Average.m')
            CurrentModuleNamedotm = 'ImageMath.m';
            Pathname = handles.Preferences.DefaultModuleDirectory;
            Pathnames{k-Skipped} = Pathname;
        end
        
        if strcmp(CurrentModuleNamedotm, 'UnifyObjects.m')
            CurrentModuleNamedotm = 'RelabelObjects.m';
            Pathname = handles.Preferences.DefaultModuleDirectory;
            Pathnames{k-Skipped} = Pathname;
        end
        
        if strcmp(CurrentModuleNamedotm, 'SplitIntoContiguousObjects.m')
            CurrentModuleNamedotm = 'RelabelObjects.m';
            Pathname = handles.Preferences.DefaultModuleDirectory;
            Pathnames{k-Skipped} = Pathname;
        end
        
        
        if strcmp(CurrentModuleNamedotm,'Combine.m')
            CurrentModuleNamedotm = 'ImageMath.m';
            Pathname = handles.Preferences.DefaultModuleDirectory;
            Pathnames{k-Skipped} = Pathname;
        end
        
        if strcmp(CurrentModuleNamedotm,'InvertIntensity.m')
            CurrentModuleNamedotm = 'ImageMath.m';
            Pathname = handles.Preferences.DefaultModuleDirectory;
            Pathnames{k-Skipped} = Pathname;
        end
        
        if strcmp(CurrentModuleNamedotm,'Multiply.m')
            CurrentModuleNamedotm = 'ImageMath.m';
            Pathname = handles.Preferences.DefaultModuleDirectory;
            Pathnames{k-Skipped} = Pathname;
        end
        
        if strcmp(CurrentModuleNamedotm,'CalculateRatios.m')
            CurrentModuleNamedotm = 'CalculateMath.m';
            Pathname = handles.Preferences.DefaultModuleDirectory;
            Pathnames{k-Skipped} = Pathname;
        end
        
        
        if exist(CurrentModuleNamedotm,'file')
            Pathnames{k-Skipped} = fileparts(which(CurrentModuleNamedotm)); %#ok Ignore MLint
        else
            %%% If the module.m file is not on the path, it won't be
            %%% found, so ask the user where the modules are.
            Choice = CPquestdlg(['The module ', CurrentModuleNamedotm, ' cannot be found. Either its name has changed or it was moved or deleted. What do you want to do? Note: You can also choose another module to replace ' CurrentModuleNamedotm ' if you select Search Module. It will be loaded with its default settings and you will also be able to see the saved settings of ' CurrentModuleNamedotm '.'],'Module not found','Skip Module','Search Module','Abort','Skip Module');
            switch Choice
                case 'Skip Module'
                    %%% Check if this was the only module in the pipeline or if
                    %%% all previous modules have been skipped too
                    if Skipped+1 == NumberOfModules
                        CPerrordlg('All modules in this pipeline were skipped. Loading will be canceled.','Loading Pipeline Error')
                        Abort = 1;
                    else
                        %%% Remove module info from the settings
                        View = CPquestdlg(['The pipeline will be loaded without ' CurrentModuleNamedotm ', but keep in mind that it might not work properly. Would you like to see the saved settings ' CurrentModuleNamedotm ' had?'], 'Module Skipped', 'Yes', 'No', 'Yes');
                        if strcmp(View,'Yes')
                            FailedModule(handles,Settings.VariableValues(k-Skipped,:),'Sorry, variable descriptions could not be retrieved from this file',CurrentModuleNamedotm,k-Skipped);
                        end
                        %%% Notice that if the skipped module is the one that
                        %%% had the most variables, then the VariableValues
                        %%% will have some empty columns at the end. I guess it
                        %%% doesn't matter, but it could be fixed if necessary.
                        Settings.VariableValues(k-Skipped,:) = [];
                        Settings.VariableInfoTypes(k-Skipped,:) = [];
                        Settings.ModuleNames(k-Skipped) = [];
                        Settings.NumbersOfVariables(k-Skipped) = [];
                        Settings.VariableRevisionNumbers(k-Skipped) = [];
                        Settings.ModuleRevisionNumbers(k-Skipped) = [];
                        Skipped = Skipped+1;
                        Abort = 0;
                    end
                case 'Search Module'
                    %% Why is this 'if' needed?  An outer 'if' has already
                    %% checked for this.  David 2008.02.08
                    if ~isdeployed
                        filter = '*.m';
                    else
                        filter = '*.txt';
                    end
                    [Filename Pathname] = CPuigetfile(filter, ['Find ' CurrentModuleNamedotm ' or Choose Another Module'], handles.Preferences.DefaultModuleDirectory);
                    pause(.1);
                    figure(handles.figure1);
                    if Filename == 0
                        Abort = 1;
                    else
                        Pathnames{k-Skipped} = Pathname;
                        %% Why is this 'if' needed?  An outer 'if' has already
                        %% checked for this.  David 2008.02.08
                        if ~isdeployed
                            Settings.ModuleNames{k-Skipped} = Filename(1:end-2);
                        else
                            Settings.ModuleNames{k-Skipped} = Filename(1:end-4);
                        end
                        Abort = 0;
                    end
                otherwise
                    Abort = 1;
            end
            if Abort
                %%% Restore whatever the user had before attempting to load
                set(handles.ModulePipelineListBox,'String',OldString);
                set(handles.ModulePipelineListBox,'Value',OldValue);
                ModulePipelineListBox_Callback(hObject,[],handles);
                errFlg = 1;
                return
            end
        end
    else
        Pathnames{k-Skipped} = handles.Preferences.DefaultModuleDirectory;
    end
end

%%% Save old settings in case of error
OldValue = get(handles.ModulePipelineListBox,'Value');
OldString = get(handles.ModulePipelineListBox,'String');
OldSettings = handles.Settings;
try
    OldVariableBox = handles.VariableBox;
    OldVariableDescription = handles.VariableDescription;
catch
    OldVariableBox = {};
    OldVariableDescription = {};
end

%%% Update handles structure
handles.Settings.ModuleNames = Settings.ModuleNames;
handles.Settings.VariableValues = {};
handles.Settings.VariableInfoTypes = {};
handles.Settings.VariableRevisionNumbers = [];
handles.Settings.ModuleRevisionNumbers = [];
handles.Settings.NumbersOfVariables = [];
handles.Settings.ModuleSupportedFeatures = {};
handles.VariableBox = {};
handles.VariableDescription = {};

handles.Current.SavedPipeline.Info.Pathname = SettingsPathname;
handles.Current.SavedPipeline.Info.Filename = SettingsFileName;

set(handles.figure1,'name',['CellProfiler - ',SettingsFileName]);

%%% For each module, extract its settings and check if they seem alright
revisionConfirm = 0;
Skipped = 0;
UpdatedModules = false(1,length(handles.Settings.ModuleNames));
PlaceholderUpdate = false(1,length(handles.Settings.ModuleNames));

for ModuleNum = 1:length(handles.Settings.ModuleNames)
    CurrentModuleName = handles.Settings.ModuleNames{ModuleNum-Skipped};
    %%% Replace names of modules whose name changed
    if strcmp('CreateBatchScripts',CurrentModuleName) || strcmp('CreateClusterFiles',CurrentModuleName)
        handles.Settings.ModuleNames(ModuleNum-Skipped) = {'CreateBatchFiles'};
    elseif strcmp('WriteSQLFiles',CurrentModuleName)
        handles.Settings.ModuleNames(ModuleNum-Skipped) = {'ExportToDatabase'};
    end
    
    %%% Load the module's settings

    try
        %%% If no VariableRevisionNumber was extracted, default it to 0
        if isfield(Settings,'VariableRevisionNumbers')
            SavedVarRevNum = Settings.VariableRevisionNumbers(ModuleNum-Skipped);
        else
            SavedVarRevNum = 0;
        end
        % If necessary (and doable), import settings from prior versions of
        % modules into newer ones
        [Settings,SavedVarRevNum,IsModuleModified,NeedsPlaceholderUpdateMsg,CurrentModuleName] = ...
            CPimportPreviousModuleSettings(Settings,CurrentModuleName,ModuleNum,Skipped,SavedVarRevNum);
        if IsModuleModified, UpdatedModules(ModuleNum) = true; end
        if NeedsPlaceholderUpdateMsg, PlaceholderUpdate(ModuleNum) = true; end
        
        %%% Load the module with its default settings
        [defVariableValues defVariableInfoTypes defDescriptions handles.Settings.NumbersOfVariables(ModuleNum-Skipped) DefVarRevNum ModuleRevNum] = LoadSettings_Helper(Pathnames{ModuleNum-Skipped}, CurrentModuleName);
        
        %%% Using the VariableRevisionNumber and the number of variables,
        %%% check if the loaded module and the module the user is trying to
        %%% load is the same
        if SavedVarRevNum == DefVarRevNum && handles.Settings.NumbersOfVariables(ModuleNum-Skipped) == Settings.NumbersOfVariables(ModuleNum-Skipped)
            %%% If so, replace the default settings with the saved ones            
            handles.Settings.VariableValues(ModuleNum-Skipped,1:Settings.NumbersOfVariables(ModuleNum-Skipped)) = Settings.VariableValues(ModuleNum-Skipped,1:Settings.NumbersOfVariables(ModuleNum-Skipped));
            %%% save module revision number
            handles.Settings.ModuleRevisionNumbers(ModuleNum-Skipped) = ModuleRevNum;
            handles.Settings.ModuleNames{ModuleNum-Skipped} = Settings.ModuleNames{ModuleNum-Skipped};
        else
            %%% If not, show the saved settings. Note: This will always
            %%% appear if user selects another module when they search for
            %%% the missing module, but the user is appropriately warned
            savedVariableValues = Settings.VariableValues(ModuleNum-Skipped,1:Settings.NumbersOfVariables(ModuleNum-Skipped));
            FailedModule(handles, savedVariableValues, defDescriptions, char(handles.Settings.ModuleNames(ModuleNum-Skipped)),ModuleNum-Skipped);
            %%% Go over each variable
            for k = 1:handles.Settings.NumbersOfVariables(ModuleNum-Skipped)
                if strcmp(defVariableValues(k),'Pipeline Value')
                    %%% Create FixList, which will later be used to replace
                    %%% pipeline-dependent variable values in the loaded modules
                    handles.Settings.VariableValues(ModuleNum-Skipped,k) = {''};
                    if exist('FixList','var')
                        FixList(end+1,1) = ModuleNum-Skipped;
                        FixList(end,2) = k;
                    else
                        FixList(1,1) = ModuleNum-Skipped;
                        FixList(1,2) = k;
                    end
                else
                    %%% If no need to change, save the default loaded variables
                    handles.Settings.VariableValues(ModuleNum-Skipped,k) = defVariableValues(k);
                end
            end
            %%% Save the infotypes and VariableRevisionNumber
             handles.Settings.VariableInfoTypes(ModuleNum-Skipped,1:numel(defVariableInfoTypes)) = defVariableInfoTypes;
             handles.Settings.VariableRevisionNumbers(ModuleNum-Skipped) = DefVarRevNum;
             handles.Settings.ModuleNames{ModuleNum-Skipped} = CurrentModuleName;
             handles.Settings.ModuleRevisionNumbers(ModuleNum-Skipped) = ModuleRevNum;
            revisionConfirm = 1;
        end
        clear defVariableInfoTypes;
    catch
        %%% It is very unlikely to get here, because this means the
        %%% pathname was incorrect, but we had checked this before
        Choice = CPquestdlg(['The ' CurrentModuleName ' module could not be found in the directory specified or an error occured while extracting its variable settings. This error is not common; the module might be corrupt or, if running on the non-developers version of CellProfiler, your preferences may not be set properly. To check your preferences, click on File >> Set Preferences.  The module will be skipped and the rest of the pipeline will be loaded. Would you like to see the module''s saved settings? (' lasterr ')'],'Error','Yes','No','Abort','Yes');
        switch Choice
            case 'Yes'
                FailedModule(handles,Settings.VariableValues(ModuleNum-Skipped,:),'Sorry, variable descriptions could not be retrieved from this file',CurrentModuleName,ModuleNum-Skipped);
                Abort = 0;
            case 'No'
                Abort = 0;
            otherwise
                Abort = 1;
        end
        if Skipped+1 == length(handles.Settings.ModuleNames)
            CPerrordlg('All modules in this pipeline were skipped. Loading will be canceled.  Your preferences may not be set correctly.  Click File >> Set Preferences to be sure that the module path is correct.','Loading Pipeline Error')
            Abort = 1;
        else
            %%% Remove module info from the settings and handles
            handles.Settings.ModuleNames(ModuleNum-Skipped) = [];
            Pathnames(ModuleNum-Skipped) = [];
            Settings.VariableValues(ModuleNum-Skipped,:) = [];
            Settings.VariableInfoTypes(ModuleNum-Skipped,:) = [];
            Settings.ModuleNames(ModuleNum-Skipped) = [];
            Settings.NumbersOfVariables(ModuleNum-Skipped) = [];
            try Settings.VariableRevisionNumbers(ModuleNum-Skipped) = []; end
            try Settings.ModuleRevisionNumbers(ModuleNum-Skipped) = []; end
            try Settings.ModuleNotes{ModuleNum-Skipped} = {}; end
            Skipped = Skipped+1;
        end
        if Abort
            %%% Reset initial handles settings
            handles.Settings = OldSettings;
            handles.VariableBox = OldVariableBox;
            handles.VariableDescription = OldVariableDescription;
            set(handles.ModulePipelineListBox,'String',OldString);
            set(handles.ModulePipelineListBox,'Value',OldValue);
            guidata(hObject,handles);
            ModulePipelineListBox_Callback(hObject,[],handles);
            errFlg = 1;
            return
        end
    end
end

% Let the user know which modules have changed (if any)
if any(UpdatedModules),
    str = cell(1+length(find(UpdatedModules)),1);
    str{1} = 'The following module(s) have been updated and your previous settings have been transferred. Please see the Release Notes for more details.';
    updated_module_locations = find(UpdatedModules);
    for i = updated_module_locations(:)',
        str{end+1} = ['      ',handles.Settings.ModuleNames{i-Skipped},': Module ',num2str(i,'%02d')];
    end
    str = str(~cellfun('isempty',str));
    CPwarndlg(str,'LoadPipelines: Some modules updated','replace');
end

% Let the user know which module had their empty placeholder setting changed to "Do not use"
if any(PlaceholderUpdate),
    h = findobj(allchild(0),'name','LoadPipelines: Some modules updated');
    if ~isempty(h),
       str = get(findobj(h,'type','text'),'string');
       str{end+1} = ' ';
       str{end+1} = 'Placeholder text for optional/unused entries have been updated to the standardized value "Do not use." Please see the Developer notes under "Settings" for more details.';
       delete(h);
    else
        str = cell(1+length(find(PlaceholderUpdate)),1);
        str{1} = 'Placeholder text for optional/unused entries have been updated to the standardized value "Do not use." Please see the Developer notes under "Settings" for more details.';
    end
    updated_module_locations = find(PlaceholderUpdate);
    for i = updated_module_locations(:)',
        str{end+1} = ['      ',handles.Settings.ModuleNames{i},': Module ',num2str(i,'%02d')];
    end
    str = str(~cellfun('isempty',str));
    CPwarndlg(str,'LoadPipelines: Some modules updated','replace');
end

delete(get(handles.variablepanel,'children'));
try
    handles.Settings.PixelSize = Settings.PixelSize;
    handles.Preferences.PixelSize = Settings.PixelSize;
    set(handles.PixelSizeEditBox,'String',handles.Preferences.PixelSize)
end
handles.Current.NumberOfModules = 0;
contents = handles.Settings.ModuleNames;
guidata(hObject,handles);

WaitBarHandle = CPwaitbar(0,'Loading Pipeline...');
for i=1:length(handles.Settings.ModuleNames)
    if isdeployed
        PutModuleInListBox([contents{i} '.txt'], Pathnames{i}, handles, 1);
    else
        PutModuleInListBox([contents{i} '.m'], Pathnames{i}, handles, 1);
    end
    handles=guidata(handles.figure1);
    handles.Current.NumberOfModules = i;
    CPwaitbar(i/length(handles.Settings.ModuleNames),WaitBarHandle,'Loading Pipeline...');
end
if (isfield(Settings,'ModuleNotes') && length(Settings.ModuleNotes) == length(Settings.ModuleNames))
    handles.Settings.ModuleNotes = Settings.ModuleNotes;
else
    handles.Settings.ModuleNotes = cell(length(Settings.ModuleNames));
    for i=1:length(handles.Settings.ModuleNotes)
        handles.Settings.ModuleNotes{i}={};
    end
end

if exist('FixList','var')
    for k = 1:size(FixList,1)
        PipeList = get(handles.VariableBox{FixList(k,1)}(FixList(k,2)),'string');
        FirstValue = PipeList(1);
        handles.Settings.VariableValues(FixList(k,1),FixList(k,2)) = FirstValue;
    end
end
    
guidata(hObject,handles);
set(handles.ModulePipelineListBox,'String',contents);
set(handles.ModulePipelineListBox,'Value',1);
ModulePipelineListBox_Callback(hObject, eventdata, handles);
close(WaitBarHandle);

%%% If the user loaded settings from an output file, prompt them to
%%% save it as a separate Settings file for future use.
if isfield(LoadedSettings, 'handles'),
    Answer = CPquestdlg('The settings have been extracted from the output file you selected.  Would you also like to save these settings in a separate, smaller, settings-only file?','','Yes','No','Yes');
    if strcmp(Answer, 'Yes') == 1
        tempSettings = handles.Settings;
        if(revisionConfirm == 1)
            VersionAnswer = CPquestdlg('How should the settings file be saved?', 'Save Settings File', 'Exactly as found in output', 'As Loaded into CellProfiler window', 'Exactly as found in output');
            if strcmp(VersionAnswer, 'Exactly as found in output')
                handles.Settings = Settings;
            end
        end
        SavePipeline_Callback(hObject, eventdata, handles);
        handles.Settings = tempSettings;
    end
end

%%% SUBFUNCTION %%%
function [VariableValues VariableInfoTypes VariableDescriptions NumbersOfVariables VarRevNum ModuleRevNum] = LoadSettings_Helper(Pathname, ModuleName)

VariableValues = {[]};
VariableInfoTypes = {[]};
VariableDescriptions = {[]};
VarRevNum = 0;
ModuleRevNum = 0;
NumbersOfVariables = 0;
if isdeployed
    ModuleNamedotm = [ModuleName '.txt'];
else
    ModuleNamedotm = [ModuleName '.m'];
end
fid=fopen(fullfile(Pathname,ModuleNamedotm));
while 1
    output = fgetl(fid);
    if ~ischar(output)
        break
    end
    if strncmp(output,'%defaultVAR',11)
        displayval = output(17:end);
        istr = output(12:13);
        i = str2double(istr);
        VariableValues(i) = {displayval};
    elseif strncmp(output,'%choiceVAR',10)
        if ~iscellstr(VariableValues(i))
            displayval = output(16:end);
            istr = output(11:12);
            i = str2double(istr);
            VariableValues(i) = {displayval};
        end
    elseif strncmp(output,'%textVAR',8)
        displayval = output(13:end);
        istr = output(9:10);
        i = str2double(istr);
        VariableDescriptions(i) = {displayval};
        VariableValues(i) = {[]};
        NumbersOfVariables = i;
    elseif strncmp(output,'%pathnametextVAR',16)
        displayval = output(21:end);
        istr = output(17:18);
        i = str2double(istr);
        VariableDescriptions(i) = {displayval};
        VariableValues(i) = {[]};
        NumbersOfVariables = i;
    elseif strncmp(output,'%filenametextVAR',16)
        displayval = output(21:end);
        istr = output(17:18);
        i = str2double(istr);
        VariableDescriptions(i) = {displayval};
        VariableValues(i) = {[]};
        NumbersOfVariables = i;
    elseif strncmp(output,'%infotypeVAR',12)
        displayval = output(18:end);
        istr = output(13:14);
        i = str2double(istr);
        VariableInfoTypes(i) = {displayval};
        if ~strcmp(output((length(output)-4):end),'indep') && isempty(VariableValues{i})
            VariableValues(i) = {'Pipeline Value'};
        end
    elseif strncmp(output,'%%%VariableRevisionNumber',25)
        try
            VarRevNum = str2double(output(29:30));
        catch
            VarRevNum = str2double(output(29:29));
        end
    elseif strncmp(output,'% $Revision:', 12)
        try
            ModuleRevNum = str2double(output(14:17));
        catch
            ModuleRevNum = str2double(output(14:18));
        end
    end
end
fclose(fid);

%%% SUBFUNCTION %%%
function FailedModule(handles, savedVariables, defaultDescriptions, ModuleName, ModuleNum)
helpText = ['The settings contained within the selected file are based on an old version of the ',ModuleName,...
    ' module. As a result, it is possible that your old settings are no longer reasonable. '...
    'Displayed below are the settings retrieved from your file. You can use the saved settings '...
    'to attempt to set up the module again. Sorry for the inconvenience.'];

%%% Creates the dialog box and its text, buttons, and edit boxes.
MainWinPos = get(handles.figure1,'Position');

[ScreenWidth,ScreenHeight] = CPscreensize;
FigWidth = MainWinPos(3)*4/5;
FigHeight = MainWinPos(4);
LeftPos = .5*(ScreenWidth-FigWidth);
BottomPos = .5*(ScreenHeight-FigHeight);
FigPosition = [LeftPos BottomPos FigWidth FigHeight];
Color = [0.7 .7 .9];

%%% Label we attach to figures (as UserData) so we know they are ours
userData.Application = 'CellProfiler';
LoadSavedWindowHandle = figure(...
    'Units','pixels',...
    'Color',Color,...
    'DockControls','off',...
    'MenuBar','none',...
    'Name',['Saved Variables for Module ',num2str(ModuleNum)],...
    'NumberTitle','off',...
    'Position',FigPosition,...
    'Resize','off',...
    'HandleVisibility','on',...
    'Tag','savedwindow',...
    'UserData',userData);

informtext = uicontrol(...
    'Parent',LoadSavedWindowHandle,...
    'BackgroundColor',Color',...
    'Units','normalized',...
    'Position',[0.05 0.70 0.9 0.25],...
    'String',helpText,...
    'Style','text',...
    'FontName','helvetica',...
    'HorizontalAlignment','left',...
    'FontSize',handles.Preferences.FontSize,...
    'Tag','informtext'); %#ok Ignore MLint

savedbox = uicontrol(...
    'Parent',LoadSavedWindowHandle,...
    'BackgroundColor', Color,...
    'Units','normalized',...
    'Position',[0.7 0.1 0.25 0.55],...
    'String',savedVariables,...
    'Style','listbox',...
    'Value',1,...
    'FontName','helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'Tag','savedbox'); %#ok Ignore MLint

descriptionbox = uicontrol(...
    'Parent',LoadSavedWindowHandle,...
    'BackgroundColor',Color,...
    'Units','normalized',...
    'Position',[0.05 0.1 0.6 0.55],...
    'String',defaultDescriptions,...
    'Style','listbox',...
    'Value',1,...
    'FontName','helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'Tag','descriptionbox'); %#ok Ignore MLint

savedtext = uicontrol(...
    'Parent',LoadSavedWindowHandle,...
    'BackgroundColor',Color,...
    'Units','normalized',...
    'Position',[0.665 0.65 0.2 0.05],...
    'String','Saved Variables:',...
    'Style','text',...
    'FontName','helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'Tag','descriptiontext'); %#ok Ignore MLint

descriptiontext = uicontrol(...
    'Parent',LoadSavedWindowHandle,...
    'BackgroundColor',Color,...
    'Units','normalized',...
    'Position',[0.015 0.65 0.25 0.05],...
    'String','Variable Descriptions:',...
    'Style','text',...
    'FontName','helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'Tag','descriptiontext'); %#ok Ignore MLint


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% RUN MULTIPLE PIPELINES BUTTON %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [SettingsPathname, SettingsFileName, errFlg, handles] = ...
    RunMultiplePipelines_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
% Asks the user for a root directory in which pipelines are located, whether in
% the root or in a sub-directory. Once specified, the function looks for
% all pipeline files, and loads/executes each one sequentially. Output is
% stored in the directory where the pipeline was located.

%%% Define a couple of helpful variables for later use
FrontEndFigure = handles.figure1;
PipelineFileIdentifier = 'PIPE';

%%% Obtain the root directory where the pipelines are to be processed
if isempty(eventdata)
    errFlg = 0;
    RootPipelinesPathname = ...
        CPuigetdir(handles.Current.DefaultOutputDirectory,'Choose the root directory where your pipelines are located.'); 
    pause(.1);
    figure(FrontEndFigure);
else
    RootPipelinesPathname = eventdata.SettingsPathname;
end

%%% If the user pressed Cancel, exit
if RootPipelinesPathname == 0, return; end

%%% Obtain directory list recursively using subdir (see subfunction below) 
FilesAndDirsStructure = subdir(RootPipelinesPathname);

%%% Puts the logical value of whether each object is a directory into a list.
LogicalIsDirectory = cat(1,FilesAndDirsStructure.isdir);

%%% Removes all directories from the list, leaving only files
FilesAndDirsStructure = FilesAndDirsStructure(~LogicalIsDirectory);

%%% Find only those files which have 'PIPE' in the name
AllPotentialPipelineFilenames = cat(1,{FilesAndDirsStructure.name});
FilesWithPIPEInName = regexp(AllPotentialPipelineFilenames,PipelineFileIdentifier);     % Match string to filename
FilesWithPIPEInName(cellfun('isempty',FilesWithPIPEInName)) = {0};                      % Insert 0 for []
FilesAndDirsStructure = FilesAndDirsStructure(find(cell2mat(FilesWithPIPEInName)));     % Remove non-PIPE files 

%%% Saves the filename and directory lists separately.
PipelinePathnames = {FilesAndDirsStructure.dir};
PipelineFilenames = {FilesAndDirsStructure.name};

 %%% Opens a window that lets the user choose what pipelines to run
try choices = RunMultiplePipelines_Dialog(handles,PipelineFilenames);
    if choices.Cancelled,               % If the user cancelled, then exit
        return;
    elseif isempty(choices.Indices),    % If the user selected nothing, then exit
        return;
    else                                % Otherwise, continue
        IndicesOfPipelinesToRun = choices.Indices;
    end
catch CPerrordlg(lasterr)
    return;
end
    
%%% Use the user input to trim the pipeline list
PipelineFilenames = PipelineFilenames(IndicesOfPipelinesToRun);
PipelinePathnames = PipelinePathnames(IndicesOfPipelinesToRun);
handles.Current.PipelineDirectories.Pathnames = PipelinePathnames;
handles.Current.PipelineDirectories.Filenames = PipelineFilenames;

ErrorsInPipeline = cell(1,length(PipelineFilenames));

%%% Start processing each pipeline in order
for i = 1:length(PipelineFilenames);
    handles = guidata(FrontEndFigure);
    
    %%% Now, we will try to load each pipeline listed in PipelineFilenames. 
    %%% Beforehand, change the Default Image and Output directories to be 
    %%% the same location as the current directory.
    errFlg = 0;

    try    %%% Attempt to run the pipeline
        %%% Place the relevant parameters into eventdata and invoke 
        %%% LoadPipeline_Callback
        SettingsFilename = PipelineFilenames{i};
        SettingsPathname = PipelinePathnames{i};
        eventdata.SettingsPathname = SettingsPathname;
        eventdata.SettingsFileName = SettingsFilename;
        guidata(hObject,handles);
        LoadPipeline_Callback(hObject,eventdata,guidata(FrontEndFigure));

        %%% Set the current image and output directories to that in which the current pipeline is located
        handles = guidata(FrontEndFigure);
        handles.Current.DefaultImageDirectory = SettingsPathname;
        handles.Current.DefaultOutputDirectory = SettingsPathname;
        guidata(gcbo,handles);
        
        %%% Displays the chosen directories in the 
        %%% DefaultImageDirectoryEditBox and DefaultOutputDirectoryEditBox.
        set(handles.DefaultImageDirectoryEditBox,'String',handles.Current.DefaultImageDirectory);
        set(handles.DefaultOutputDirectoryEditBox,'String',handles.Current.DefaultOutputDirectory);
        
        %%% Execute callback for DefaultImageDirectoryEditBox to retrieves the list of 
        %%% image file names from the chosen directory, store them in the handles 
        %%% structure, and display them in the filenameslistbox
        DefaultImageDirectoryEditBox_Callback(hObject, [], guidata(FrontEndFigure));
        % Do the same for OutputDirectoryEditBox
        DefaultOutputDirectoryEditBox_Callback(hObject, [], guidata(FrontEndFigure));
        
        %%% Now run the pipeline by invoking AnalyzeImagesButton_Callback
        AnalyzeImagesButton_Callback(hObject, eventdata, guidata(FrontEndFigure));
    catch       %%% If something goes wrong, throw an error
        errFlg = 1;
    end

    %%% Record where errors (if any) took place
    handles = guidata(FrontEndFigure);
    ModuleNames = handles.Settings.ModuleNames;
    prefix = 'ModuleError_';
    ismoduleerror = false(length(ModuleNames),1); 
    j = 1; fdname = [prefix,num2str(j,'%02d'),ModuleNames{j}];
    while (j < length(ModuleNames)) && isfield(handles.Measurements.Image,fdname),
        ismoduleerror(j) = handles.Measurements.Image.(fdname){:}; 
        j = j+1; fdname = [prefix,num2str(j,'%02d'),ModuleNames{j}];
    end
    if any(ismoduleerror),
        ErrorsInPipeline{i} = {find(ismoduleerror),ModuleNames{ismoduleerror},};
    end
    
    if errFlg ~= 0,     %%% This would have to be an error that doesn't get flagged by AnalyzeImages; not sure if that can happen
        error(['Image processing was canceled in RunMultiplePipelines due to an error.']);
    end
end

%%% If any errors occured in the pipelines, let the user know where they happened
ismoduleerror = ~cellfun('isempty',ErrorsInPipeline);
if any(ismoduleerror)
    str = cell(1+length(find(ismoduleerror)),1);
    str{1} = 'Errors occured in the following pipelines:';
    error_locations = find(ismoduleerror);
    for i = error_locations(:)',
        str{i} = ['      ',PipelineFilenames{i},', in module ',num2str(ErrorsInPipeline{i}{1},'%02d'),': ',ErrorsInPipeline{i}{2}];
    end
    CPwarndlg(str,'RunMultiplePipelines','modal');
else
    CPmsgbox('All pipelines ran to completion with no errors','RunMultiplePipelines','modal');
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SUBFUNCTION: RUN MULTIPLE PIPELINES -> : SUBDIR %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function file = subdir(cdir)
%SUBDIR List directory and all subdirectories.
% SUBDIR recursively calls itself and uses DIR to find all files and
% directories within a specified directory and all its subdirectories.
%
% D = SUBDIR('directory_name') returns the results in an M-by-1
% structure with the fields:
% name -- filename
% dir -- directory containing file
% date -- modification date
% bytes -- number of bytes allocated to the file
% isdir -- 1 if name is a directory and 0 if not

if nargin == 0 || isempty(cdir)
    cdir = cd; % Current directory is default
end
if cdir(end)==filesep
    cdir(end) = ''; % Remove any trailing \ from directory
end
file = dir(cdir); % Read current directory
for n = 1:length(file)
    file(n).dir = cdir; % Assign dir field
    if file(n).isdir && file(n).name(1)~='.'
        % Element is a directory -> recursively search this one
        tfile = subdir([cdir filesep file(n).name]); % Recursive call
        file = [file; tfile]; % Append to result to current directory structure
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SUBFUNCTION: RUN MULTIPLE PIPELINES -> RunMultiplePipelines_Dialog %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function choices = RunMultiplePipelines_Dialog(handles, pipeline_filenames)

% Initialize output variables
choices.Indices = [];
choices.Cancelled = 0;

helpText = ['Displayed below are the pipelines found in the root directory '...
    'you chose. Select which ones you want to run, using CTRL-mouse click for ',...
    'multiple selections. Click Done to finish or Cancel to exit.'];

%%% Creates the dialog box and its text, buttons, and edit boxes.
FrontEndFigure = handles.figure1;
MainWinPos = get(FrontEndFigure,'Position');

[ScreenWidth,ScreenHeight] = CPscreensize;
FigWidth = MainWinPos(3)*4/5*1/2;
FigHeight = MainWinPos(4);
LeftPos = .5*(ScreenWidth-FigWidth);
BottomPos = .5*(ScreenHeight-FigHeight);
FigPosition = [LeftPos BottomPos FigWidth FigHeight];
Color = [0.7 .7 .9];

%%% Label we attach to figures (as UserData) so we know they are ours
userData.Application = 'CellProfiler';

%%% Initialize push button conditions as application data
appdata.ButtonPressed.Done = 0;
appdata.ButtonPressed.Cancel = 0;

%%% Create string to populate list box
possiblePipelines = pipeline_filenames;

PipelinesWindowHandle = figure(...
    'Units','pixels',...
    'Color',Color,...
    'DockControls','off',...
    'MenuBar','none',...
    'Name','Select the pipelines to run',...
    'NumberTitle','off',...
    'Position',FigPosition,...
    'Resize','off',...
    'HandleVisibility','on',...
    'Tag','pipelineswindow',...
    'UserData',userData);

informtext = uicontrol(...
    'Parent',PipelinesWindowHandle,...
    'BackgroundColor',Color',...
    'Units','normalized',...
    'Position',[0.10 0.82 0.80 0.13],...
    'String',helpText,...
    'Style','text',...
    'FontName','helvetica',...
    'HorizontalAlignment','left',...
    'FontSize',handles.Preferences.FontSize,...
    'Tag','informtext'); %#ok Ignore MLint

pipelinelistbox = uicontrol(...
    'Parent',PipelinesWindowHandle,...
    'BackgroundColor', Color,...
    'Units','normalized',...
    'Position',[0.10 0.2 0.80 0.60],...
    'String',possiblePipelines,...
    'Style','listbox',...
    'Value',[],...
    'Max',2,...
    'Min',0,...
    'FontName','helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'Tag','pipelinelistbox'); %#ok Ignore MLint

selectallpushbutton = uicontrol(...
    'Parent',PipelinesWindowHandle,...
    'BackgroundColor', Color,...
    'Units','normalized',...
    'Callback',@RunMultiplePipelines_Dialog_Callback,...
    'Position',[0.10 0.12 0.3 0.06],...
    'Style','pushbutton',...
    'String','Select all',...
    'FontName','helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'Tag','selectallpushbutton');  %#ok Ignore MLint

invertselectionpushbutton = uicontrol(...
    'Parent',PipelinesWindowHandle,...
    'BackgroundColor', Color,...
    'Units','normalized',...
    'Callback',@RunMultiplePipelines_Dialog_Callback,...
    'Position',[0.6 0.12 0.3 0.06],...
    'Style','pushbutton',...
    'String','Invert selection',...
    'FontName','helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'Tag','invertselectionpushbutton');  %#ok Ignore MLint

donepushbutton = uicontrol(...
    'Parent',PipelinesWindowHandle,...
    'BackgroundColor', Color,...
    'Units','normalized',...
    'Callback',@RunMultiplePipelines_Dialog_Callback,...
    'Position',[0.10 0.05 0.3 0.06],...
    'Style','pushbutton',...
    'String','Done',...
    'FontName','helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'Tag','donepushbutton');  %#ok Ignore MLint

cancelpushbutton = uicontrol(...
    'Parent',PipelinesWindowHandle,...
    'Units','normalized',...
    'Callback',@RunMultiplePipelines_Dialog_Callback,...
    'Position',[0.6 0.05 0.3 0.06],...
    'String','Cancel',... 
    'FontName','helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'Tag','cancelpushbutton');  %#ok Ignore MLint

%%% Push application data to callback figure
guidata(PipelinesWindowHandle,appdata);

%%% Wait until window is destroyed or uiresume() is called
uiwait(PipelinesWindowHandle);

%%% Check what the user selected
appdata = guidata(PipelinesWindowHandle);
if appdata.ButtonPressed.Done,
    choices.Indices = get(pipelinelistbox,'Value');
    choices.Cancelled = 0;
elseif appdata.ButtonPressed.Cancel,
    choices.Indices = 0;
    choices.Cancelled = 1;
end

close(PipelinesWindowHandle);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SUBFUNCTION: RUN MULTIPLE PIPELINES -> RunMultiplePipelines_Dialog_Callback %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function RunMultiplePipelines_Dialog_Callback(hObject,eventdata)

switch get(hObject,'tag'),
    case 'selectallpushbutton',
        h = findobj(gcbf,'tag','pipelinelistbox'); set(h,'value',1:length(get(h,'string')));
    case 'invertselectionpushbutton',
        h = findobj(gcbf,'tag','pipelinelistbox'); set(h,'value',setdiff(1:length(get(h,'string')),get(h,'value')));
    case 'donepushbutton',
        appdata = guidata(gcbf); appdata.ButtonPressed.Done = 1; guidata(gcbf,appdata); uiresume(gcbf);
    case 'cancelpushbutton',
        appdata = guidata(gcbf); appdata.ButtonPressed.Cancel = 1; guidata(gcbf,appdata); uiresume(gcbf);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SAVE PIPELINE BUTTON %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function SavePipeline_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.

if handles.Current.NumberOfModules == 0
    warndlg('Pipeline saving was canceled because there are no modules in the current pipeline.','Warning')
    return
end

if length(handles.Settings.NumbersOfVariables) ~= length(handles.Settings.ModuleNames)
    CPmsgbox('STOP! Somehow the NumbersOfVariable was not set correctly! Please record EVERYTHING you have done in the past few minutes and send to mrl@wi.mit.edu! Be sure to include what modules are in your pipeline and what you tried to do to cause this error (Adding, Subtracting, Moving modules, how many?). PLEASE NOTE YOUR PIPELINE WILL STILL BE SAVED AND THIS ERROR WILL BE CORRECTED. REPORTING HOW THIS ERROR OCCURRED WILL HELP US DETERMINE HOW TO FIX IT!');
    handles.Settings.NumbersOfVariables((length(handles.Settings.ModuleNames)+1):end) = [];
end

%%% Initialize uiputfile dialog box with saved pipeline values (if any)
FileName = '*.mat';
Pathname = handles.Current.DefaultOutputDirectory;
if isfield(handles.Current,'SavedPipeline'),
    if ~isempty(handles.Current.SavedPipeline.Info.Filename),
        FileName = handles.Current.SavedPipeline.Info.Filename;
    end
    if ~isempty(handles.Current.SavedPipeline.Info.Pathname) && exist(handles.Current.SavedPipeline.Info.Pathname,'dir'),
        Pathname = handles.Current.SavedPipeline.Info.Pathname;
    end
end

%%% The "Settings" variable is saved to the file name the user chooses.
[FileName,Pathname] = CPuiputfile(FileName, 'Save Pipeline As...',Pathname);
%%% Allows canceling.
if FileName ~= 0
    [Temp,FileNom,FileExt] = fileparts(FileName); %#ok Ignore MLint
    %%% search for 'pipe' in the filename
    LocatePipe = strfind(FileName,'pipe');
    if isempty(LocatePipe)
        LocatePipe = strfind(FileName,'Pipe');
    end
    if isempty(LocatePipe)
        LocatePipe = strfind(FileName,'PIPE');
    end
    if isempty(LocatePipe)
        AutoName = CPquestdlg(['Do you want to rather name the file as ', FileNom, 'PIPE', FileExt, ' in order to prevent confusion with output files?'],'Rename file?','Yes');
        if strcmp(AutoName,'Yes')
            FileName = [FileNom,'PIPE',FileExt];
            CPhelpdlg('The pipeline file has been saved.');
        elseif strcmp(AutoName,'No')
            CPhelpdlg('The pipeline file has been saved.');
        elseif strcmp(AutoName,'Cancel')
            return
        end
    end
    %%% Checks if a field is present, and if it is, the value is stored in the
    %%% structure 'Settings' with the same name.
    if isfield(handles.Settings,'VariableValues'),
        Settings.VariableValues = handles.Settings.VariableValues;
    end
    if isfield(handles.Settings,'VariableInfoTypes'),
        Settings.VariableInfoTypes = handles.Settings.VariableInfoTypes;
    end
    if isfield(handles.Settings,'ModuleNames'),
        Settings.ModuleNames = handles.Settings.ModuleNames;
    end
    if isfield(handles.Settings,'NumbersOfVariables'),
        Settings.NumbersOfVariables = handles.Settings.NumbersOfVariables;
    end
    if isfield(handles.Settings,'PixelSize'),
        Settings.PixelSize = handles.Settings.PixelSize;
    end
    if isfield(handles.Settings,'VariableRevisionNumbers'),
        Settings.VariableRevisionNumbers = handles.Settings.VariableRevisionNumbers;
    end
    if isfield(handles.Settings,'ModuleRevisionNumbers'),
        Settings.ModuleRevisionNumbers = handles.Settings.ModuleRevisionNumbers;
    end
    if isfield(handles.Settings,'ModuleNotes')
        Settings.ModuleNotes = handles.Settings.ModuleNotes;
    end
    
    %%% Save current name and location of saved pipeline to handles
    handles.Current.SavedPipeline.Info.Pathname = Pathname;
    handles.Current.SavedPipeline.Info.Filename = FileName;
    guidata(hObject, handles);
    
    set(handles.figure1,'name',['CellProfiler - ',FileName]);

    %%% Save the pipeline
    save(fullfile(Pathname,FileName),'Settings');
    
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SAVE PIPELINE AS TEXT %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function SavePipelineAsText_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
%%% Writes settings into a readable text file.
CPtextpipe(handles,0,0,0);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% FIGURE DISPLAY BUTTONS %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% These buttons appear after analysis has begun, and disappear
%%% when it is over.

function CloseFigureButton_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
global closeFigures;
ModuleHighlighted = get(handles.ModulePipelineListBox,'Value');
for i=1:length(ModuleHighlighted),
    closeFigures(length(closeFigures)+1) = ModuleHighlighted(i);
end
guidata(hObject, handles);

function OpenFigureButton_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
global openFigures;
ModuleHighlighted = get(handles.ModulePipelineListBox,'Value');
for i=1:length(ModuleHighlighted),
    openFigures(length(openFigures)+1) = ModuleHighlighted(i);
end
guidata(hObject, handles);

%%%%%%%%%%%%%%%%%%%%%%%%%
%%% ADD MODULE BUTTON %%%
%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in AddModule.
function AddModule_Callback(hObject,eventdata,handles) %#ok We want to ignore MLint error checking for this line.

obj=findobj('Tag','AddModuleWindow');
if(~isempty(obj))  %Window already exists
    figure(obj);
    return
end

if handles.Current.NumberOfModules == 99
    CPerrordlg('CellProfiler in its current state can only handle 99 modules. You have just attempted to load the 100th module. It should be fairly straightforward to modify the code in CellProfiler.m to expand its capabilities.');
    return
end

%%% 1. Opens a user interface to retrieve the .m file you want to use.
%%% Change to the default module directory. This line is within a
%%% try-end pair because the user may have changed the folder names
%%% leading up to this directory sometime after saving the
%%% Preferences.

if exist(handles.Preferences.DefaultModuleDirectory, 'dir')
    AddModuleWindow_OpeningFcn(hObject, eventdata, AddModuleWindow_LayoutFcn(handles.figure1));
    obj1=findobj('Tag','ModulesListBox');
    obj2=findobj('Tag','ModuleCategoryListBox');
    if ~isempty(obj1)
        set(obj1,'value',1);
    end
    if ~isempty(obj2)
        set(obj2,'value',1);
    end
else
    if isdeployed
      filter = '*.txt';
    else
      filter = '*.m';
    end
    [ModuleNamedotm,Pathname] = uigetfile(filter, 'Choose an image analysis module');
    pause(.1);
    figure(handles.figure1);
    PutModuleInListBox(ModuleNamedotm,Pathname,handles,0);
end

function PutModuleInListBox(ModuleNamedotm, Pathname, handles, RunInBG)
if ModuleNamedotm ~= 0,
    %%% The folder containing the desired .m file is added to Matlab's search path.
    if ~isdeployed
        addpath(Pathname);
        differentPaths = which(ModuleNamedotm, '-all');
        if isempty(differentPaths)
            %%% If the module's .m file is not found on the search path, the result
            %%% of exist is zero, and the user is warned.
            CPerrordlg(['Something is wrong; The .m file ', ModuleNamedotm, ' was not initially found by Matlab, so the folder containing it was added to the Matlab search path. But, Matlab still cannot find the .m file for the analysis module you selected. The module will not be added to the image analysis pipeline.'],'Error');
            return
        elseif length(differentPaths) > 1
            CPwarndlg(['More than one file with this same module name exists in the Matlab search path.  The pathname from ' char(differentPaths{1}) ' will likely be used, but this is unpredictable.  Modules should have unique names that are not the same as already existing Matlab functions to avoid confusion.'],ModuleNamedotm,'modal');
        end
    end
    if(exist(ModuleNamedotm(1:end-2),'builtin') ~= 0)
        warningString = 'Your module has the same name as a builtin Matlab function.  Perhaps you should consider renaming your module.';
        warndlg(warningString);
    end

    %%% 3. The last two characters (=.m) are removed from the
    %%% ModuleName.m and called ModuleName. If we are using the compiled
    %%% version (isdeployed), we must remove 4 characters (=.txt) instead.
    if isdeployed
        ModuleName = ModuleNamedotm(1:end-4);
	if ~ strcmp(ModuleNamedotm(end-3:end), '.txt'),			       
	        CPwarndlg('Only compiled modules (.txt files) can be added to the pipeline in the compiled version of CellProfiler. If you load .m files, your pipeline will not function correctly.');
	end
    else
        ModuleName = ModuleNamedotm(1:end-2);
    end
    %%% The name of the module is shown in a text box in the GUI (the text
    %%% box is called ModuleName1.) and in a text box in the GUI which
    %%% displays the current module (whose settings are shown).

    %%% 4. The text description for each variable for the chosen module is
    %%% extracted from the module's .m file and displayed.
    if handles.Current.NumberOfModules == 0
        ModuleNums = 1;
    elseif RunInBG
        ModuleNums = handles.Current.NumberOfModules+1;
    else
        ModuleNums = get(handles.ModulePipelineListBox,'value')+1;
        % prevent error when two modules are selected
        ModuleNums = max(ModuleNums);
    end
    ModuleNumber = CPtwodigitstring(ModuleNums);

    if handles.Current.NumberOfModules == 0
        handles.Settings.ModuleSupportedFeatures = {};
    end
    for ModuleCurrent = handles.Current.NumberOfModules:-1:ModuleNums;
        %%% 1. Switches ModuleNames
        handles.Settings.ModuleNames{ModuleCurrent+1} = handles.Settings.ModuleNames{ModuleCurrent};
        contents = get(handles.ModulePipelineListBox,'String');
        contents{ModuleCurrent+1} = handles.Settings.ModuleNames{ModuleCurrent};
        set(handles.ModulePipelineListBox,'String',contents);
        %%% 2. Copy then clear the variable values in the handles
        %%% structure.
        handles.Settings.VariableValues(ModuleCurrent+1,:) = handles.Settings.VariableValues(ModuleCurrent,:);
        %%% 3. Copy then clear the num of variables in the handles
        %%% structure.
        handles.Settings.NumbersOfVariables(ModuleCurrent+1) = handles.Settings.NumbersOfVariables(ModuleCurrent);
        %%% 4. Copy then clear the variable revision numbers in the handles
        %%% structure.
        handles.Settings.VariableRevisionNumbers(ModuleCurrent+1) = handles.Settings.VariableRevisionNumbers(ModuleCurrent);
        %%% 5. Copy then clear the module revision numbers in the handles
        %%% structure.
        handles.Settings.ModuleRevisionNumbers(ModuleCurrent+1) = handles.Settings.ModuleRevisionNumbers(ModuleCurrent);
        %%% 6. Copy then clear the variable infotypes in the handles
        %%% structure.
        if size(handles.Settings.VariableInfoTypes,1) >= ModuleCurrent
            handles.Settings.VariableInfoTypes(ModuleCurrent+1,:) = handles.Settings.VariableInfoTypes(ModuleCurrent,:);
        end
        %%% 7. Copy the module features list
        handles.Settings.ModuleSupportedFeatures{ModuleCurrent+1} = handles.Settings.ModuleSupportedFeatures{ModuleCurrent};
        %%% 8. Copy the module notes
        handles.Settings.ModuleNotes{ModuleCurrent+1} = handles.Settings.ModuleNotes{ModuleCurrent};
        contents = get(handles.ModulePipelineListBox,'String');
        contents{ModuleCurrent+1} = handles.Settings.ModuleNames{ModuleCurrent};
        set(handles.ModulePipelineListBox,'String',contents);
    end

    if ModuleNums <= handles.Current.NumberOfModules
        handles.VariableDescription = [handles.VariableDescription(1:ModuleNums-1) {[]} handles.VariableDescription(ModuleNums:end)];
        handles.VariableBox = [handles.VariableBox(1:ModuleNums-1) {[]} handles.VariableBox(ModuleNums:end)];
        if isfield(handles,'BrowseButton')
            if length(handles.BrowseButton) >= ModuleNums
                handles.BrowseButton = [handles.BrowseButton(1:ModuleNums-1) {[]} handles.BrowseButton(ModuleNums:end)];
            end
        end
    end

    NumberOfFeatures = 0;
    handles.Settings.ModuleSupportedFeatures{ModuleNums} = {};
    handles.Settings.ModuleNotes{ModuleNums} = {};
    fid=fopen(fullfile(Pathname,ModuleNamedotm));
    lastVariableCheck = 0;

    numberExtraLinesOfDescription = 0;
    varSpacing = 25;
    firstBoxLoc = 345; firstDesLoc = 343; normBoxHeight = 23; normDesHeight = 20;
    normBoxLength = 94;
    pixelSpacing = 2;

    while 1;
        output = fgetl(fid);
        if ~ischar(output)
            break
        end
        if strncmp(output,'%defaultVAR',11)
            displayval = output(17:end);
            istr = output(12:13);
            lastVariableCheck = str2double(istr);
            handles.Settings.NumbersOfVariables(str2double(ModuleNumber)) = lastVariableCheck;
            set(handles.VariableBox{ModuleNums}(lastVariableCheck),'String',displayval);
            CheckVal = handles.Settings.VariableValues(ModuleNums,lastVariableCheck);
            if isempty(CheckVal{1})
                handles.Settings.VariableValues(ModuleNums,lastVariableCheck) = {displayval};
            end
        elseif strncmp(output,'%textVAR',8)
            lastVariableCheck = str2double(output(9:10));
            if ~RunInBG
                handles.Settings.VariableValues(ModuleNums, lastVariableCheck) = {''};
            end
            handles.Settings.NumbersOfVariables(str2double(ModuleNumber)) = lastVariableCheck;
            descriptionString = output(14:end);

            handles.VariableBox{ModuleNums}(lastVariableCheck) = uicontrol(...
                'Parent',handles.variablepanel,...
                'Units','pixels',...
                'BackgroundColor',[1 1 1],...
                'Callback','CellProfiler(''VariableBox_Callback'',gcbo,[],guidata(gcbo))',...
                'FontName','helvetica',...
                'FontSize',handles.Preferences.FontSize,...
                'Position',[470 295-25*lastVariableCheck 94 23],...
                'String','n/a',...
                'Style','edit',...
                'CreateFcn', 'CellProfiler(''VariableBox_CreateFcn'',gcbo,[],guidata(gcbo))',...
                'Tag',['VariableBox' CPtwodigitstring(lastVariableCheck)],...
                'Behavior',get(0,'defaultuicontrolBehavior'),...
                'UserData','undefined',...
                'Visible','off');

            handles.VariableDescription{ModuleNums}(lastVariableCheck) = uicontrol(...
                'Parent',handles.variablepanel,...
                'Units','pixels',...
                'BackgroundColor',[0.7 0.7 0.9],...
                'CData',[],...
                'FontName','helvetica',...
                'FontSize',handles.Preferences.FontSize,...
                'FontWeight','bold',...
                'HorizontalAlignment','right',...
                'Position',[2 291-25*lastVariableCheck 465 23],...
                'String','',...
                'Style','text',...
                'Tag',['VariableDescription' CPtwodigitstring(lastVariableCheck)],...
                'UserData',[],...
                'Behavior',get(0,'defaultuicontrolBehavior'),...
                'Visible','off',...
                'CreateFcn', '');

            set(handles.VariableDescription{ModuleNums}(lastVariableCheck),'string',descriptionString);

            linesVarDes = length(textwrap(handles.VariableDescription{ModuleNums}(lastVariableCheck),{descriptionString}));
            numberExtraLinesOfDescription = numberExtraLinesOfDescription + linesVarDes - 1;
            VarDesPosition = get(handles.VariableDescription{ModuleNums}(lastVariableCheck), 'Position');
            varXPos = VarDesPosition(1);
            varYPos = firstDesLoc+pixelSpacing*numberExtraLinesOfDescription-varSpacing*(lastVariableCheck+numberExtraLinesOfDescription);
            varXSize = VarDesPosition(3);
            varYSize = normDesHeight*linesVarDes + pixelSpacing*(linesVarDes-1);
            set(handles.VariableDescription{ModuleNums}(lastVariableCheck),'Position', [varXPos varYPos varXSize varYSize]);
            varXPos = 470;
            varYPos = firstBoxLoc+pixelSpacing*numberExtraLinesOfDescription-varSpacing*(lastVariableCheck+numberExtraLinesOfDescription-(linesVarDes-1)/2.0);
            varXSize = normBoxLength;
            varYSize = normBoxHeight;
            set(handles.VariableBox{ModuleNums}(lastVariableCheck), 'Position', [varXPos varYPos varXSize varYSize]);

        elseif strncmp(output,'%filenametextVAR',16)

            lastVariableCheck = str2double(output(17:18));
            if ~RunInBG
                handles.Settings.VariableValues(ModuleNums, lastVariableCheck) = {''};
            end
            handles.Settings.NumbersOfVariables(str2double(ModuleNumber)) = lastVariableCheck;
            descriptionString = output(22:end);

            handles.VariableBox{ModuleNums}(lastVariableCheck) = uicontrol(...
                'Parent',handles.variablepanel,...
                'Units','pixels',...
                'BackgroundColor',[1 1 1],...
                'Callback','CellProfiler(''VariableBox_Callback'',gcbo,[],guidata(gcbo))',...
                'FontName','helvetica',...
                'FontSize',handles.Preferences.FontSize,...
                'Position',[305 295-25*lastVariableCheck 195 23],...
                'String','Do not use',...
                'Style','edit',...
                'CreateFcn', 'CellProfiler(''VariableBox_CreateFcn'',gcbo,[],guidata(gcbo))',...
                'Tag',['VariableBox' CPtwodigitstring(lastVariableCheck)],...
                'Behavior',get(0,'defaultuicontrolBehavior'),...
                'UserData','undefined',...
                'Visible','off');

            handles.BrowseButton{ModuleNums}(lastVariableCheck) = uicontrol(...
                'Parent',handles.variablepanel,...
                'Units','pixels',...
                'BackgroundColor',[.7 .7 .9],...
                'Callback','handles = guidata(findobj(''tag'',''figure1'')); VariableBoxHandle = get(gco,''UserData''); CurrentChoice = get(VariableBoxHandle,''String''); if exist(CurrentChoice,''file''), if ~isdeployed, Pathname = fileparts(which(CurrentChoice)); end; else, Pathname = handles.Current.DefaultImageDirectory; end; [Filename Pathname] = CPuigetfile(''*.*'',''Choose a file'',Pathname); pause(.1); figure(handles.figure1); if Pathname == 0, else, set(VariableBoxHandle,''String'',Filename); ModuleHighlighted = get(handles.ModulePipelineListBox,''Value''); ModuleNumber = ModuleHighlighted(1); VariableName = get(VariableBoxHandle,''Tag''); VariableNumberStr = VariableName(12:13); VarNum = str2num(VariableNumberStr); handles.Settings.VariableValues(ModuleNumber,VarNum) = {Filename}; guidata(handles.figure1,handles); end; clear handles VariableBoxHandle CurrentChoice Pathname Filename ModuleHighlighted ModuleNumber VariableName VariableNumberStr VarNum;',...
                'FontName','helvetica',...
                'FontSize',handles.Preferences.FontSize,...
                'FontWeight','bold',...
                'Position',[501 296-25*lastVariableCheck 63 20],...
                'String','Browse...',...
                'Style','pushbutton',...
                'CreateFcn', 'CellProfiler(''VariableBox_CreateFcn'',gcbo,[],guidata(gcbo))',...
                'Tag',['BrowseButton' CPtwodigitstring(lastVariableCheck)],...
                'Behavior',get(0,'defaultuicontrolBehavior'),...
                'UserData',handles.VariableBox{ModuleNums}(lastVariableCheck),...
                'Visible','off');
            %%% In the callback function, if the user inputs an invalid filename, uigetfile goes to the default image directory instead of the current one as in other browse button callbacks because as of now (7/06), all modules use filenametextVAR only to get input files that should probably be there, so it's more convenient this way. In the future, code could be replaced to look more like the one for the pathnametextVAR browse button.

            handles.VariableDescription{ModuleNums}(lastVariableCheck) = uicontrol(...
                'Parent',handles.variablepanel,...
                'Units','pixels',...
                'BackgroundColor',[0.7 0.7 0.9],...
                'CData',[],...
                'FontName','helvetica',...
                'FontSize',handles.Preferences.FontSize,...
                'FontWeight','bold',...
                'HorizontalAlignment','right',...
                'Position',[2 295-25*lastVariableCheck 300 28],...
                'String','',...
                'Style','text',...
                'Tag',['VariableDescription' CPtwodigitstring(lastVariableCheck)],...
                'UserData',[],...
                'Behavior',get(0,'defaultuicontrolBehavior'),...
                'Visible','off',...
                'CreateFcn', '');

            set(handles.VariableDescription{ModuleNums}(lastVariableCheck),'string',descriptionString);

            linesVarDes = length(textwrap(handles.VariableDescription{ModuleNums}(lastVariableCheck),{descriptionString}));
            numberExtraLinesOfDescription = numberExtraLinesOfDescription + linesVarDes - 1;
            VarDesPosition = get(handles.VariableDescription{ModuleNums}(lastVariableCheck), 'Position');
            varXPos = VarDesPosition(1);
            varYPos = firstDesLoc+pixelSpacing*numberExtraLinesOfDescription-varSpacing*(lastVariableCheck+numberExtraLinesOfDescription);
            varXSize = VarDesPosition(3);
            varYSize = normDesHeight*linesVarDes + pixelSpacing*(linesVarDes-1);
            set(handles.VariableDescription{ModuleNums}(lastVariableCheck),'Position', [varXPos varYPos varXSize varYSize]);
            varYPos = firstBoxLoc+pixelSpacing*numberExtraLinesOfDescription-varSpacing*(lastVariableCheck+numberExtraLinesOfDescription-(linesVarDes-1)/2.0);
            set(handles.VariableBox{ModuleNums}(lastVariableCheck), 'Position', [305 varYPos 195 23]);
            set(handles.BrowseButton{ModuleNums}(lastVariableCheck), 'Position', [501 varYPos 63 20]);

        elseif strncmp(output,'%pathnametextVAR',16)

            lastVariableCheck = str2double(output(17:18));
            if ~RunInBG
                handles.Settings.VariableValues(ModuleNums, lastVariableCheck) = {''};
            end
            handles.Settings.NumbersOfVariables(str2double(ModuleNumber)) = lastVariableCheck;
            descriptionString = output(22:end);

            handles.VariableBox{ModuleNums}(lastVariableCheck) = uicontrol(...
                'Parent',handles.variablepanel,...
                'Units','pixels',...
                'BackgroundColor',[1 1 1],...
                'Callback','CellProfiler(''VariableBox_Callback'',gcbo,[],guidata(gcbo))',...
                'FontName','helvetica',...
                'FontSize',handles.Preferences.FontSize,...
                'Position',[305 295-25*lastVariableCheck 195 23],...
                'String','.',...
                'Style','edit',...
                'CreateFcn', 'CellProfiler(''VariableBox_CreateFcn'',gcbo,[],guidata(gcbo))',...
                'Tag',['VariableBox' CPtwodigitstring(lastVariableCheck)],...
                'Behavior',get(0,'defaultuicontrolBehavior'),...
                'UserData','undefined',...
                'Visible','off');

            handles.BrowseButton{ModuleNums}(lastVariableCheck) = uicontrol(...
                'Parent',handles.variablepanel,...
                'Units','pixels',...
                'BackgroundColor',[.7 .7 .9],...
                'Callback','handles = guidata(findobj(''tag'',''figure1'')); VariableBoxHandle = get(gco,''UserData''); CurrentChoice = get(VariableBoxHandle,''String''); if ~exist(CurrentChoice, ''dir''), CurrentChoice = pwd; end; Pathname = CPuigetdir(CurrentChoice,''Pick the directory you want.''); pause(.1); figure(handles.figure1); if Pathname == 0, else, set(VariableBoxHandle,''String'',Pathname); ModuleHighlighted = get(handles.ModulePipelineListBox,''Value''); ModuleNumber = ModuleHighlighted(1); VariableName = get(VariableBoxHandle,''Tag''); VariableNumberStr = VariableName(12:13); VarNum = str2num(VariableNumberStr); handles.Settings.VariableValues(ModuleNumber,VarNum) = {Pathname}; guidata(handles.figure1,handles); end; clear handles VariableBoxHandle CurrentChoice Pathname ModuleHighlighted ModuleNumber VariableName VariableNumberStr VarNum;',...
                'FontName','helvetica',...
                'FontSize',handles.Preferences.FontSize,...
                'FontWeight','bold',...
                'Position',[501 295-25*lastVariableCheck 63 20],...
                'String','Browse...',...
                'Style','pushbutton',...
                'CreateFcn', 'CellProfiler(''VariableBox_CreateFcn'',gcbo,[],guidata(gcbo))',...
                'Tag',['BrowseButton' CPtwodigitstring(lastVariableCheck)],...
                'Behavior',get(0,'defaultuicontrolBehavior'),...
                'UserData',handles.VariableBox{ModuleNums}(lastVariableCheck),...
                'Visible','off');

            handles.VariableDescription{ModuleNums}(lastVariableCheck) = uicontrol(...
                'Parent',handles.variablepanel,...
                'Units','pixels',...
                'BackgroundColor',[0.7 0.7 0.9],...
                'CData',[],...
                'FontName','helvetica',...
                'FontSize',handles.Preferences.FontSize,...
                'FontWeight','bold',...
                'HorizontalAlignment','right',...
                'Position',[2 295-25*lastVariableCheck 300 28],...
                'String','',...
                'Style','text',...
                'Tag',['VariableDescription' CPtwodigitstring(lastVariableCheck)],...
                'UserData',[],...
                'Behavior',get(0,'defaultuicontrolBehavior'),...
                'Visible','off',...
                'CreateFcn', '');

            set(handles.VariableDescription{ModuleNums}(lastVariableCheck),'string',descriptionString);

            linesVarDes = length(textwrap(handles.VariableDescription{ModuleNums}(lastVariableCheck),{descriptionString}));
            numberExtraLinesOfDescription = numberExtraLinesOfDescription + linesVarDes - 1;
            VarDesPosition = get(handles.VariableDescription{ModuleNums}(lastVariableCheck), 'Position');
            varXPos = VarDesPosition(1);
            varYPos = firstDesLoc+pixelSpacing*numberExtraLinesOfDescription-varSpacing*(lastVariableCheck+numberExtraLinesOfDescription);
            varXSize = VarDesPosition(3);
            varYSize = normDesHeight*linesVarDes + pixelSpacing*(linesVarDes-1);
            set(handles.VariableDescription{ModuleNums}(lastVariableCheck),'Position', [varXPos varYPos varXSize varYSize]);
            varYPos = firstBoxLoc+pixelSpacing*numberExtraLinesOfDescription-varSpacing*(lastVariableCheck+numberExtraLinesOfDescription-(linesVarDes-1)/2.0);
            set(handles.VariableBox{ModuleNums}(lastVariableCheck), 'Position', [305 varYPos 195 23]);
            set(handles.BrowseButton{ModuleNums}(lastVariableCheck), 'Position', [501 varYPos 63 20]);

        elseif strncmp(output,'%choiceVAR',10)
            if ~(exist('StrSet','var'))
                StrSet = cell(1);
                StrSet{1} = output(16:end);
            else
                StrSet{numel(StrSet)+1} = output(16:end);
            end
            if isempty(handles.Settings.VariableValues(ModuleNums,lastVariableCheck))
                handles.Settings.VariableValues(ModuleNums,lastVariableCheck) = StrSet(1);
            end
        elseif strncmp(output,'%infotypeVAR',12)
            lastVariableCheck = str2double(output(13:14));
            try
                set(handles.VariableBox{ModuleNums}(lastVariableCheck),'UserData', output(18:end));
            catch
                keyboard;
            end
            handles.Settings.VariableInfoTypes(ModuleNums,lastVariableCheck) = {output(18:end)};

            if strcmp(output((length(output)-4):end),'indep')
                UserEntry = char(handles.Settings.VariableValues(ModuleNums,lastVariableCheck));
                if ~strcmp(UserEntry,'n/a') && ~strcmp(UserEntry,'/') && ~isempty(UserEntry)
                    storevariable(ModuleNums,output(13:14),UserEntry,handles);
                end
            end
            guidata(handles.figure1,handles);
        elseif strncmp(output,'%inputtypeVAR',13)
            lastVariableCheck = str2double(output(14:15));
            set(handles.VariableBox{ModuleNums}(lastVariableCheck),'style', output(19:27));
            VersionCheck = version;
            if strcmp(output(19:27),'popupmenu') && ~ispc && str2double(VersionCheck(1:3)) >= 7.1
                set(handles.VariableBox{ModuleNums}(lastVariableCheck),'BackgroundColor',[.7 .7 .9]);
            end
            if ~(exist('StrSet','var'))
                StrSet = cell(1);
                Count = 1;
            else
                Count = size(StrSet,2)+1;
            end
            for i=1:handles.Current.NumberOfModules
                for j=1:size(handles.Settings.VariableInfoTypes,2)
                    if size(handles.Settings.VariableInfoTypes,1) >= i
                        if ~strcmp(get(handles.VariableBox{ModuleNums}(lastVariableCheck),'UserData'),'undefined') && strcmp(handles.Settings.VariableInfoTypes{i,j},[get(handles.VariableBox{ModuleNums}(lastVariableCheck),'UserData'),' indep'])
                            if  (~isempty(handles.Settings.VariableValues{i,j})) && ( Count == 1 || (ischar(handles.Settings.VariableValues{i,j}) && isempty(strmatch(handles.Settings.VariableValues{i,j}, StrSet, 'exact')))) && ~strcmp(handles.Settings.VariableValues{i,j},'/') && ~strcmp(handles.Settings.VariableValues{i,j},'Do not use') && ~strcmp(handles.Settings.VariableValues{i,j},'n/a')
                                TestStr = 0;
                                for m=1:length(StrSet)
                                    if strcmp(StrSet(m),handles.Settings.VariableValues(i,j))
                                        TestStr = TestStr + 1;
                                    end
                                end
                                if TestStr == 0
                                    StrSet(Count) = handles.Settings.VariableValues(i,j);
                                    Count = Count + 1;
                                end
                            end
                        end
                    end
                end
            end
            CurrentValue = handles.Settings.VariableValues{ModuleNums,lastVariableCheck};
            if strcmp(output(29:end),'custom')
                if  (~isempty(CurrentValue)) && ( Count == 1 || (ischar(CurrentValue) && isempty(strmatch(CurrentValue, StrSet, 'exact'))))
                    StrSet(Count) = { CurrentValue };
                    Count = Count + 1;
                end
                StrSet(Count) = {'Other..'};
                Count = Count + 1;
            elseif strcmp(output(29:end),'scale')
                scales = CPgetpriorscales(handles,ModuleNums);
                for scale = scales
                    StrSet(Count)={ num2str(scale) };
                    Count=Count+1;
                end
                if  (~isempty(CurrentValue)) && ( Count == 1 || (ischar(CurrentValue) && isempty(strmatch(CurrentValue, StrSet, 'exact'))))
                    StrSet(Count) = handles.Settings.VariableValues(ModuleNums,lastVariableCheck);
                    Count = Count + 1;
                end
                StrSet(Count) = {'Other..'};
                Count = Count + 1;
            elseif strcmp(output(29:end),'category')
                %%% NOTE: depends on a strict order of Object/Image, then category
                categories= CPgetpriorcategories(handles, ModuleNums,...
                    handles.Settings.VariableValues(ModuleNums,lastVariableCheck-1));
                [handles,StrSet,Count]=getStrSet(handles,categories,ModuleNums,lastVariableCheck,StrSet);
                set(handles.VariableBox{ModuleNums}(lastVariableCheck),'UserData','category');
            elseif strcmp(output(29:end),'measurement')
                %%% NOTE: depends on a strict order of Object/Image, category and measurement
                measurements=CPgetpriormeasurements(...
                    handles, ModuleNums,...
                    handles.Settings.VariableValues(ModuleNums,lastVariableCheck-2),...
                    handles.Settings.VariableValues(ModuleNums,lastVariableCheck-1));
                [handles,StrSet,Count] = getStrSet(handles,measurements,ModuleNums,lastVariableCheck,StrSet);
                set(handles.VariableBox{ModuleNums}(lastVariableCheck),'UserData','measurement');
            end

            set(handles.VariableBox{ModuleNums}(lastVariableCheck),'string',StrSet);
            guidata(handles.figure1,handles);

            if Count == 1
                set(handles.VariableBox{ModuleNums}(lastVariableCheck),'enable','off')
                guidata(handles.figure1,handles);
            end

            clear StrSet
        elseif strncmp(output,'% $Revision:', 12)
            try
                handles.Settings.ModuleRevisionNumbers(ModuleNums) = str2double(output(14:17));
            catch
                handles.Settings.ModuleRevisionNumbers(ModuleNums) = str2double(output(14:18));
            end
        elseif strncmp(output,'%%%VariableRevisionNumber',25)
            try
                handles.Settings.VariableRevisionNumbers(ModuleNums) = str2double(output(29:30));
            catch
                handles.Settings.VariableRevisionNumbers(ModuleNums) = str2double(output(29:29));
            end
            break;
        elseif strncmp(output,'%feature:',9)
            NumberOfFeatures = NumberOfFeatures+1;
            handles.Settings.ModuleSupportedFeatures{ModuleNums}{NumberOfFeatures} = output(10:end);
        end
    end

    fclose(fid);
    if ~isfield(handles.Settings,'VariableInfoTypes') || size(handles.Settings.VariableInfoTypes,1) < size(handles.Settings.VariableValues,1),
        handles.Settings.VariableInfoTypes(size(handles.Settings.VariableValues,1),:)={[]};
    end
    
    for i=1:lastVariableCheck
        if strcmp(get(handles.VariableBox{ModuleNums}(i),'style'),'edit')
            if ~RunInBG
                handles.Settings.VariableValues{ModuleNums, i} = get(handles.VariableBox{ModuleNums}(i),'String');
            else
                set(handles.VariableBox{ModuleNums}(i),'String',handles.Settings.VariableValues{ModuleNums,i});
            end
        else
            OptList = get(handles.VariableBox{ModuleNums}(i),'String');
            if ~RunInBG
                handles.Settings.VariableValues{ModuleNums, i} = OptList{1};
            else
                PPos = find(strcmp(handles.Settings.VariableValues{ModuleNums,i},OptList));
                if isempty(PPos)
                    if ~strcmp(handles.Settings.VariableValues{ModuleNums,i},'Pipeline Value')
                        %%% [Kyungnam & Anne, Aug-08-2007]
                        %%% Here is the place where the values of VariableBoxes are set
                        %%% based on the Settings of the pipeline loaded by the user.
                        %%% We are adding a catch to help deal with old versions of the Modules using Median Filtering
                        %%% e.g., CorrectIllumination_Calculate, Smooth. Median Filtering is automatically converted to
                        %%% Gaussian Filter.
                        if strcmp(handles.Settings.VariableValues{ModuleNums,i}, 'Median Filtering')
                            handles.Settings.VariableValues{ModuleNums,i} = 'Gaussian Filter';
                            CPwarndlg('Your pipeline uses Modules(s) including old ''Median Filtering'' which is actually ''Gaussian Filter''. We automatically convert Median Filtering to Gaussian Filter for your convenience');
                        else
                            set(handles.VariableBox{ModuleNums}(i),'String',[OptList;handles.Settings.VariableValues(ModuleNums,i)]);                            
                        end                                            
                        PPos = find(strcmp(handles.Settings.VariableValues{ModuleNums,i},OptList));
                        if (isempty(PPos)),
                            PPos = 1;
                        end
                        set(handles.VariableBox{ModuleNums}(i),'Value',PPos);
                    end
                else
                    set(handles.VariableBox{ModuleNums}(i),'Value',PPos);
                end
            end
        end
    end
    
    if lastVariableCheck == 0
        CPerrordlg(['The module you attempted to add, ', ModuleNamedotm,', is not a valid CellProfiler module because it does not appear to have any variables.  Sometimes this error occurs when you try to load a module that has the same name as a built-in Matlab function and the built in function is located in a directory higher up on the Matlab search path.']);
        return
    end

    try Contents = handles.Settings.VariableRevisionNumbers(str2double(ModuleNumber));
    catch handles.Settings.VariableRevisionNumbers(str2double(ModuleNumber)) = 0;
    end

    %blah
    try ModuleRevContents = handles.Settings.ModuleRevisionNumbers(str2double(ModuleNumber));
    catch handles.Settings.ModuleRevisionNumbers(str2double(ModuleNumber)) = 0;
    end

    %%% 5. Saves the ModuleName to the handles structure.
    % Find which module slot number this callback was called for.

    handles.Settings.ModuleNames{ModuleNums} = ModuleName;
    if ~RunInBG
        contents = get(handles.ModulePipelineListBox,'String');
        if iscell(contents)
            contents{ModuleNums} = ModuleName;
        else
            contents = {ModuleName};
        end
        set(handles.ModulePipelineListBox,'String',contents);
    end

    handles.Current.NumberOfModules = numel(handles.Settings.ModuleNames);

    %%% 6. Choose Loaded Module in Listbox
    if ~RunInBG
        set(handles.ModulePipelineListBox,'Value',ModuleNums);
    else
        set(findobj('Parent',handles.variablepanel,'Visible','On'),'Visible','Off');
    end

    MaxInfo = get(handles.slider1,'UserData');
    MaxInfo = [MaxInfo(1:ModuleNums-1) ((handles.Settings.NumbersOfVariables(ModuleNums)-12+numberExtraLinesOfDescription)*25) MaxInfo(ModuleNums:end)];
    set(handles.slider1,'UserData',MaxInfo);

    %%% Updates the handles structure to incorporate all the changes.
    guidata(handles.figure1,handles);

    if ~RunInBG
        ModulePipelineListBox_Callback(gcbo, [], handles);
        slider1_Callback(handles.slider1,0,handles);
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% getStrSet - build a set of strings for a popupmenu
%%%             including information about the current state
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [handles,StrSet,Count] = getStrSet(handles, my_list, ModuleNums,lastVariableCheck,StrSet)
    Count=0;
    CurrentValue = handles.Settings.VariableValues{ModuleNums,lastVariableCheck};
    if ~ isempty(my_list)
        for element = my_list
            Count=Count+1;
            StrSet(Count)= element;
        end
    end
    if  (~isempty(CurrentValue)) && ( Count == 0 || (ischar(CurrentValue) && isempty(strmatch(CurrentValue, StrSet, 'exact'))))
        Count = Count + 1;
        StrSet(Count) = { CurrentValue };
    end
    Count = Count + 1;
    StrSet(Count) = {'Other..'};
    if (isempty(CurrentValue))
        handles.Settings.VariableValues(ModuleNums,lastVariableCheck) = { StrSet(1) };
    end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% REMOVE MODULE BUTTON %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press for RemoveModule button.
function RemoveModule_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
ModuleHighlighted = get(handles.ModulePipelineListBox,'Value');
RemoveModule_Helper(ModuleHighlighted, hObject, eventdata, handles, 'Confirm');
%%% SUBFUNCTION %%%
function RemoveModule_Helper(ModuleHighlighted, hObject, eventdata, handles, ConfirmOrNot) %#ok We want to ignore MLint error checking for this line.

if strcmp(ConfirmOrNot, 'Confirm') == 1
    %%% Confirms the choice to clear the module.
    Answer = CPquestdlg('Are you sure you want to delete this analysis module from the image analysis pipeline?','Confirm','Yes','No','Yes');
    if strcmp(Answer,'No')
        return
    end
end
if isempty(handles.Settings.ModuleNames);
    return
end
%%% 1. Sets all VariableBox edit boxes and all VariableDescriptions to be invisible.

MaxInfo = get(handles.slider1,'UserData');

for ModuleDelete = 1:length(ModuleHighlighted);
    handles = RemoveVariables(handles,ModuleHighlighted(ModuleDelete)-ModuleDelete+1);
    %%% Remove variable names from other modules
    for VariableNumber = 1:length(handles.VariableBox{ModuleHighlighted(ModuleDelete)-ModuleDelete+1})
        delete(handles.VariableBox{ModuleHighlighted(ModuleDelete)-ModuleDelete+1}(VariableNumber));
    end
    for VariableNumber = 1:length(handles.VariableDescription{ModuleHighlighted(ModuleDelete)-ModuleDelete+1})
        delete(handles.VariableDescription{ModuleHighlighted(ModuleDelete)-ModuleDelete+1}(VariableNumber));
    end
    if isfield(handles,'BrowseButton')
        if length(handles.BrowseButton) >= (ModuleHighlighted(ModuleDelete)-ModuleDelete+1)
            if ~isempty(handles.BrowseButton{ModuleHighlighted(ModuleDelete)-ModuleDelete+1})
                for VariableNumber = 1:length(handles.BrowseButton{ModuleHighlighted(ModuleDelete)-ModuleDelete+1})
                    if (handles.BrowseButton{ModuleHighlighted(ModuleDelete)-ModuleDelete+1}(VariableNumber) ~= 0) && ishandle(handles.BrowseButton{ModuleHighlighted(ModuleDelete)-ModuleDelete+1}(VariableNumber))
                        delete(handles.BrowseButton{ModuleHighlighted(ModuleDelete)-ModuleDelete+1}(VariableNumber));
                    end
                end
            end
        end
    end
    %%% 2. Removes the ModuleName from the handles structure.
    handles.Settings.ModuleNames(ModuleHighlighted(ModuleDelete)-ModuleDelete+1) = [];
    %%% 3. Clears the variable values in the handles structure.
    handles.Settings.VariableValues(ModuleHighlighted(ModuleDelete)-ModuleDelete+1,:) = [];
    %%% 4. Clears the number of variables in each module slot from handles structure.
    handles.Settings.NumbersOfVariables(ModuleHighlighted(ModuleDelete)-ModuleDelete+1) = [];
    %%% 5. Clears the Variable Revision Numbers in each module slot from handles structure.
    handles.Settings.VariableRevisionNumbers(ModuleHighlighted(ModuleDelete)-ModuleDelete+1) = [];
    %%% 6. Clears the Module Revision Numbers in each module slot from handles structure.
    handles.Settings.ModuleRevisionNumbers(ModuleHighlighted(ModuleDelete)-ModuleDelete+1) = [];
    %%% 7. Clears supported features from handles structure.
    handles.Settings.ModuleSupportedFeatures(ModuleHighlighted(ModuleDelete)-ModuleDelete+1) = [];
    %%% 8. Clears module notes from handles structure.
    handles.Settings.ModuleNotes(ModuleHighlighted(ModuleDelete)-ModuleDelete+1) = [];
    if size(handles.Settings.VariableInfoTypes,1) >= (ModuleHighlighted(ModuleDelete)-ModuleDelete+1)
        handles.Settings.VariableInfoTypes(ModuleHighlighted(ModuleDelete)-ModuleDelete+1,:) = [];
    end
    handles.VariableDescription(ModuleHighlighted(ModuleDelete)-ModuleDelete+1)=[];
    handles.VariableBox(ModuleHighlighted(ModuleDelete)-ModuleDelete+1)=[];
    if isfield(handles,'BrowseButton')
        if length(handles.BrowseButton) >= (ModuleHighlighted(ModuleDelete)-ModuleDelete+1)
            handles.BrowseButton(ModuleHighlighted(ModuleDelete)-ModuleDelete+1)=[];
        end
    end
    MaxInfo = [MaxInfo(1:(ModuleHighlighted(ModuleDelete)-ModuleDelete)) MaxInfo((ModuleHighlighted(ModuleDelete)-ModuleDelete+2):end)];
end

if length(handles.Settings.NumbersOfVariables) ~= length(handles.Settings.ModuleNames)
    CPmsgbox('STOP! Somehow the NumbersOfVariable was not set correctly! Please record EVERYTHING you have done in the past few minutes and send to mrl@wi.mit.edu! Be sure to include what modules are in your pipeline and what you tried to do to cause this error (Adding, Subtracting, Moving modules, how many?).');
end

set(handles.slider1,'UserData',MaxInfo);

%%% 5. Update the number of modules loaded
handles.Current.NumberOfModules = 0;
handles.Current.NumberOfModules = length(handles.Settings.ModuleNames);

%%% 6. Sets the proper module name to "No analysis module loaded"
if(isempty(handles.Settings.ModuleNames))
    contents = {'No Modules Loaded'};
else
    contents = handles.Settings.ModuleNames;
end

set(handles.ModulePipelineListBox,'String',contents);

while((isempty(ModuleHighlighted)==0) && (ModuleHighlighted(length(ModuleHighlighted)) > handles.Current.NumberOfModules) )
    ModuleHighlighted(length(ModuleHighlighted)) = [];
end

if(handles.Current.NumberOfModules == 0)
    ModuleHighlighted = 1;
    set(handles.slider1,'visible','off');
elseif (isempty(ModuleHighlighted))
    ModuleHighlighted = handles.Current.NumberOfModules;
end

set(handles.ModulePipelineListBox,'Value',ModuleHighlighted);

guidata(gcbo, handles);
ModulePipelineListBox_Callback(hObject, eventdata, handles);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% MOVE UP/DOWN BUTTONS %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function MoveUpButton_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
ModuleHighlighted = get(handles.ModulePipelineListBox,'Value');
if ~(isempty(ModuleHighlighted) || handles.Current.NumberOfModules < 1 || ModuleHighlighted(1) == 1)
    MaxInfo = get(handles.slider1,'UserData');
    for ModuleUp1 = 1:length(ModuleHighlighted);
        ModuleUp = ModuleHighlighted(ModuleUp1)-1;
        ModuleNow = ModuleHighlighted(ModuleUp1);

        handles = ExchangeModules(handles, ModuleNow, ModuleUp);
        if isfield(handles,'BrowseButton')
            if length(handles.BrowseButton) >= ModuleNow
                CopyBrowseButton = handles.BrowseButton(ModuleNow);
                handles.BrowseButton(ModuleNow) = handles.BrowseButton(ModuleUp);
                handles.BrowseButton(ModuleUp) = CopyBrowseButton;
            else
                if length(handles.BrowseButton) >= ModuleUp
                    handles.BrowseButton(ModuleNow) = handles.BrowseButton(ModuleUp);
                    handles.BrowseButton(ModuleUp) = {[]};
                end
            end
        end

        CopyMaxInfo = MaxInfo(ModuleNow);
        MaxInfo(ModuleNow) = MaxInfo(ModuleUp);
        MaxInfo(ModuleUp) = CopyMaxInfo;
    end
    %%% 7. Changes the Listbox to show the changes
    contents = handles.Settings.ModuleNames;
    set(handles.ModulePipelineListBox,'String',contents);
    set(handles.ModulePipelineListBox,'Value',ModuleHighlighted-1);
    set(handles.slider1,'UserData',MaxInfo);
    %%% Updates the handles structure to incorporate all the changes.
    guidata(gcbo, handles);
    ModulePipelineListBox_Callback(hObject, eventdata, handles)
end

if length(handles.Settings.NumbersOfVariables) ~= length(handles.Settings.ModuleNames)
    CPmsgbox('STOP! Somehow the NumbersOfVariable was not set correctly! Please record EVERYTHING you have done in the past few minutes and send to mrl@wi.mit.edu! Be sure to include what modules are in your pipeline and what you tried to do to cause this error (Adding, Subtracting, Moving modules, how many?).');
end

function handles = ExchangeModules(handles, ModuleNow, ModuleUp)
%%% 1. Switches ModuleNames
ModuleUpName = char(handles.Settings.ModuleNames(ModuleUp));
ModuleName = char(handles.Settings.ModuleNames(ModuleNow));
handles.Settings.ModuleNames{ModuleUp} = ModuleName;
handles.Settings.ModuleNames{ModuleNow} = ModuleUpName;
%%% 2. Copy then clear the variable values in the handles structure.
copyVariables = handles.Settings.VariableValues(ModuleNow,:);
handles.Settings.VariableValues(ModuleNow,:) = handles.Settings.VariableValues(ModuleUp,:);
handles.Settings.VariableValues(ModuleUp,:) = copyVariables;
%%% 3. Copy then clear the num of variables in the handles
%%% structure.
copyNumVariables = handles.Settings.NumbersOfVariables(ModuleNow);
handles.Settings.NumbersOfVariables(ModuleNow) = handles.Settings.NumbersOfVariables(ModuleUp);
handles.Settings.NumbersOfVariables(ModuleUp) = copyNumVariables;
%%% 4. Copy then clear the variable revision numbers in the handles
%%% structure.
copyVarRevNums = handles.Settings.VariableRevisionNumbers(ModuleNow);
handles.Settings.VariableRevisionNumbers(ModuleNow) = handles.Settings.VariableRevisionNumbers(ModuleUp);
handles.Settings.VariableRevisionNumbers(ModuleUp) = copyVarRevNums;
%%% 5. Copy then clear the module revision numbers in the handles
%%% structure.
copyModRevNums = handles.Settings.ModuleRevisionNumbers(ModuleNow);
handles.Settings.ModuleRevisionNumbers(ModuleNow) = handles.Settings.ModuleRevisionNumbers(ModuleUp);
handles.Settings.ModuleRevisionNumbers(ModuleUp) = copyModRevNums;
%%% 6. Copy then clear the variable infotypes in the handles
%%% structure.
copyVarInfoTypes = handles.Settings.VariableInfoTypes(ModuleNow,:);
handles.Settings.VariableInfoTypes(ModuleNow,:) = handles.Settings.VariableInfoTypes(ModuleUp,:);
handles.Settings.VariableInfoTypes(ModuleUp,:) = copyVarInfoTypes;

%%% 7. Copy then clear the module features
copyModuleFeatures = handles.Settings.ModuleSupportedFeatures{ModuleNow};
handles.Settings.ModuleSupportedFeatures{ModuleNow} = handles.Settings.ModuleSupportedFeatures{ModuleUp};
handles.Settings.ModuleSupportedFeatures{ModuleUp} = copyModuleFeatures;

%%% 8. Copy the module notes
copyModuleNotes = handles.Settings.ModuleNotes{ModuleNow};
handles.Settings.ModuleNotes{ModuleNow} = handles.Settings.ModuleNotes{ModuleUp};
handles.Settings.ModuleNotes{ModuleUp} = copyModuleNotes;

CopyVariableDescription = handles.VariableDescription(ModuleNow);
handles.VariableDescription(ModuleNow) = handles.VariableDescription(ModuleUp);
handles.VariableDescription(ModuleUp) = CopyVariableDescription;

CopyVariableBox = handles.VariableBox(ModuleNow);
handles.VariableBox(ModuleNow) = handles.VariableBox(ModuleUp);
handles.VariableBox(ModuleUp) = CopyVariableBox;

function MoveDownButton_Callback(hObject,eventdata,handles) %#ok We want to ignore MLint error checking for this line.
ModuleHighlighted = get(handles.ModulePipelineListBox,'Value');
if ~(isempty(ModuleHighlighted) || handles.Current.NumberOfModules<1 || ModuleHighlighted(length(ModuleHighlighted)) >= handles.Current.NumberOfModules)
    MaxInfo = get(handles.slider1,'UserData');
    for ModuleDown1 = length(ModuleHighlighted):-1:1;
        ModuleDown = ModuleHighlighted(ModuleDown1) + 1;
        ModuleNow = ModuleHighlighted(ModuleDown1);
        handles = ExchangeModules(handles, ModuleNow, ModuleDown);
        if isfield(handles,'BrowseButton')
            if length(handles.BrowseButton) >= ModuleNow
                CopyBrowseButton = handles.BrowseButton(ModuleNow);
                if length(handles.BrowseButton) >= ModuleDown
                    handles.BrowseButton(ModuleNow) = handles.BrowseButton(ModuleDown);
                else
                    handles.BrowseButton(ModuleNow) = [];
                end
                handles.BrowseButton(ModuleDown) = CopyBrowseButton;
            end
        end

        CopyMaxInfo = MaxInfo(ModuleNow);
        MaxInfo(ModuleNow) = MaxInfo(ModuleDown);
        MaxInfo(ModuleDown) = CopyMaxInfo;
    end
    %%% 7. Changes the Listbox to show the changes
    contents = handles.Settings.ModuleNames;
    set(handles.ModulePipelineListBox,'String',contents);
    set(handles.ModulePipelineListBox,'Value',ModuleHighlighted+1);
    set(handles.slider1,'UserData',MaxInfo);
    %%% Updates the handles structure to incorporate all the changes.
    guidata(gcbo, handles);
    ModulePipelineListBox_Callback(hObject, eventdata, handles)
end

if length(handles.Settings.NumbersOfVariables) ~= length(handles.Settings.ModuleNames)
    CPmsgbox('STOP! Somehow the NumbersOfVariable was not set correctly! Please record EVERYTHING you have done in the past few minutes and send to mrl@wi.mit.edu! Be sure to include what modules are in your pipeline and what you tried to do to cause this error (Adding, Subtracting, Moving modules, how many?).');
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% MODULE PIPELINE LISTBOX %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on selection change in ModulePipelineListBox.
function ModulePipelineListBox_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
ModuleHighlighted = get(handles.ModulePipelineListBox,'Value');
if (length(ModuleHighlighted) > 0)
    ModuleNumber = ModuleHighlighted(1);
    if( handles.Current.NumberOfModules > 0 )
        %%% 2. Sets all VariableBox edit boxes and all
        %%% VariableDescriptions to be invisible.
        set(findobj('Parent',handles.variablepanel,'Visible','On'),'Visible','Off');
        set(handles.VariableDescription{ModuleNumber},'Visible','On');

        if length(handles.VariableBox) == 1
            set(handles.VariableBox{ModuleNumber}(~strcmp({get(handles.VariableBox{ModuleNumber},'string')},'n/a')),'Visible','On'); %only makes the boxes without n/a as the string visible
        else
            set(handles.VariableBox{ModuleNumber}(~strcmp(get(handles.VariableBox{ModuleNumber},'string'),'n/a')),'Visible','On'); %only makes the boxes without n/a as the string visible
        end
        try
            set(handles.BrowseButton{ModuleNumber},'Visible','On')
        end
        %%% 2.25 Removes slider and moves panel back to original
        %%% position.
        %%% If panel location gets changed in GUIDE, must change the
        %%% position values here as well.
        set(handles.variablepanel, 'position', [238 0 563 346]);
        MatlabVersion = version;
        MatlabVersion = str2double(MatlabVersion(1:3));
        if ispc || (MatlabVersion >= 7.1)
            set(handles.slider1,'value',get(handles.slider1,'max'));
        else
            set(handles.slider1,'value',get(handles.slider1,'min'));
        end

        set(handles.slider1,'visible','off');
        %%% 2.5 Checks whether a module is loaded in this slot.
        % contents = get(handles.ModulePipelineListBox,'String');
        % ModuleName = contents{ModuleNumber};

        %%% 5.  Sets the slider
        MaxInfo = get(handles.slider1,'UserData');
        MaxInfo = MaxInfo(ModuleNumber);
        if(MaxInfo > 0)
            set(handles.slider1,'visible','on');
            set(handles.slider1,'max',MaxInfo);
            if ispc || (MatlabVersion >= 7.1)
                set(handles.slider1,'value',get(handles.slider1,'max'));
            else
                set(handles.slider1,'value',get(handles.slider1,'min'));
            end
            set(handles.slider1,'SliderStep',[max(.2,1/MaxInfo) min(1,5/MaxInfo)]);
        end
        slider1_Callback(handles.slider1,0,handles);
    else
        % Anne 7/11/06 Nice idea to have a confirmation, but I commented out the
        % dialog, because I think almost always
        % the user will have clicked intentionally, and the consequences of opening
        % up the Add module window are pretty minimal (that is, it is an easily
        % reversible choice). Also, because this can only happen right when the
        % user starts up CellProfiler, the chances for random clicking are fairly
        % minimal as well.
        % Rodrigo 7/13/06 - Maybe we can check the selection type, and open the Add
        % module window only if the user double-clicked. Nothing will happen
        % otherwise. What do you prefer?
        % Rodrigo 7/20/06 - We may have another problem with this. When
        % ModulePipelineListBox_Callback gets called by ClearPipeline_Callback, it
        % opens the AddModule window because ClearPipeline sets
        % handles.Current.NumberOfModules to 0 right before making the call. I
        % removed the call from ClearPipeline, but the same happens when you use
        % RemoveModule when you only have 1 module in the listbox. Obviously I
        % can't remove the call from RemoveModule_Callback because it's necessary,
        % so we might need to add some kind of test here. I checked every other
        % call to ModulePipelineListBox_Callback and I think they're all ok.
        % Rodrigo 7/21/06 - I just added another call to this function. I needed to
        % call it in the LoadPipeline_Callback function to refresh the variable
        % panel if the loading was aborted. It also opens the AddModule window.

        %        Answer = CPquestdlg('No modules are loaded. Do you want to add one?','No modules are loaded','Yes','No','Yes');
        %       if strcmp(Answer,'Yes')
        %%%%%  if strcmp(get(gcf,'SelectionType'),'open') %% these two lines should make it work
        %
        % Mike 9/7/06 I think opening the add module window should not
        % be done here, since it happens on occasions such as trying to
        % plot a histogram. Commented out.
        % AddModule_Callback(findobj('tag','AddModule'),[],handles);
        %%%%%  end
        %      end
    end
else
    % Mike 9/7/06 This is also very annoying. Feel free to discuss with me.
    %CPhelpdlg('No module highlighted.');
end

%%%% On double-click of a Module in the ModulePipelineListBox,
%%%%  bring its corresponding figure window (if it exists) to the foreground
if strcmp(get(gcf,'SelectionType'),'open')
    if isfield(handles.Settings,'ModuleNames')
        SelectedFigs = findobj('-regexp','Name',handles.Settings.ModuleNames{ModuleHighlighted},'-and','NumberTitle','on','-and','-property','UserData');
        if ~isempty(SelectedFigs) && exist('ModuleNumber','var') && isfield(handles.Current,['FigureNumberForModule' CPtwodigitstring(ModuleNumber)])
            LoneSelectedFig = SelectedFigs(SelectedFigs == handles.Current.(['FigureNumberForModule' CPtwodigitstring(ModuleNumber)]));
            if length(LoneSelectedFig) == 1
                CPfigure(LoneSelectedFig);
            end
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% VARIABLE EDIT BOXES %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%

function handles = RemoveVariables(handles,ModuleNumber)
%%% This function removes all variables of a specified Module from the
%%% handles structure.

for i = 1:length(handles.VariableBox{ModuleNumber})
    InfoType = get(handles.VariableBox{ModuleNumber}(i),'UserData');
    StrSet = get(handles.VariableBox{ModuleNumber}(i),'string');
    if length(InfoType) >= 5 && strcmp(InfoType(end-4:end),'indep')
        ModList = findobj('UserData',InfoType(1:end-6));
        ModList2 = findobj('UserData',InfoType);
        ModList2 = ModList2(ModList2 ~= handles.VariableBox{ModuleNumber}(i));
        TestVars = get(ModList2,'string');
        OtherIndepWithSameValue = [];
        for k = 1:length(TestVars)
            if isempty(OtherIndepWithSameValue)
                if iscell(TestVars)
                    OtherIndepWithSameValue = strmatch(StrSet,TestVars{k});
                else
                    OtherIndepWithSameValue = strmatch(StrSet,TestVars(k));
                end
            end
        end

        if isempty(OtherIndepWithSameValue)
            for m=1:numel(ModList)
                PrevList = get(ModList(m),'string');
                VarVal = get(ModList(m),'value');
                BoxTag = get(ModList(m),'tag');
                BoxNum = str2double(BoxTag((length(BoxTag)-1):end));
                ModNum = [];
                for j = 1:length(handles.VariableBox)
                    if length(handles.VariableBox{j}) >= BoxNum
                        if ModList(m) == handles.VariableBox{j}(BoxNum)
                            ModNum = j;
                        end
                    end
                end
                if strcmp(get(ModList(m),'style'),'popupmenu')
                    if strcmp(PrevList(VarVal),StrSet)
                        if size(PrevList,1) == 1
                            NewStrSet = PrevList;
                        else
                            NewStrSet = cat(1,PrevList(1:(VarVal-1)),PrevList((VarVal+1):end));
                        end
                        set(ModList(m),'string',NewStrSet);
                        set(ModList(m),'value',1);
                        handles.Settings.VariableValues(ModNum,BoxNum) = NewStrSet(1);
                    else
                        OldPos = strmatch(StrSet,PrevList);
                        if ~isempty(OldPos)
                            OldStr = PrevList(VarVal);
                            NewStrSet = cat(1,PrevList(1:(OldPos-1)),PrevList((OldPos+1):end));
                            CorrectValue = strmatch(OldStr,NewStrSet,'exact');
                            set(ModList(m),'string',NewStrSet);
                            set(ModList(m),'value',CorrectValue);
                            handles.Settings.VariableValues(ModNum,BoxNum) = NewStrSet(CorrectValue);
                        end
                    end
                end
            end
        end
    end
end
guidata(handles.figure1,handles);

%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% VARIABLE EDIT BOXES %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%
function storevariable(ModuleNumber, VariableNumber, UserEntry, handles)
%%% This function stores a variable's value in the handles structure,
%%% when given the Module Number, the Variable Number,
%%% the UserEntry (from the Edit box), and the initial handles
%%% structure.
vn=str2double(VariableNumber);
InfoType = get(handles.VariableBox{ModuleNumber}(vn),'UserData');
StrSet = get(handles.VariableBox{ModuleNumber}(vn),'string');
% Type = get(handles.VariableBox{ModuleNumber}(vn),'Style');

if length(InfoType) >= 5 && strcmp(InfoType(end-4:end),'indep')
    PrevValue = handles.Settings.VariableValues(ModuleNumber, vn);
    ModList = findobj('UserData',InfoType(1:end-6));
    %Filter out objects that are over this one
    ModList2 = findobj('UserData',InfoType(1:end));
    ModList2 = ModList2(ModList2 ~= handles.VariableBox{ModuleNumber}(vn));
    %ModList3 = nonzeros(ModList2(strcmp(get(ModList2,'String'),PrevValue)));
    for i = 1:length(ModList2)
        Values = get(ModList2(i),'value');
        PrevStrSet = get(ModList2(i),'string');
        if Values == 0
            if strcmp(PrevStrSet,PrevValue)
                if exist('ModList3','var')
                    ModList3(end+1) = ModList2(i); %#ok Ignore MLint
                else
                    ModList3 = ModList2(i);
                end
            end
        else
            if strcmp(PrevStrSet(Values),PrevValue)
                if exist('ModList3','var')
                    ModList3(end+1) = ModList2(i); %#ok
                else
                    ModList3 = ModList2(i);
                end
            end
        end
    end
    if ischar(UserEntry)
        if size(StrSet,1) == 1
            for i = 1:length(ModList2)
                Values = get(ModList2(i),'value');
                PrevStrSet = get(ModList2(i),'string');
                if Values == 0
                    if strcmp(PrevStrSet,StrSet)
                        if exist('ModList4','var')
                            ModList4(end+1) = ModList2(i); %#ok Ignore MLint
                        else
                            ModList4 = ModList2(i);
                        end
                    end
                else
                    if strcmp(PrevStrSet(Values),StrSet)
                        if exist('ModList4','var')
                            ModList4(end+1) = ModList2(i); %#ok
                        else
                            ModList4 = ModList2(i);
                        end
                    end
                end
            end
        else
            OrigValues = get(handles.VariableBox{ModuleNumber}(vn),'value');
            for i = 1:length(ModList2)
                Values = get(ModList2(i),'value');
                PrevStrSet = get(ModList2(i),'string');
                if Values == 0
                    if strcmp(PrevStrSet,StrSet(OrigValues))
                        if exist('ModList4','var')
                            ModList4(end+1) = ModList2(i); %#ok
                        else
                            ModList4 = ModList2(i);
                        end
                    end
                else
                    if strcmp(PrevStrSet(Values),StrSet(OrigValues))
                        if exist('ModList4','var')
                            ModList4(end+1) = ModList2(i); %#ok
                        else
                            ModList4 = ModList2(i);
                        end
                    end
                end
            end
        end
    else
        for i = 1:length(ModList2)
            Values = get(ModList2(i),'value');
            PrevStrSet = get(ModList2(i),'string');
            if Values == 0
                if strcmp(PrevStrSet,StrSet(UserEntry))
                    if exist('ModList4','var')
                        ModList4(end+1) = ModList2(i); %#ok
                    else
                        ModList4 = ModList2(i);
                    end
                end
            else
                if strcmp(PrevStrSet(Values),StrSet(UserEntry))
                    if exist('ModList4','var')
                        ModList4(end+1) = ModList2(i); %#ok
                    else
                        ModList4 = ModList2(i);
                    end
                end
            end
        end
    end

    if ~exist('ModList4','var')
        ModList4 = [];
    end
    if ~exist('ModList3','var')
        ModList3 = [];
    end

    for i=1:numel(ModList)
        BoxTag = get(ModList(i),'tag');
        BoxNum = str2double(BoxTag((length(BoxTag)-1):end));
        ModNum = [];
        for m = 1:handles.Current.NumberOfModules
            if length(handles.VariableBox{m}) >= BoxNum
                if ModList(i) == handles.VariableBox{m}(BoxNum)
                    ModNum = m;
                end
            end
        end
        if isempty(ModNum)
            m = handles.Current.NumberOfModules + 1;
            if ModList(i) == handles.VariableBox{m}(BoxNum)
                ModNum = m;
            end
        end
        CurrentString = get(ModList(i),'String');
        try
            if isempty(CurrentString{1})
                CurrentString = StrSet;
                set(ModList(i),'Enable','on');
            end
        catch
            if isempty(CurrentString)
                CurrentString = StrSet;
                set(ModList(i),'Enable','on');
            end
        end
        MatchedIndice = strmatch(PrevValue,CurrentString);
        if ~isempty(MatchedIndice) && isempty(ModList3)
            if isempty(ModList4)
                if ~iscell(CurrentString)
                    set(ModList(i),'String',{UserEntry});
                else
                    if length(CurrentString) == 1
                        set(ModList(i),'String',cat(1,CurrentString,{UserEntry}));
                    else
                        if ischar(UserEntry)
                            set(ModList(i),'String',cat(1,CurrentString(1:(MatchedIndice-1)),{UserEntry},CurrentString((MatchedIndice+1):end)));
                            if isempty(get(ModList(i), 'value')),
                               set(ModList(i), 'Value', MatchedIndice);
                            end
                            VarVal = get(ModList(i),'value');
                            SetStr = get(ModList(i),'string');
                            handles.Settings.VariableValues(ModNum,BoxNum) = SetStr(VarVal);
                            clear VarVal SetStr
                        else
                            set(ModList(i),'String',cat(1,CurrentString(1:(MatchedIndice-1)),StrSet(UserEntry),CurrentString((MatchedIndice+1):end)));
                        end
                    end
                end
            else
                set(ModList(i),'String',cat(1,CurrentString(1:(MatchedIndice-1)),CurrentString((MatchedIndice+1):end)));
                if get(ModList(i),'Value')==MatchedIndice
                    set(ModList(i),'Value',1);
                    VarVals = get(ModList(i),'string');
                    if iscell(VarVals)
                        handles.Settings.VariableValues(ModNum, BoxNum) = VarVals(1);
                    else
                        handles.Settings.VariableValues(ModNum, BoxNum) = VarVals;
                    end
                else
                    OldVal = get(ModList(i),'Value');
                    if (OldVal ~= 0) && OldVal > MatchedIndice
                        set(ModList(i),'Value',(OldVal-1));
                    end
                end
            end
        elseif isempty(ModList4)
            if numel(CurrentString) == 0
                CurrentString = {UserEntry};
                set(ModList(i),'String',CurrentString);
            elseif ~iscell(CurrentString)
                CurrentString = {CurrentString};
                set(ModList(i),'String',CurrentString);
            else
                if ischar(UserEntry)
                    if size(StrSet,1) == 1
                        if ~strcmp(StrSet,'n/a') && ~strcmp(StrSet,'/')
                            CurrentString(numel(CurrentString)+1) = {StrSet};
                        end
                        set(ModList(i),'String',CurrentString);
                    else
                        OrigValues = get(handles.VariableBox{ModuleNumber}(vn),'value');
                        if ~strcmp(StrSet{OrigValues},'n/a') && ~strcmp(StrSet{OrigValues},'/')
                            CurrentString(numel(CurrentString)+1) = {StrSet{OrigValues}};
                        end
                        set(ModList(i),'String',CurrentString);
                    end
                else
                    if ~strcmp(StrSet(UserEntry),'n/a') && ~strcmp(StrSet(UserEntry),'/')
                        CurrentString(numel(CurrentString)+1) = StrSet(UserEntry);
                    end
                    set(ModList(i),'String',CurrentString);
                end
            end
        end
    end
end

if strcmp(get(handles.VariableBox{ModuleNumber}(vn),'style'),'edit')
    handles.Settings.VariableValues(ModuleNumber, vn) = {UserEntry};
else
    if ischar(UserEntry)
        handles.Settings.VariableValues(ModuleNumber, vn) = {UserEntry};
    else
        handles.Settings.VariableValues(ModuleNumber, vn) = StrSet(UserEntry);
    end
end
%%% After the value is stored, we might redo subsequent if they are
%%% one of the dependent types.
if handles.Settings.NumbersOfVariables(ModuleNumber) >= vn+2
    for i=1:2
        switch get(handles.VariableBox{ModuleNumber}(vn+i),'UserData')
            case 'category'
                if i==1
                    handles = updateCategoryPopupmenu(handles, ModuleNumber, vn+i);
                end
            case 'measurement'
                handles = updateMeasurementPopupmenu(handles, ModuleNumber, vn+i);
        end
    end
end

guidata(handles.figure1, handles);

%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% updateCategoryPopupmenu - update a category popupmenu after its object
%%%                           has changed
%%%%%%%%%%%%%%%%%%%%%%%%%%%

function handles = updateCategoryPopupmenu(handles, ModuleNumber, lastVariableNumber)
    ObjectOrImageName = handles.Settings.VariableValues(ModuleNumber, lastVariableNumber-1);
    ObjectOrImageName = ObjectOrImageName{1};
    categories = CPgetpriorcategories(handles, ModuleNumber, ObjectOrImageName);
    [handles,StrSet] = getStrSet(handles,categories,ModuleNumber,lastVariableNumber,[]);
    updatePopup(handles,ModuleNumber,lastVariableNumber,StrSet);
    if handles.Settings.NumbersOfVariables(ModuleNumber) < lastVariableNumber &&...
        strcmp(get(handles.Settings.VariableBox{ModuleNumber}(lastVariableNumber+1),'UserData'),'measurement')
        handles = updateMeasurementPopupmenu(handles, ModuleNumber,lastVariableNumber+1);
    end
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% updateMeasurementPopupmenu - update a category popupmenu after its object
%%%                              has changed
%%%%%%%%%%%%%%%%%%%%%%%%%%%

function handles = updateMeasurementPopupmenu(handles, ModuleNumber, lastVariableNumber)
    ObjectOrImageName = handles.Settings.VariableValues(ModuleNumber, lastVariableNumber-2);
    ObjectOrImageName = ObjectOrImageName{1};
    Category = handles.Settings.VariableValues(ModuleNumber, lastVariableNumber-1);
    measurements = CPgetpriormeasurements(handles, ModuleNumber, ObjectOrImageName,Category);
    [handles,StrSet] = getStrSet(handles,measurements,ModuleNumber,lastVariableNumber,[]);
    updatePopup(handles,ModuleNumber,lastVariableNumber,StrSet);
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% updatePopup - update a popup menu, trying to keep the value stable
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function updatePopup(handles,ModuleNumber,lastVariableNumber,StrSet)
    idx = find(strcmp(handles.Settings.VariableValues(ModuleNumber, lastVariableNumber),StrSet));
    hVariable=handles.VariableBox{ModuleNumber}(lastVariableNumber);
    set(hVariable,'Value',1); % For stability, set the value to 1 in case the set shrinks
    set(handles.VariableBox{ModuleNumber}(lastVariableNumber),'String',StrSet);
    if ~ isempty(idx)
        set(hVariable,'Value',idx);
    end
    
function [ModuleNumber] = whichactive(handles)
ModuleHighlighted = get(handles.ModulePipelineListBox,'Value');
ModuleNumber = ModuleHighlighted(1);

function VariableBox_CreateFcn(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.

function VariableBox_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
%%% Fetches the contents of the edit box, determines which module
%%% we are dealing with at the moment (by running the "whichactive"
%%% subfunction), and calls the storevariable function.
VariableName = get(hObject,'tag');
VariableNumberStr = VariableName(12:13);
ModuleNumber = whichactive(handles);
InputType = get(hObject,'style');

if strcmp(InputType, 'edit')
    UserEntry = get(hObject,'string');
elseif strcmp(InputType, 'popupmenu')
    UserEntry = get(hObject,'value');
    ChoiceList = get(hObject,'string');
    if strcmp('Other..', ChoiceList{UserEntry})
        CustomInput = CPinputdlg('Enter your custom input: ');
        if isempty(CustomInput) | isempty(CustomInput{1}) %#ok
            set(hObject,'value',1);
        else
            ChoiceList(numel(ChoiceList)) = CustomInput;
            ChoiceList(numel(ChoiceList)+1) = {'Other..'};
            set(hObject,'string',ChoiceList);
        end
    end
end

if isempty(UserEntry)
    CPerrordlg('Variable boxes must not be left blank');
    set(handles.VariableBox{ModuleNumber}(str2double(VariableNumberStr)),'string','Fill in');
    storevariable(ModuleNumber,VariableNumberStr, 'Fill in',handles);
else
    if ModuleNumber == 0,
        CPerrordlg('Something strange is going on: none of the analysis modules are active right now but somehow you were able to edit a setting.','weirdness has occurred');
    else
        storevariable(ModuleNumber,VariableNumberStr,UserEntry, handles);
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% VARIABLE WINDOW SLIDER %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on slider movement.
function slider1_Callback(hObject, eventdata, handles) %#ok Ignore MLint
% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range
%        of slider
scrollPos = get(hObject, 'Value');
variablepanelPos = get(handles.variablepanel, 'position');
ModuleHighlighted = get(handles.ModulePipelineListBox,'Value');
ModuleNumber = ModuleHighlighted(1);

if isempty(handles.Settings.NumbersOfVariables)
    set(handles.slider1,'visible','off');
    guidata(handles.figure1,handles);
    return
end
% Note:  The yPosition is 0 + scrollPos because 0 is the original Y
% Position of the variablePanel.  If the original location of the
% variablePanel gets changed, then the constant offset must be changed as
% well.
MatlabVersion = version;
MatlabVersion = str2double(MatlabVersion(1:3));
if ispc || (MatlabVersion >= 7.1)
    Ypos = get(handles.slider1,'max') - get(handles.slider1,'Value');
    set(handles.variablepanel, 'position', [variablepanelPos(1) Ypos variablepanelPos(3) variablepanelPos(4)]);
    for i=1:handles.Settings.NumbersOfVariables(ModuleNumber)
        tempPos=get(handles.VariableDescription{ModuleNumber}(i),'Position');
        if(tempPos(2)+Ypos)>-20
            set(handles.VariableDescription{ModuleNumber}(i),'visible','on');
            VarDesOn=1;
        else
            set(handles.VariableDescription{ModuleNumber}(i),'visible','off');
            VarDesOn=0;
        end
        tempPos=get(handles.VariableBox{ModuleNumber}(i),'Position');
        if ((tempPos(2)+Ypos)>-20) && VarDesOn  && (size(get(handles.VariableBox{ModuleNumber}(i),'String'),1)~=1 || ~strcmp(get(handles.VariableBox{ModuleNumber}(i),'String'),'n/a'))
            set(handles.VariableBox{ModuleNumber}(i),'visible','on');
        else
            set(handles.VariableBox{ModuleNumber}(i),'visible','off');
        end
        try
            tempPos=get(handles.BrowseButton{ModuleNumber}(i),'Position');
            if ((tempPos(2)+Ypos)>-20) && VarDesOn
                set(handles.BrowseButton{ModuleNumber}(i),'visible','on');
            else
                set(handles.BrowseButton{ModuleNumber}(i),'visible','off');
            end
        end
    end
    guidata(handles.figure1,handles);
else
    set(handles.variablepanel, 'position', [variablepanelPos(1) 0+scrollPos variablepanelPos(3) variablepanelPos(4)]);
    for i=1:handles.Settings.NumbersOfVariables(ModuleNumber)
        tempPos=get(handles.VariableDescription{ModuleNumber}(i),'Position');
        if(tempPos(2)+scrollPos)>-20
            set(handles.VariableDescription{ModuleNumber}(i),'visible','on');
            VarDesOn=1;
        else
            set(handles.VariableDescription{ModuleNumber}(i),'visible','off');
            VarDesOn=0;
        end
        tempPos=get(handles.VariableBox{ModuleNumber}(i),'Position');
        if ((tempPos(2)+scrollPos)>-20) && VarDesOn  && (size(get(handles.VariableBox{ModuleNumber}(i),'String'),1)~=1 || ~strcmp(get(handles.VariableBox{ModuleNumber}(i),'String'),'n/a'))
            set(handles.VariableBox{ModuleNumber}(i),'visible','on');
        else
            set(handles.VariableBox{ModuleNumber}(i),'visible','off');
        end
        try
            tempPos=get(handles.BrowseButton{ModuleNumber}(i),'Position');
            if ((tempPos(2)+scrollPos)>-20) && VarDesOn
                set(handles.BrowseButton{ModuleNumber}(i),'visible','on');
            else
                set(handles.BrowseButton{ModuleNumber}(i),'visible','off');
            end
        end
    end
    guidata(handles.figure1,handles);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% PIXEL SIZE EDIT BOX %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%

function PixelSizeEditBox_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
%%% Checks to see whether the user input is a number, and generates an
%%% error message if it is not a number.
user_entry = str2double(get(hObject,'string'));
if isnan(user_entry)
    CPerrordlg('You must enter a numeric value','Bad Input','modal');
    set(hObject,'string','0.25')
    %%% Checks to see whether the user input is positive, and generates an
    %%% error message if it is not.
elseif user_entry<=0
    CPerrordlg('You entered a value less than or equal to zero','Bad Input','modal');
    set(hObject,'string', '0.25')
else
    %%% Gets the user entry and stores it in the handles structure.
    UserEntry = get(handles.PixelSizeEditBox,'string');
    handles.Settings.PixelSize = UserEntry;
    handles.Preferences.PixelSize = UserEntry;
    guidata(gcbo, handles);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SET PREFERENCES BUTTON %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function SaveButton_Callback (hObject, eventdata, handles)  %#ok Ignore MLint

Answer = CPquestdlg('Do you want to save these as the default preferences? If not, you will be asked to name your preferences file, which can be loaded by File -> Load Preferences.','Save as default?','Yes','No','Yes');
if strcmp(Answer, 'No')
    [FileName,Pathname] = CPuiputfile('*.mat', 'Save Preferences As...',matlabroot);
    if isequal(FileName,0) || isequal(Pathname,0)
        Pathname = matlabroot;
        FileName = 'CellProfilerPreferences.mat';
        FullFileName = fullfile(Pathname,FileName);
        DefaultVal = 1;
        CPwarndlg('Since you did not specify a file name, the file was saved as CellProfilerPreferences.mat in the matlab root folder.');
    else
        FullFileName = fullfile(Pathname,FileName);
        DefaultVal = 0;
    end
else
    if isdeployed
        pathstr = ctfroot;  % No trailing slash
        % Since the CTF is extracted in the CellProfiler directory, we want the
        % startup dir to be one level up
        filesepidx = findstr(pathstr,filesep);
        if length(filesepidx) > 1,
            pathstr = pathstr(1:filesepidx(end)-1);
        end
        FullFileName = fullfile(pathstr,'CellProfilerPreferences.mat');
        DefaultVal = 1;
    else
        FullFileName = fullfile(matlabroot,'CellProfilerPreferences.mat');
        DefaultVal = 1;
    end
end

SetPreferencesWindowHandle = findobj('name','SetPreferences');
global EnteredPreferences
PixelSizeEditBoxHandle = findobj('Tag','PixelSizeEditBox');
FontSizeEditBoxHandle = findobj('Tag','FontSizeEditBox');
ImageDirEditBoxHandle = findobj('Tag','ImageDirEditBox');
OutputDirEditBoxHandle = findobj('Tag','OutputDirEditBox');
ModuleDirEditBoxHandle = findobj('Tag','ModuleDirEditBox');
IntensityColorMapHandle = findobj('Tag','IntensityColorMapEditBox');
StripPipelineCheckboxHandle = findobj('Tag','StripPipelineCheckbox');
SkipErrorsCheckboxHandle = findobj('Tag','SkipErrorCheckbox');
LabelColorMapHandle = findobj('Tag','LabelColorMapEditBox');
SelectDisplayModeHandle = findobj('Tag','SelectDisplay');
PixelSize = get(PixelSizeEditBoxHandle,'string');
PixelSize = PixelSize{1};
FontSize = get(FontSizeEditBoxHandle,'string');
DefaultImageDirectory = get(ImageDirEditBoxHandle,'string');
DefaultOutputDirectory = get(OutputDirEditBoxHandle,'string');
DefaultModuleDirectory = get(ModuleDirEditBoxHandle,'string');
IntensityColorMap = get(IntensityColorMapHandle,'string');
LabelColorMap = get(LabelColorMapHandle,'string');
DisplayModeValue = get(SelectDisplayModeHandle,'value');
if get(StripPipelineCheckboxHandle,'Value') == get(StripPipelineCheckboxHandle,'Max')
    StripPipeline = 'Yes';
else
    StripPipeline = 'No';
end
if get(SkipErrorsCheckboxHandle,'Value') == get(SkipErrorsCheckboxHandle,'Max')
    SkipErrors = 'Yes';
else
    SkipErrors = 'No';
end

EnteredPreferences.PixelSize = PixelSize;
EnteredPreferences.FontSize = FontSize;
EnteredPreferences.DefaultImageDirectory = DefaultImageDirectory;
EnteredPreferences.DefaultOutputDirectory = DefaultOutputDirectory;
EnteredPreferences.DefaultModuleDirectory = DefaultModuleDirectory;
EnteredPreferences.IntensityColorMap = IntensityColorMap;
EnteredPreferences.LabelColorMap = LabelColorMap;
EnteredPreferences.StripPipeline = StripPipeline;
EnteredPreferences.SkipErrors = SkipErrors;
EnteredPreferences.DisplayModeValue = DisplayModeValue;
SavedPreferences = EnteredPreferences; %#ok ignore MLint
CurrentDir = pwd;
try
    save(FullFileName,'SavedPreferences')
    clear SavedPreferences
    if DefaultVal == 1;
        CPhelpdlg(['Your CellProfiler preferences were successfully set.  They are contained in a file called CellProfilerPreferences.mat in the directory ', fileparts(FullFileName)])
    else
        CPhelpdlg('Your CellProfiler preferences were successfully set.')
    end
catch
    try
        save(fullfile(CurrentDir,FileName),'SavedPreferences')
        clear SavedPreferences
        CPhelpdlg('You do not have permission to write anything to the Matlab root directory.  Instead, your default preferences will only function properly when you start CellProfiler from the current directory.')
    catch
        CPhelpdlg('CellProfiler was unable to save your desired preferences, probably because you lack write permission for both the Matlab root directory as well as the current directory.  Your preferences will only be saved for the current session of CellProfiler.');
    end
end
clear PixelSize* *Dir* , close(SetPreferencesWindowHandle);
clear SetPreferencesWindowHandle FontSize FontSizeEditBoxHandle;

function SetPreferences_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
%%% Creates a global variable to be used later.
clear global EnteredPreferences
global EnteredPreferences

%%% Opens a dialog box to retrieve input from the user.
%%% Sets the functions of the buttons and edit boxes in the dialog box.

ImageDirBrowseButtonCallback = 'EditBoxHandle = findobj(''Tag'',''ImageDirEditBox''); CurrentChoice = get(EditBoxHandle,''string''); if exist(CurrentChoice, ''dir''), tempdir = CurrentChoice; else, tempdir=pwd; end, DefaultImageDirectory = CPuigetdir(tempdir,''Select the default image directory''); pause(.1);figure(findobj(''Tag'',''figure1''));figure(findobj(''Tag'',''SetPreferenceWindow''));if DefaultImageDirectory == 0, else set(EditBoxHandle,''string'', DefaultImageDirectory), end, clear EditBoxHandle CurrentChoice tempdir DefaultImageDirectory';
ImageDirEditBoxCallback = 'DefaultImageDirectory = get(gco,''string''); if(~isdir(DefaultImageDirectory)); warndlg(''That is not a valid directory'');end;if isempty(DefaultImageDirectory); DefaultImageDirectory = pwd; set(gco,''string'',DefaultImageDirectory); end, clear';
OutputDirBrowseButtonCallback = 'EditBoxHandle = findobj(''Tag'',''OutputDirEditBox''); CurrentChoice = get(EditBoxHandle,''string''); if exist(CurrentChoice, ''dir''), tempdir=CurrentChoice; else, tempdir=pwd; end, DefaultOutputDirectory = CPuigetdir(tempdir,''Select the default output directory''); pause(.1);figure(findobj(''Tag'',''figure1''));figure(findobj(''Tag'',''SetPreferenceWindow''));if DefaultOutputDirectory == 0, else set(EditBoxHandle,''string'', DefaultOutputDirectory), end, clear EditBoxHandle CurrentChoice tempdir DefaultOutputDirectory';
OutputDirEditBoxCallback = 'DefaultOutputDirectory = get(gco,''string''); if(~isdir(DefaultOutputDirectory)); warndlg(''That is not a valid directory'');end;if isempty(DefaultOutputDirectory) == 1; DefaultOutputDirectory = pwd; set(gco,''string'',DefaultOutputDirectory), end, clear';
ModuleDirBrowseButtonCallback = 'EditBoxHandle = findobj(''Tag'',''ModuleDirEditBox''); CurrentChoice = get(EditBoxHandle,''string''); if exist(CurrentChoice, ''dir''), tempdir=CurrentChoice; else tempdir=pwd; end, DefaultModuleDirectory = CPuigetdir(tempdir,''Select the directory where modules are stored''); pause(.1);figure(findobj(''Tag'',''figure1''));figure(findobj(''Tag'',''SetPreferenceWindow''));if DefaultModuleDirectory == 0, else set(EditBoxHandle,''string'', DefaultModuleDirectory), end, clear EditBoxHandle CurrentChoice tempdir DefaultModuleDirectory';
ModuleDirEditBoxCallback = 'DefaultModuleDirectory = get(gco,''string''); if(~isdir(DefaultModuleDirectory)); warndlg(''That is not a valid directory'');end;if isempty(DefaultModuleDirectory) == 1; DefaultModuleDirectory = pwd; set(gco,''string'',DefaultModuleDirectory), end, clear';

CancelButtonCallback = 'delete(gcf)';

%%% Creates the dialog box and its text, buttons, and edit boxes.
MainWinPos = get(handles.figure1,'Position');
Color = [0.7 0.7 0.9];

%%% Label we attach to figures (as UserData) so we know they are ours
userData.Application = 'CellProfiler';
userData.MyHandles=handles;
SetPreferencesWindowHandle = figure(...
    'Units','pixels',...
    'Color',Color,...
    'DockControls','off',...
    'MenuBar','none',...
    'Name','SetPreferences',...
    'NumberTitle','off',...
    'Position',[MainWinPos(1)+MainWinPos(3)/10 MainWinPos(2) MainWinPos(3)*(4/5) MainWinPos(4)+50],...
    'Resize','off',...
    'HandleVisibility','on',...
    'Tag','SetPreferenceWindow',...
    'UserData',userData);

Option = [];

for i = 1:length(handles.Current.HelpFilenames),
    if strfind(handles.Current.HelpFilenames{i},'HelpPreferences')
        Option = i;
    end
end
if ~isempty(Option)
    StringForInfoText = handles.Current.Help{Option-1};
else
    StringForInfoText = 'See Help > General Help > Help Preferences for more information';
end

InfoText = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Position',[0.025 0.63 0.95 0.35],...
    'String',StringForInfoText,...
    'Style','text'); %#ok Ignore MLint

IntensityColorMapText = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Position',[.2 .7 .6 .04],...
    'String','Enter the default colormap for intensity images',...
    'Style','text'); %#ok Ignore MLint

IntensityColorMapEditBox = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',[1 1 1],...
    'Callback','cmap=get(gcbo,''String''); try, colormap(cmap);catch, warndlg(''That is not a valid entry'');end;clear cmap',...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[0.7 0.7 0.1 0.04],...
    'String',handles.Preferences.IntensityColorMap,...
    'Style','edit',...
    'Tag','IntensityColorMapEditBox'); %#ok Ignore MLint

LabelColorMapText = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Position',[.2 .65 .6 .04],...
    'String','Enter the default colormap for objects',...
    'Style','text'); %#ok Ignore MLint

LabelColorMapEditBox = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',[1 1 1],...
    'Callback','cmap=get(gcbo,''String''); try, colormap(cmap);catch, warndlg(''That is not a valid entry'');end;clear cmap',...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[0.7 0.65 0.1 0.04],...
    'String',handles.Preferences.LabelColorMap,...
    'Style','edit',...
    'Tag','LabelColorMapEditBox'); %#ok Ignore MLint

ColorMapHelp = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'Callback','handles = guidata(findobj(''tag'',''figure1''));for i = 1:length(handles.Current.HelpFilenames), if strfind(handles.Current.HelpFilenames{i},''HelpColormaps''), Option = i;end,end,if ~isempty(Option),CPtextdisplaybox(handles.Current.Help{Option-1},''Colormaps Help'');end;clear ans handles Option i;',...
    'FontWeight','bold',...
    'Position',[0.18 0.71 0.02 0.04],...
    'String','?',...
    'Tag','ColorMapHelp',...
    'Behavior',get(0,'defaultuicontrolBehavior')); %#ok Ignore MLint

PixelSizeHelp = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'Callback','handles = guidata(findobj(''tag'',''figure1''));for i = 1:length(handles.Current.HelpFilenames), if strfind(handles.Current.HelpFilenames{i},''HelpPixelSize''), Option = i;end,end,if ~isempty(Option),CPtextdisplaybox(handles.Current.Help{Option-1},''Pixel Size Help'');end;clear ans handles Option i;',...
    'FontWeight','bold',...
    'Position',[0.18 0.61 0.02 0.04],...
    'String','?',...
    'Tag','PixelSizeHelp',...
    'Behavior',get(0,'defaultuicontrolBehavior')); %#ok Ignore MLint

PixelSizeText = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Position',[0.2 0.6 0.6 0.04],...
    'String','Enter the default pixel size (in micrometers)',...
    'Style','text'); %#ok Ignore MLint

PixelSizeEditBox = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',[1 1 1],...
    'Callback','val=str2double(get(gcbo,''String'')); if(isnan(val)||(val<=0)); warndlg(''That is not a valid entry'');end;clear val',...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[0.7 0.6 0.1 0.04],...
    'String',handles.Preferences.PixelSize,...
    'Style','edit',...
    'Tag','PixelSizeEditBox'); %#ok Ignore MLint

FontSizeText = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Position',[0.2 0.55 0.6 0.04],...
    'String','Enter the default font size',...
    'Style','text'); %#ok Ignore MLint

FontSizeEditBox = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',[1 1 1],...
    'Callback','val=str2double(get(gcbo,''String'')); if(isnan(val)||(val<=5)||(val>=18)); warndlg(''That is not a valid entry'');end;clear val',...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[0.7 0.55 0.1 0.04],...
    'String',num2str(round(handles.Preferences.FontSize)),...
    'Style','edit',...
    'Tag','FontSizeEditBox'); %#ok Ignore MLint

FastModeText = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Position',[0.2 0.5 0.6 0.04],...
    'String','Run in fast mode:',...
    'Style','text'); %#ok Ignore MLint

FastModeHelp = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'Callback','handles = guidata(findobj(''tag'',''figure1''));for i = 1:length(handles.Current.HelpFilenames), if strfind(handles.Current.HelpFilenames{i},''HelpFastMode''), Option = i;end,end,if ~isempty(Option),CPtextdisplaybox(handles.Current.Help{Option-1},''Fast Mode Help'');end;clear ans handles Option i;',...
    'FontWeight','bold',...
    'Position',[0.18 0.51 0.02 0.04],...
    'String','?',...
    'Tag','FastModeHelp',...
    'Behavior',get(0,'defaultuicontrolBehavior')); %#ok Ignore MLint

FastModeCheckbox = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'Min',0,...
    'Max',1,...
    'Position',[.7 .5 .04 .04],...
    'Style','checkbox',...
    'Tag','StripPipelineCheckbox',...
    'Value',strcmp(handles.Preferences.StripPipeline,'Yes')); %#ok Ignore MLint

SkipErrorText = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Position',[0.2 0.45 0.6 0.04],...
    'String','Skip modules which fail:',...
    'Style','text'); %#ok Ignore MLint

SkipErrorHelp = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'Callback','handles = guidata(findobj(''tag'',''figure1''));for i = 1:length(handles.Current.HelpFilenames), if strfind(handles.Current.HelpFilenames{i},''HelpSkipErrors''), Option = i;end,end,if ~isempty(Option),CPtextdisplaybox(handles.Current.Help{Option-1},''Skip Errors Help'');end;clear ans handles Option i;',...
    'FontWeight','bold',...
    'Position',[0.18 0.46 0.02 0.04],...
    'String','?',...
    'Tag','SkipErrorHelp',...
    'Behavior',get(0,'defaultuicontrolBehavior')); %#ok Ignore MLint

SkipErrorCheckbox = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'Min',0,...
    'Max',1,...
    'Position',[.7 .45 .04 .04],...
    'Style','checkbox',...
    'Tag','SkipErrorCheckbox',...
    'Value',strcmp(handles.Preferences.SkipErrors,'Yes')); %#ok Ignore MLint

SelectDisplayModeText = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Position',[0.2 0.4 0.6 0.04],...
    'String','Display Mode:',...
    'Style','text'); %#ok Ignore MLint

SelectDisplayMode = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Style', 'popupmenu',...
    'BackgroundColor',[1 1 1],...
    'String',{'Display all windows', 'Do not display any windows', 'Specify windows to display'},...
    'Units','normalized',...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[0.5 0.4 0.4 0.05],...
    'Tag','SelectDisplay',...
    'value',handles.Preferences.DisplayModeValue); %#ok Ignore MLint

ImageDirTextBox = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Position',[0.025 0.35 0.6 0.04],...
    'String','Select the default image folder:',...
    'Style','text'); %#ok Ignore MLint

ImageDirBrowseButton = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'Callback',ImageDirBrowseButtonCallback,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[0.85 0.31 0.12 0.05],...
    'String','Browse...',...
    'Tag','ImageDirBrowseButton',...
    'BackgroundColor',Color); %#ok Ignore MLint

ImageDirEditBox = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',[1 1 1],...
    'Callback',ImageDirEditBoxCallback,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[0.025 0.31 0.8 0.05],...
    'String',handles.Preferences.DefaultImageDirectory,...
    'Style','edit',...
    'Tag','ImageDirEditBox'); %#ok Ignore MLint

OutputDirTextBox = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Position',[0.025 0.25 0.6 0.04],...
    'String','Select the default output folder:',...
    'Style','text'); %#ok Ignore MLint

OutputDirBrowseButton = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'Callback',OutputDirBrowseButtonCallback,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[0.85 0.21 0.12 0.05],...
    'String','Browse...',...
    'Tag','OutputDirBrowseButton',...
    'BackgroundColor',Color); %#ok Ignore MLint

OutputDirEditBox = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',[1 1 1],...
    'Callback',OutputDirEditBoxCallback,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[0.025 0.21 0.8 0.05],...
    'String',handles.Preferences.DefaultOutputDirectory,...
    'Style','edit',...
    'Tag','OutputDirEditBox'); %#ok Ignore MLint

ModuleDirTextBox = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',Color,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Position',[0.025 0.15 0.6 0.04],...
    'String','Select the folder where CellProfiler modules are stored:',...
    'Style','text'); %#ok Ignore MLint

ModuleDirBrowseButton = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'Callback',ModuleDirBrowseButtonCallback,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[0.85 0.11 0.12 0.05],...
    'String','Browse...',...
    'Tag','ModuleDirBrowseButton',...
    'BackgroundColor',Color); %#ok Ignore MLint

ModuleDirEditBox = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'BackgroundColor',[1 1 1],...
    'Callback',ModuleDirEditBoxCallback,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[0.025 0.11 0.8 0.05],...
    'String',handles.Preferences.DefaultModuleDirectory,...
    'Style','edit',...
    'Tag','ModuleDirEditBox'); %#ok Ignore MLint

SaveButton = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'Callback','CellProfiler(''SaveButton_Callback'',gcbo,[],guidata(gcbo))',...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[0.2 0.02 0.2 0.06],...
    'String','Save preferences',...
    'Tag','SaveButton',...
    'BackgroundColor',Color); %#ok Ignore MLint

CancelButton = uicontrol(...
    'Parent',SetPreferencesWindowHandle,...
    'Units','normalized',...
    'Callback',CancelButtonCallback,...
    'FontName','Helvetica',...
    'FontSize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[0.6 0.02 0.2 0.06],...
    'String','Cancel',...
    'Tag','CancelButton',...
    'BackgroundColor',Color); %#ok Ignore MLint

%%% Waits for the user to respond to the window.
uiwait(SetPreferencesWindowHandle)
%%% Allows canceling by checking whether EnteredPreferences exists.
LoadPreferences_Helper(hObject,eventdata,handles,EnteredPreferences);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% TECHNICAL DIAGNOSIS BUTTON %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function TechnicalDiagnosis_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
%%% This pauses execution and allows the user to type things in at the
%%% matlab prompt.  You can check the current variables and they will show
%%% up in the workspace.

CPmsgbox('Type ''return'' in the MATLAB prompt (where the K>> is) to stop diagnosis mode');
display('Type ''return'' in the MATLAB prompt (where the K>> is) to stop diagnosis mode');
%%% TYPE "return" TO STOP.
keyboard;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% BROWSE DEFAULT IMAGE DIRECTORY BUTTON %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in BrowseImageDirectoryButton.
function BrowseImageDirectoryButton_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
%%% Opens a dialog box to allow the user to choose a directory and loads
%%% that directory name into the edit box.  Also, changes the current
%%% directory to the chosen directory.
% if exist(handles.Current.DefaultImageDirectory, 'dir')
%     pathname = CPuigetdir(handles.Current.DefaultImageDirectory,'Choose the directory of images to be analyzed');
%     pause(.1);
%     figure(handles.figure1);
% else
%     pathname = CPuigetdir('','Choose the directory of images to be analyzed');
%     pause(.1);
%     figure(handles.figure1);
% end
%%% The if/else statement is removed because if the directory doesn't
%%% exist, matlab automatically recovers (see CPuigetdir for details).
%%% By contrast, using CPuigetdir with the starting path '' (empty
%%% string) failed on the mac platform, even though it's not supposed
%%% to.
pathname = CPuigetdir(handles.Current.DefaultImageDirectory,'Choose the directory of images to be analyzed');
pause(.1);
figure(handles.figure1);

%%% If the user presses "Cancel", the pathname will = 0 and nothing will
%%% happen.
if pathname == 0
else
    %%% Saves the pathname in the handles structure.
    handles.Current.DefaultImageDirectory = pathname;
    %%% Displays the chosen directory in the DefaultImageDirectoryEditBox.
    set(handles.DefaultImageDirectoryEditBox,'String',pathname);
    guidata(hObject,handles)
    %%% Retrieves the list of image file names from the chosen directory,
    %%% stores them in the handles structure, and displays them in the
    %%% filenameslistbox, by faking a click in the DefaultImageDirectoryEditBox.
    handles = DefaultImageDirectoryEditBox_Callback(hObject, eventdata, handles);
    guidata(hObject, handles);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% DEFAULT IMAGE DIRECTORY EDIT BOX %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function handles = DefaultImageDirectoryEditBox_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
%%% Retrieves the text that was typed in.
pathname = get(handles.DefaultImageDirectoryEditBox,'string');
%%% Checks whether a directory with that name exists.
if exist(pathname,'dir')
    %%% Saves the pathname in the handles structure.
    handles.Current.DefaultImageDirectory = pathname;
    guidata(hObject,handles)
    %%% Retrieves the list of image file names from the chosen directory and
    %%% stores them in the handles structure, using the function
    %%% RetrieveImageFileNames.
    [handles,FileNames] = CPretrievemediafilenames(handles, pathname,'','No','Exact','Both');
    handles.Current.FilenamesInImageDir = FileNames;
%%% We decided that the following is annoying to have pop up all the time. It is
%%% sufficient for the listbox displaying the files in the default image
%%% folder to say 'No image files recognized' (see below).
%    %%% Test whether this is during CellProfiler launching or during
%    %%% the image analysis run itself (by looking at some of the GUI
%    %%% elements). If either is the case, the message is NOT
%    %%% shown.
%     ListBoxContents = get(handles.FilenamesListBox,'String');
%     IsStartup = strcmp(ListBoxContents(1),'Listbox');
%     IsAnalysisRun = strcmp(get(handles.AnalyzeImagesButton,'enable'),'off');
%     if any([IsStartup, IsAnalysisRun]) == 0 && isempty(handles.Current.FilenamesInImageDir) == 1;
%         CPmsgbox('Please note: there are no recognizable files in the default image folder.','Default Image Folder');
%     end
%    guidata(hObject, handles);
    %%% If the directory entered in the box does not exist, give an error
    %%% message, change the contents of the edit box back to the
    %%% previously selected directory, and change the contents of the
    %%% filenameslistbox back to the previously selected directory.
else
    Question = ['The directory ''' pathname ''' does not exist.  Would you like to create it?'];
    Answer = CPquestdlg(Question,'Missing directory','Yes','No','Yes');
    if strcmp(Answer, 'Yes'),
        [status, message] = mkdir(pathname);
        if status 
            handles.Current.DefaultImageDirectory = pathname;
            [handles,FileNames] = CPretrievemediafilenames(handles, pathname,'','No','Exact','Both');
            handles.Current.FilenamesInImageDir = FileNames;
        else
            CPerrordlg(['Unable to create directory ''' pathname '''.  (' message ')']);
        end
    end
end
%%% Whether or not the directory exists and was updated, we want to
%%% update the GUI display to show the currently stored information.
%%% Display the path in the edit box.
set(handles.DefaultImageDirectoryEditBox,'String',handles.Current.DefaultImageDirectory);
if isempty(handles.Current.FilenamesInImageDir)
    set(handles.FilenamesListBox,'String','No image files recognized',...
        'Value',1)
else
    %%% Loads these image names into the FilenamesListBox.
    set(handles.FilenamesListBox,'String',handles.Current.FilenamesInImageDir,...
        'Value',1)
end
%%% Updates the handles structure.
guidata(hObject,handles)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% BROWSE DEFAULT OUTPUT DIRECTORY BUTTON %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in BrowseOutputDirectoryButton.
function BrowseOutputDirectoryButton_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.

%%% Opens a dialog box to allow the user to choose a directory and loads
%%% that directory name into the edit box.  Also, changes the current
%%% directory to the chosen directory.
pathname = CPuigetdir(handles.Current.DefaultOutputDirectory,'Choose the default output directory');
pause(.1);
figure(handles.figure1);
%%% If the user presses "Cancel", the pathname will = 0 and nothing will
%%% happen.
if pathname == 0
else
    %%% Saves the pathname in the handles structure.
    handles.Current.DefaultOutputDirectory = pathname;
    %%% Displays the chosen directory in the DefaultImageDirectoryEditBox.
    set(handles.DefaultOutputDirectoryEditBox,'String',pathname);
    guidata(hObject,handles)
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% DEFAULT OUTPUT DIRECTORY EDIT BOX %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function DefaultOutputDirectoryEditBox_Callback(hObject, eventdata, handles) %#ok Ignore MLint
%%% Retrieves the text that was typed in.
pathname = get(handles.DefaultOutputDirectoryEditBox,'string');
%%% Checks whether a directory with that name exists.
if exist(pathname,'dir') ~= 0
    %%% Saves the pathname in the handles structure.
    handles.Current.DefaultOutputDirectory = pathname;
    %%% If the directory entered in the box does not exist, give an error
    %%% message, change the contents of the edit box back to the
    %%% previously selected directory, and change the contents of the
    %%% filenameslistbox back to the previously selected directory.
else
    Question = ['The directory ''' pathname ''' does not exist.  Would you like to create it?'];
    Answer = CPquestdlg(Question,'Missing directory','Yes','No','Yes');
    if strcmp(Answer, 'Yes'),
        [status, message] = mkdir(pathname);
        if status 
            handles.Current.DefaultOutputDirectory = pathname;
        else
            CPerrordlg(['Unable to create directory ''' pathname '''.  (' message ')']);
        end
    end
end
%%% Whether or not the directory exists and was updated, we want to
%%% update the GUI display to show the currrently stored information.
%%% Display the path in the edit box.
set(handles.DefaultOutputDirectoryEditBox,'String',handles.Current.DefaultOutputDirectory);
%%% Updates the handles structure.
guidata(hObject,handles)

%%%%%%%%%%%%%%%%%%%%%%
%%% IMAGE LIST BOX %%%
%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on selection change in FilenamesListBox.
function FilenamesListBox_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.

if strcmp(get(gcf,'SelectionType'),'open')
    Val = get(handles.FilenamesListBox,'value');
    String = get(handles.FilenamesListBox,'string');
    %%% Check if there are images
    if strcmpi(String,'No image files recognized')
        return
    end
    FileName = char(String(Val));
    PathName = get(handles.DefaultImageDirectoryEditBox,'string');
    if (~isdir(PathName))
        CPerrordlg('The selected directory could not be found. Please make sure the directory exists.');
        return
    end 
    if strcmpi(FileName(end-3:end),'.mat')
        test = load(fullfile(PathName,FileName));
        if isfield(test,'Settings') || isfield(test,'handles')
            Answer = CPquestdlg('Would you like to load the pipeline from this file?','Confirm','Yes','No','Yes');
            if strcmp(Answer,'Yes')
                eventdata.SettingsPathname = PathName;
                eventdata.SettingsFileName = FileName;
                LoadPipeline_Callback(hObject,eventdata,handles);
            end
        elseif isfield(test,'Image')
            try
                %%% Reads the image.
                Image = CPimread(fullfile(PathName, FileName));
                hFig = CPfigure(handles,'image','name',FileName);
                [hImage,hAx] = CPimagesc(Image,handles,hFig);
                colormap(hAx,gray); % is this needed/correct? CPfigure sets the default intensity colormap. CPimagesc does too. What if it's a label image?
                title(FileName,'Parent',hAx);
            catch CPerrordlg('There was an error opening this file. It is possible that it is not an image, figure, pipeline file, or output file.');
            end
        elseif isfield(test,'SavedPreferences')
            EnteredPreferences = test.SavedPreferences;
            LoadPreferences_Helper(hObject,eventdata,handles,EnteredPreferences);
        else
            CPerrordlg('This mat file is not a proper pipeline or output file.');
        end
    elseif strcmpi(FileName(end-3:end),'.fig')
        open(fullfile(PathName,FileName));
    else
        try
            %%% Reads the image.
            Image = CPimread(fullfile(PathName, FileName));
            hFig = CPfigure(handles,'image','name',FileName);
            [hImage,hAx] = CPimagesc(Image,handles,hFig);
            colormap(hAx,gray); % is this needed/correct? CPfigure sets the default intensity colormap. CPimagesc does too. What if it's a label image?
            title(FileName,'Parent',hAx);
        catch CPerrordlg('There was an error opening this file. It is possible that it is not an image, figure, pipeline file, or output file.');
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% CLOSE WINDOWS BUTTON %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function CloseWindows_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.

%%% Requests confirmation to really delete all the figure windows.
Answer = CPquestdlg('Are you sure you want to close all figure windows, timers, and message boxes that CellProfiler created?','Confirm','Yes','No','Yes');
if strcmp(Answer, 'Yes')
    %%% Run the CloseWindows_Helper function
    CloseWindows_Helper(hObject, eventdata, handles);
end


% --- CloseWindows_Helper function was called because it is called from two
% separate places...from the close windows button and when the user quits
% CellProfiler
function CloseWindows_Helper(hObject, eventdata, handles) %#ok Ignore MLint
%%% All CellProfiler windows are now marked with
%%%      UserData.Application = 'CellProfiler'
%%% so they can be found and deleted. This will get rid both windows
%%% from current CP session and leftover windows from previous CP runs
%%% (e.g., if just close CP with windows still open)
GraphicsHandles = findobj('-property','UserData');
for k=1:length(GraphicsHandles)
    if (ishandle(GraphicsHandles(k)))
        userData = get(GraphicsHandles(k),'UserData');
        if (isfield(userData,'Application') && ...
                ischar(userData.Application) && ...
                strcmp(userData.Application, 'CellProfiler'))
            %%% Closes the figure windows.
            try
                delete(GraphicsHandles(k));
            catch
                CPmsgbox('There was a problem closing some windows.');
            end
        end
    end
end
%%% Finds and closes timer windows, which have HandleVisibility off.
TimerHandles = findall(findobj, 'Name', 'Status');
try
    delete(TimerHandles);
    delete(timerfind);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% MODULE NOTES DIALOG BOX   %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function ModuleNotes_Callback(hObject, eventdata, handles)
ModuleHighlighted = get(handles.ModulePipelineListBox,'Value');
if ~isempty(ModuleHighlighted)
    ModuleNumber = ModuleHighlighted(1);
    text = handles.Settings.ModuleNotes{ModuleNumber};
    [text,ok] = CPeditbox(text,'Name',['Edit module notes for ',handles.Settings.ModuleNames{ModuleNumber}]);
    if ok
        handles.Settings.ModuleNotes{ModuleNumber} = text;
        guidata(hObject,handles);
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% OUTPUT FILE NAME EDIT BOX %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function OutputFileNameEditBox_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.

Pathname = handles.Current.DefaultOutputDirectory;
UserEntry = strtrim(get(handles.OutputFileNameEditBox,'string'));
if ~isempty(UserEntry)
    % Drop '.mat' if the user entered it
    if strfind(UserEntry,'.mat')
        UserEntry = UserEntry(1:end-4);
    end
    % If there is no 'OUT' in the filename, add it.
    if isempty(findstr(lower(UserEntry),'out'))
        UserEntry = [UserEntry 'OUT'];
    end
    % Find the files with the same base name and extract highest number
    % If the dir-command takes a long time when there are a lot of files
    % in a directory, another solution might be to try different numberings
    % until an unused number is encountered.
    if exist(fullfile(Pathname,[UserEntry '.mat']),'file')
        % Find base name
        index = findstr(UserEntry,'__');
        if ~isempty(index)
            UserEntry = UserEntry(1:index(end)-1);
        end
        d = dir(Pathname);
        numbers = [];
        for k = 1:length(d);
            index = findstr(d(k).name,[UserEntry '__']);
            if ~isempty(index)
                numbers = [numbers str2double(d(k).name(index(end)+length(UserEntry)+2:end-4))];
            end
        end
        if isempty(numbers)
            outputnumber = 1;
        else
            outputnumber = max(numbers) + 1;
        end
        set(handles.OutputFileNameEditBox,'string',sprintf('%s__%d.mat',UserEntry,outputnumber))
    else
        set(handles.OutputFileNameEditBox,'string',[UserEntry '.mat'])
    end
    drawnow
end
guidata(gcbo, handles);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% ANALYZE IMAGES BUTTON %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in AnalyzeImagesButton.
function AnalyzeImagesButton_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
global closeFigures openFigures;
%%% Checks whether any modules are loaded.
total = 0; %%% Initial value.
for i = 1:handles.Current.NumberOfModules;
    total = total + iscellstr(handles.Settings.ModuleNames(i));
end
if total == 0
    CPerrordlg('You do not have any analysis modules loaded');
else
    %%% Call Callback function of FileNameEditBox to update filename
    tmp = get(handles.OutputFileNameEditBox,'string');
    OutputFileNameEditBox_Callback(hObject, eventdata, handles)
    if ~strcmp(tmp,get(handles.OutputFileNameEditBox,'string'))
        Answer = CPquestdlg('The output file already exists. A new file name has been generated. Continue?','Output file exists','Yes','Cancel','Yes'); %When closing this dialog box, it assumes 'Yes' was chosen
        if ~strcmp(Answer,'Yes')
            set(handles.OutputFileNameEditBox,'string',tmp)
            return
        end
    end

    %%% Checks whether an output file name has been specified.
    if isempty(get(handles.OutputFileNameEditBox,'string'))
        CPerrordlg('You have not entered an output file name in Step 2.');
    else
        %%% Checks whether the default output directory exists.
        if ~exist(handles.Current.DefaultOutputDirectory, 'dir')
            CPerrordlg('The default output folder does not exist');
        end
        %%% Checks whether the default image directory exists
        if ~exist(handles.Current.DefaultImageDirectory, 'dir')
            CPerrordlg('The default image folder does not exist');
        else
            try
                handles.Preferences = rmfield(handles.Preferences,'DisplayWindows');
            end
            if handles.Preferences.DisplayModeValue == 2
                handles.Preferences.DisplayWindows = zeros(handles.Current.NumberOfModules,1);
            elseif handles.Preferences.DisplayModeValue == 3
                try
                    handles.Preferences.DisplayWindows = CPselectmodules(handles.Settings.ModuleNames);
                catch
                    return
                end
            else
                handles.Preferences.DisplayWindows= ones(handles.Current.NumberOfModules,1);
            end

            %%% Retrieves the list of image file names from the
            %%% chosen directory, stores them in the handles
            %%% structure, and displays them in the filenameslistbox, by
            %%% faking a click on the DefaultImageDirectoryEditBox. This
            %%% should already have been done when the directory
            %%% was chosen, but in case some files were moved or
            %%% changed in the meantime, this will refresh the
            %%% list.
            handles = DefaultImageDirectoryEditBox_Callback(hObject, eventdata, handles);
            %%% Updates the handles structure.
            guidata(gcbo, handles);
            %%% Disables a lot of the buttons on the GUI so that the program doesn't
            %%% get messed up.  The Help buttons are left enabled.
            set(handles.IndividualModulesText,'visible','off')
            set(handles.AddModule,'visible','off');
            set(handles.RemoveModule,'visible','off');
            set(handles.MoveUpButton,'visible','off');
            set(handles.MoveDownButton,'visible','off');
            set(handles.PixelSizeEditBox,'enable','inactive','foregroundcolor',[0.7,0.7,0.7])
            set(handles.BrowseImageDirectoryButton,'enable','off')
            set(handles.DefaultImageDirectoryEditBox,'enable','inactive','foregroundcolor',[0.7,0.7,0.7])
            set(handles.BrowseOutputDirectoryButton,'enable','off')
            set(handles.DefaultOutputDirectoryEditBox,'enable','inactive','foregroundcolor',[0.7,0.7,0.7])
            set(handles.OutputFileNameEditBox,'enable','inactive','foregroundcolor',[0.7,0.7,0.7])
            set(handles.AnalyzeImagesButton,'enable','off')
            set(cat(2,handles.VariableBox{:}),'enable','inactive','foregroundcolor',[0.7,0.7,0.7]);

            %%% In the following code, the Timer window and
            %%% timer_text is created.  Each time around the loop,
            %%% the text will be updated using the string property.

            %%% Obtains the screen size.
            %%% If multiple monitors are used, then get the ScreenSize data
            %%% from the main monitor. It can be enhanced to intelligently
            %%% calculate all the monitors' positions.
            [ScreenWidth,ScreenHeight] = CPscreensize;
                      
            %%% Determines where to place the timer window: We want it below the image
            %%% windows, which means at about 800 pixels from the top of the screen,
            %%% but in case the screen doesn't have that many pixels, we don't want it
            %%% to be below zero.
            PotentialBottom = [0, (ScreenHeight-800)];
            BottomOfTimer = max(PotentialBottom);
            %%% Creates the Timer window.
            %%% Label we attach to figures (as UserData) so we know they are ours
            userData.Application = 'CellProfiler';
            userData.MyHandles = handles;
            % set(gcf,'DefaultFigureMenubar','none');
            timerFig = figure('name','Status',...
                'NumberTitle','off','IntegerHandle','off', 'HandleVisibility', 'off', ...
                'color',[0.7,0.7,0.9],'UserData',userData,'Resize','off');
            %% Pause helps to place the window where you actually tell it to go (Matlab, why??) 
            pause(.1)
            set(timerFig, 'Position', [0 BottomOfTimer 350 120]);
            set(timerFig, 'Toolbar', 'none');
            set(timerFig, 'Menubar', 'none');
            TimerData.timerFig = timerFig;
            TimerData.SetBeingAnalyzed = 1;
            TimerData.NumberOfImageSets = 1;
            TimerData.StartingImageSet = 1;
            TimerData.TimerTime = 0;
            TimerData.CurrentModuleName = '';
            TimerData.CurrentModuleNumber = 0;
            TimerData.FontSize = handles.Preferences.FontSize;
            TimerData.NumberOfModules = handles.Current.NumberOfModules;

            delete(timerfind);
            timer_handle = timer('StartFcn','tic','period',0.5,'ExecutionMode','fixedRate','tag','CellProfilerTimer');

            Timer_Callback = ['Timers=timerfind(''Tag'',''CellProfilerTimer'');',...
                'TimerData = get(Timers(1),''UserData'');',...
                'if strncmpi(get(TimerData.timertexthandle,''string''),''Cancel'',6),',...
                'return;',...
                'end;'...
                'time_elapsed = round(toc*10)/10;',...
                'if (time_elapsed > 60),',...
                'if (time_elapsed > 3600),',...
                'timer_elapsed_text =  [''Time elapsed = '',num2str(floor(time_elapsed/3600)),'':'',sprintf(''%02.0f'',abs(mod(time_elapsed,3600))/60),'':'',sprintf(''%02.0f'',abs(mod(time_elapsed,60)))];',...
                'else,',...
                'timer_elapsed_text =  [''Time elapsed = '',num2str(floor(time_elapsed/60)),'':'',sprintf(''%02.0f'',abs(mod(time_elapsed,60)))];',...
                'end;',...
                'else,',...
                'timer_elapsed_text =  [''Time elapsed = '',num2str(floor(time_elapsed))];',...
                'end;',...
                'if (TimerData.CurrentModuleNumber > 0), current_module = [''Module: #'', num2str(TimerData.CurrentModuleNumber), '', '', TimerData.CurrentModuleName];', ...
                'else, current_module = '' '';end;',...
                'number_analyzed = [''Number of cycles completed = '',num2str(TimerData.SetBeingAnalyzed-1), '' of '', num2str(TimerData.NumberOfImageSets)];',...
                'if TimerData.SetBeingAnalyzed > TimerData.StartingImageSet,',...
                'time_set1 = [''Time for first cycle (seconds) = '', num2str(round(10*sum(TimerData.TimerTime(:,1)))/10)];',...
                'else,',...
                'time_set1 = '' '';',...
                'end;',...
                'if TimerData.SetBeingAnalyzed > TimerData.StartingImageSet + 1,',...
                'time_per_set = [''Time per cycle (seconds) = '', num2str(round(10*(sum(sum(TimerData.TimerTime(:,2:(TimerData.SetBeingAnalyzed-1)))))/(TimerData.SetBeingAnalyzed-TimerData.StartingImageSet-1))/10)];',...
                'else, time_per_set = '' '';',...
                'end;',...
                'timertext = {timer_elapsed_text; number_analyzed; current_module; time_set1; time_per_set};',...
                'set(TimerData.timertexthandle,''string'',timertext);',...
                'clear Timers TimerData number_analyzed time_elapsed time_per_set time_set1 timer_elapsed_text timertext current_module;'];

            TimerStopFcn = 'Timers=timerfind(''Tag'',''CellProfilerTimer'');TimerData = get(Timers(1),''UserData'');set(TimerData.timertexthandle,''String'',''Image analysis is complete'');set(TimerData.timerFig,''Color'',[.5 .5 .7]);set(TimerData.timertexthandle,''BackgroundColor'',[.5 .5 .7]);figure(TimerData.timerFig);clear Timers TimerData';

            set(timer_handle,'TimerFcn',Timer_Callback,'StopFcn',TimerStopFcn);

            %%% Sets initial text to be displayed in the text box within the timer window.
            timertext = 'Timer is starting';
            %%% Creates the text box within the timer window which will display the
            %%% timer text.
            text_handle = uicontrol(timerFig,'string',timertext,'style','text',...
                'parent',timerFig,'position', [10 40 260 74],'FontName','Helvetica','HorizontalAlignment','left',...
                'FontSize',handles.Preferences.FontSize,'FontWeight','bold','BackgroundColor',[0.7,0.7,0.9]);
            %%% Saves text handle to the handles structure.
            handles.timertexthandle = text_handle;
            TimerData.timertexthandle = text_handle;
            TimerData.ModuleNames = handles.Settings.ModuleNames;
            set(timer_handle,'UserData',TimerData);
            %%% Creates the Cancel and Pause buttons.
            PauseButton_handle = uicontrol('Style', 'pushbutton', ...
                'String', 'Pause', 'Position', [280 60 60 25], ...
                'parent',timerFig, 'BackgroundColor',[0.7,0.7,0.9],'FontName','Helvetica','FontSize',handles.Preferences.FontSize,'UserData',0);
            CancelAfterCycleButton_handle = uicontrol('Style', 'pushbutton', ...
                'String', 'Cancel after cycle', 'Position', [10 10 120 25], ...
                'parent',timerFig, 'BackgroundColor',[0.7,0.7,0.9],'FontName','Helvetica','FontSize',handles.Preferences.FontSize,'UserData',0);
            CancelAfterModuleButton_handle = uicontrol('Style', 'pushbutton', ...
                'String', 'Cancel after module', 'Position', [140 10 120 25], ...
                'parent',timerFig, 'BackgroundColor',[0.7,0.7,0.9],'FontName','Helvetica','FontSize',handles.Preferences.FontSize,'UserData',0);

            uicontrol('Style','pushbutton','String','Close','Position',[300 90 40 25],'BackgroundColor',[.7 .7 .9],...
                'parent',timerFig,'FontName','Helvetica','FontSize',handles.Preferences.FontSize,'Callback',...
                ['close(' num2str(timerFig*8192) '/8192)']);

            %%% Sets the functions to be called when the Cancel and Pause buttons
            %%% within the Timer window are pressed.
            PauseButtonFunction = 'if ~exist(''h''); h = CPmsgbox(''Image processing is paused without causing any damage. Processing will restart when you close the Pause window or click OK.''); waitfor(h); clear h; end';
            set(PauseButton_handle,'Callback', PauseButtonFunction)
            CancelAfterCycleButtonFunction = ['if ~exist(''delme''); delme=1; deleteme = CPquestdlg(''Paused. Are you sure you want to cancel after this cycle? Processing will continue on the current cycle, the data up to and including this cycle will be saved in the output file, and then the analysis will be canceled.'', ''Confirm cancel'',''Yes'',''No'',''Yes''); switch deleteme; case ''Yes''; set(',num2str(CancelAfterCycleButton_handle*8192), '/8192,''enable'',''off''); set(', num2str(text_handle*8192), '/8192,''string'',''Canceling in progress; Waiting for the processing of current cycle to be complete. You can press the Cancel after module button or cancel now button to cancel more quickly, but data relating to the current cycle will not be saved in the output file.''); case ''No''; clear deleteme; clear delme; return; end; clear deleteme; clear delme; end'];
            set(CancelAfterCycleButton_handle, 'Callback', CancelAfterCycleButtonFunction)
            CancelAfterModuleButtonFunction = ['if ~exist(''delme2''); delme2=1; deleteme = CPquestdlg(''Paused. Are you sure you want to cancel after this module? Processing will continue until the current image analysis module is completed, to avoid corrupting the current settings of CellProfiler. Data up to the *previous* cycle are saved in the output file and processing is canceled.'', ''Confirm cancel'',''Yes'',''No'',''Yes''); switch deleteme; case ''Yes''; set(', num2str(CancelAfterCycleButton_handle*8192), '/8192,''enable'',''off''); set(', num2str(CancelAfterModuleButton_handle*8192), '/8192,''enable'',''off''); set(', num2str(text_handle*8192), '/8192,''string'',''Canceling after current module in progress; Waiting for the processing of current module to be complete in order to avoid corrupting the current CellProfiler settings.''); case ''No''; clear deleteme; clear delme2; return; end; clear deleteme; clear delme2; end'];
            set(CancelAfterModuleButton_handle,'Callback', CancelAfterModuleButtonFunction)
            HelpButtonFunction = 'CPmsgbox(''Pause button: The current processing is immediately suspended without causing any damage. Processing restarts when you close the Pause window or click OK. Cancel after cycle: Processing will continue on the current cycle, the data up to and including this cycle will be saved in the output file, and then the analysis will be canceled.  Cancel after module: Processing will continue until the current image analysis module is completed, to avoid corrupting the current settings of CellProfiler. Data up to the *previous* cycle are saved in the output file and processing is canceled. Cancel now: The data up to the *previous* cycle will be saved in the output file, but the current cycle data will be stored incomplete in the output file, which might be confusing or corrupt when using the output file.'')';
            %%% HelpButton
            uicontrol('Style', 'pushbutton', ...
                'String', '?', 'Position', [280 90 15 25], 'FontName','Helvetica','FontSize', handles.Preferences.FontSize,...
                'Callback', HelpButtonFunction, 'parent',timerFig, 'BackgroundColor',[0.7,0.7,0.9]);
            DetailButton=uicontrol('Style','pushbutton','String','Details','Position',[280 30 60 25],'FontName','Helvetica','FontSize',handles.Preferences.FontSize,...
                'parent',timerFig,'Tag','DetailButton','BackgroundColor',[.7 .7 .9],'Callback',[...
                'Timers = timerfind(''Tag'',''CellProfilerTimer'');',...
                'TimerFcn = get(Timers(1),''TimerFcn'');',...
                'set(Timers(1),''TimerFcn'',''zeros(1);'');',...
                'TimerData = get(Timers(1),''UserData'');',...
                'DetWin = findobj(''tag'',''DetailWindow'');',...
                'if isempty(DetWin),',...
                'DetWin = CPfigure;',...
                'set(DetWin,''tag'',''DetailWindow'',''Name'',''Status Details'',''NumberTitle'',''off'',''menubar'',''none'',''position'',[400 100 330 13*(TimerData.NumberOfModules+7)+30]);',...
                'pos = get(DetWin,''Position'');',...
                'DetWinheight = pos(4);',...
                'uicontrol(DetWin, ''Tag'', ''DetailWindowHeader'', ''Style'', ''text'', ''Position'', [10 DetWinheight-17 150 13],', ...
                '''HorizontalAlignment'', ''left'', ''BackgroundColor'', [0.7 0.7 0.9], ''FontSize'', TimerData.FontSize,', ...
                '''FontWeight'', ''bold'', ''String'', ''Time(sec) for:'');',...
                'uicontrol(DetWin, ''Tag'', ''DetailWindowHeader'', ''Style'', ''text'', ''Position'', [200 DetWinheight-17 51 13],', ...
                '''HorizontalAlignment'', ''center'', ''BackgroundColor'', [0.7 0.7 0.9], ''FontSize'', TimerData.FontSize,', ...
                '''FontWeight'', ''bold'', ''String'', ''1st Cycle'');',...
                'uicontrol(DetWin, ''Tag'', ''DetailWindowHeader'', ''Style'', ''text'', ''Position'', [260 DetWinheight-17 63 13],', ...
                '''HorizontalAlignment'', ''center'', ''BackgroundColor'', [0.7 0.7 0.9], ''FontSize'', TimerData.FontSize,', ...
                '''FontWeight'', ''bold'', ''String'', ''Avg Others'');',...
                'ModuleStr = {};',...
                'for k = 1:TimerData.NumberOfModules,',...
                'ModuleStr{end+1} = [''Module '', num2str(k), '' - '', TimerData.ModuleNames{k}, '':''];',...
                'end;',...
                'ModuleStr{end+1} = '''';',...
                'ModuleStr{end+1} = ''Avg Totals:'';',...
                'ModuleStr{end+1} = '''';',...
                'ModuleStr{end+1} = ''TOTAL TIME:'';',...
                'ModuleStr{end+1} = ''Memory:'';',...
                'uicontrol(DetWin, ''Tag'', ''DetailWindowText'', ''Style'', ''text'', ''Position'', [10 DetWinheight-30-13*(TimerData.NumberOfModules+7) 300 13*(TimerData.NumberOfModules+7)],', ...
                '''HorizontalAlignment'', ''left'', ''BackgroundColor'', [0.7 0.7 0.9], ''FontSize'', TimerData.FontSize,', ...
                '''String'', ModuleStr);',...
                'else,',...
                'figure(DetWin);',...
                'pos = get(DetWin,''Position'');',...
                'DetWinheight = pos(4);',...
                'end;',...
                'Time1stCycleStr = {};',...
                'TimeAvgOthersStr = {};',...
                'for i = [1:size(TimerData.TimerTime,1)],',...
                'Time1stCycleStr{end+1} = sprintf(''%1.1f'',TimerData.TimerTime(i,1));',...
                'if TimerData.SetBeingAnalyzed == 1 | TimerData.NumberOfImageSets==1,',...
                'TimeAvgOthersStr{end+1} = ''N/A'';',...
                'elseif TimerData.SetBeingAnalyzed > TimerData.NumberOfImageSets,',...
                'TimeAvgOthersStr{end+1} = sprintf(''%1.1f'',sum(TimerData.TimerTime(i,2:end))/(TimerData.NumberOfImageSets-1));',...
                'else,',...
                'count=0;',...
                'total=0;',...
                'for j=[2:size(TimerData.TimerTime,2)],',...
                'if TimerData.TimerTime(i,j)~=0,',...
                'count=count+1;',...
                'total=total+TimerData.TimerTime(i,j);',...
                'end;',...
                'end;',...
                'if count~=0,',...
                'TimeAvgOthersStr{end+1} = sprintf(''%1.1f'',total/count);',...
                'else,',...
                'TimeAvgOthersStr{end+1} = ''N/A'';',...
                'end;',...
                'end;',...
                'end;',...
                'for m = 1:(TimerData.NumberOfModules+1 - length(Time1stCycleStr)),',...
                'Time1stCycleStr{end+1} = '''';',...
                'TimeAvgOthersStr{end+1} = '''';',...
                'end;',...
                'Time1stCycleStr{end+1} = sprintf(''%2.1f'',sum(TimerData.TimerTime(:,1)));',...
                'Time1stCycleStr{end+1} = '''';',...
                'Time1stCycleStr{end+1} = sprintf(''%1.1f'',sum(sum(TimerData.TimerTime(:))));',...
                'if TimerData.SetBeingAnalyzed == 1 | TimerData.NumberOfImageSets==1,',...
                'TimeAvgOthersStr{end+1} = ''N/A'';',...
                'else,',...
                'TotalAvgOthers = 0;',...
                'for n = 1:(length(TimeAvgOthersStr)-1),',...
                'if ~(str2num(TimeAvgOthersStr{n})==0 | TimeAvgOthersStr{n}(1) == ''N''),',...
                'TotalAvgOthers = TotalAvgOthers + str2num(TimeAvgOthersStr{n});',...
                'end;',...
                'end;',...
                'TimeAvgOthersStr{end+1} = sprintf(''%1.1f'',TotalAvgOthers);',...
                'end;',...
                'Time1stCycleStr{end+1} = sprintf(''%1.1f MB'',TimerData.MemoryUsage/(1024*1024));',...
                'TimeAvgOthersStr{end+1} = '''';',...
                'Time1stCycle = findobj(DetWin,''Tag'',''Time1stCycle'');',...
                'if ~isempty(Time1stCycle),',...
                'set(Time1stCycle, ''String'', Time1stCycleStr);',...
                'else,',...
                'uicontrol(DetWin, ''Tag'', ''Time1stCycle'', ''Style'', ''text'', ''Position'', [200 DetWinheight-30-13*(TimerData.NumberOfModules+7) 51 13*(TimerData.NumberOfModules+7)],', ...
                '''HorizontalAlignment'', ''center'', ''BackgroundColor'', [0.7 0.7 0.9], ''FontSize'', TimerData.FontSize,', ...
                '''String'', Time1stCycleStr);',...
                'end;',...
                'TimeAvgOthers = findobj(DetWin,''Tag'',''TimeAvgOthers'');',...
                'if ~isempty(TimeAvgOthers),',...
                'set(TimeAvgOthers, ''String'', TimeAvgOthersStr);',...
                'else,',...
                'uicontrol(DetWin, ''Tag'', ''TimeAvgOthers'', ''Style'', ''text'', ''Position'', [260 DetWinheight-30-13*(TimerData.NumberOfModules+7) 63 13*(TimerData.NumberOfModules+7)],', ...
                '''HorizontalAlignment'', ''center'', ''BackgroundColor'', [0.7 0.7 0.9], ''FontSize'', TimerData.FontSize,', ...
                '''String'', TimeAvgOthersStr);',...
                'end;',...
                'set(Timers(1),''TimerFcn'',TimerFcn);',...
                'clear DetWin DetWinheight ModuleStr Time1stCycle Time1stCycleStr TimeAvgOthers TimeAvgOthersStr TimerData TimerFcn Timers TotalAvgOthers count i j k m n pos total;']);

            %%% The timertext string is read by the analyze all images button's callback
            %%% at the end of each time around the loop (i.e. at the end of each image
            %%% set).  If it notices that the string says "Cancel...", it breaks out of
            %%% the loop and finishes up.

            %%% Update the handles structure. Not sure if it's necessary here.
            guidata(gcbo, handles);
            %%% Sets the timer window to show a warning box before allowing it to be
            %%% closed.
            CloseFunction = ['deleteme = CPquestdlg(''DO NOT CLOSE the Timer window while image processing is in progress!! Are you sure you want to close the timer?'', ''Confirm close'',''Yes'',''No'',''Yes''); switch deleteme; case ''Yes''; delete(',num2str(timerFig*8192), '/8192); clear deleteme; case ''No''; clear deleteme; return; end;'];
            set(timerFig,'CloseRequestFcn',CloseFunction)
            %%% Note: The size of the text object that fits inside the timer window is
            %%% officially 1 pixel smaller than the size of the timer window itself.
            %%%  There is, however, a ~20 pixel gap at the top of the timer window: I
            %%%  think this is because there is space allotted for a menu bar which is
            %%%  not utilized in this window.  However, when I increased the size of
            %%%  the text object relative to the timer window, I ended up with the
            %%%  program crashing and creating segmentation faults, so I gave up and
            %%%  decided to live with that gap being present.  I am not absolutely sure
            %%%  that this was causing the problems, though.

            %%% If a module is chosen in this slot, assign it an output figure
            %%% window and write the figure window number to the handles structure so
            %%% that the modules know where to write to.  Each module should
            %%% resize the figure window appropriately.  The closing function of the
            %%% figure window is set to wait until a cycle is done processing
            %%% before closing the window, to avoid unexpected results.
            set(handles.CloseFigureButton,'visible','on')
            set(handles.OpenFigureButton,'visible','on')

            %%% For the first time through, the number of cycles
            %%% will not yet have been determined.  So, the Number of
            %%% cycles is set temporarily.
            handles.Current.NumberOfImageSets = 1;
            handles.Current.SetBeingAnalyzed = 1;
            handles.Current.SaveOutputHowOften = 1;
            %%% Marks the time that analysis was begun.
            handles.Current.TimeStarted = datestr(now);
            %%% Clear the buffers (Pipeline and Measurements)
            handles.Pipeline = struct;
            handles.Measurements = struct;
            %%% Start the timer.
            start(timer_handle)
            %%% Update the handles structure.
            guidata(gcbo, handles);

            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            %%% Begin loop (going through all the cycles). %%%
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

            %%% This variable allows breaking out of nested loops.
            break_outer_loop = 0;
            startingImageSet = 1;
            handles.Current.StartingImageSet = startingImageSet;
            while handles.Current.SetBeingAnalyzed <= handles.Current.NumberOfImageSets
                setbeinganalyzed = handles.Current.SetBeingAnalyzed;
                NumberofWindows = 0;
                %%% This is written as a while loop (rather than a for loop) to allow fixes and restarts.
                SlotNumber = 1;
                while SlotNumber <= handles.Current.NumberOfModules
                    %%% If a module is not chosen in this slot, continue on to the next.
                    ModuleNumberAsString = CPtwodigitstring(SlotNumber);
                    ModuleName = char(handles.Settings.ModuleNames(SlotNumber));
                    if ~iscellstr(handles.Settings.ModuleNames(SlotNumber))
                    else
                        %%% Saves the current module number in the handles
                        %%% structure.
                        handles.Current.CurrentModuleNumber = ModuleNumberAsString;
                        %%% The try/catch/end set catches any errors that occur during the
                        %%% running of module 1, notifies the user, breaks out of the image
                        %%% analysis loop, and completes the refreshing
                        %%% process.
                        try
                            if handles.Current.SetBeingAnalyzed == 1
                                if handles.Preferences.DisplayWindows(SlotNumber) == 0
                                    handles.Current.(['FigureNumberForModule' CPtwodigitstring(SlotNumber)]) = ceil(max(findobj))+1;
                                else
                                    NumberofWindows = NumberofWindows+1;
                                    if iscellstr(handles.Settings.ModuleNames(SlotNumber))
                                        LeftPos = ScreenWidth*rem((NumberofWindows-1),12)/12;
                                        handles.Current.(['FigureNumberForModule' CPtwodigitstring(SlotNumber)]) = ...
                                            CPfigure(handles,'','name',[char(handles.Settings.ModuleNames(SlotNumber)), ' Display, cycle # '],...
                                            'Position',[LeftPos (ScreenHeight-522) 560 442]);
                                    end
                                    TempFigHandle = handles.Current.(['FigureNumberForModule' CPtwodigitstring(SlotNumber)]);
                                    if exist('FigHandleList','var')
                                        if any(TempFigHandle == FigHandleList)
                                            for z = 1:length(FigHandleList)
                                                if TempFigHandle == FigHandleList(z)
                                                    handles.Current.(['FigureNumberForModule' CPtwodigitstring(z)]) = ceil(max(findobj))+z;
                                                end
                                            end
                                        end
                                    end
                                    FigHandleList(SlotNumber) = handles.Current.(['FigureNumberForModule' CPtwodigitstring(SlotNumber)]); %#ok
                                end
                            end
                            %%% This is used to check for errors and allow restart.
                            CanMoveToNextModule = false;

                            %%% Updates the timer with the current module.
                            TimerData = get(timer_handle,'UserData');
                            TimerData.CurrentModuleName = ModuleName;
                            TimerData.CurrentModuleNumber = SlotNumber;
                            handles.Current.TimerData = TimerData;
                            set(timer_handle,'UserData',TimerData);
                            % force an update.
                            eval(get(timer_handle, 'TimerFcn'));

                            %%% Runs the appropriate module, with the handles structure as an
                            %%% input argument and as the output
                            %%% argument.
                            handles = feval(ModuleName,handles);

                            %%% If the call to feval succeeded, then the module succeeded and we can move to the next module.
                            %%% (if there is an error, it will be caught below, at the point marked MODULE ERROR)
                            CanMoveToNextModule = true;

                            %%% Store the handles back to the figure.
                            guidata(handles.figure1,handles);
                            try
                                TimerData = get(timer_handle,'UserData');
                                TimerData.NumberOfImageSets = handles.Current.NumberOfImageSets;
                                TimerData.StartingImageSet = handles.Current.StartingImageSet;
                                set(timer_handle,'UserData',TimerData);
                            end
                            FigHandle = -1;
                            try
                                FigHandle = handles.Current.(['FigureNumberForModule' CPtwodigitstring(SlotNumber)]);
                                if ishandle(FigHandle)
                                    CPupdatefigurecycle(handles.Current.SetBeingAnalyzed,FigHandle);
                                end
                            end
                            %%% We apparently ran the module successfully, so record a Zero (unless we're restarting)
                            if ~ strcmp(ModuleName, 'Restart')
                                handles = CPaddmeasurements(handles,'Image',CPjoinstrings('ModuleError',[CPtwodigitstring(SlotNumber),ModuleName]),0);
                            end
                        catch
                            %%% We apparently had an error in the module, so record a One.
                            if ~ strcmp(ModuleName, 'Restart')
                                handles = CPaddmeasurements(handles,'Image',CPjoinstrings('ModuleError',[CPtwodigitstring(SlotNumber),ModuleName]),1);
                            end
                            if strcmp(handles.Preferences.SkipErrors,'No')
                                if isdeployed
                                    errorfunction(ModuleNumberAsString,handles.Preferences.FontSize,ModuleName)
                                    break_outer_loop = 1;
                                else
                                    if exist([ModuleName,'.m'],'file') ~= 2,
                                        CPerrordlg(['Image processing was canceled because the image analysis module named ', ([ModuleName,'.m']), ' was not found. Is it stored in the folder with the other modules?  Has its name changed?']);
                                    else
                                        %%% MODULE ERROR
                                        %%% Runs the errorfunction function that catches errors and
                                        %%% describes to the user what to do.
                                        errorfunction(ModuleNumberAsString,handles.Preferences.FontSize,ModuleName)
                                        %%% Give the user a chance to fix the bug and retry the module.
                                        if strcmp(getenv('CPDEBUG'), 'yes'),
                                            if strcmp(CPquestdlg('Edit code and retry module?  (note: breakpoints will be lost)', 'Retry pipeline?', 'Yes', 'No', 'Yes'), 'Yes'),
                                                %%% If we get an error in the retry code, below, we skip the retry.
                                                give_up = 0;
                                                try
                                                    %%% To force code to be reloaded, we clear functions on the error stack, up to the called module.
                                                    err = lasterror;
                                                    stack = err.stack;
                                                    for i = 1:length(stack),
                                                        clear(stack(i).name);
                                                        %%% Stop at the called module.  (Hopefully none of them recurse.(?))
                                                        if strcmp(stack(i).name, ModuleName),
                                                            break;
                                                        end
                                                    end
                                                catch
                                                    %%% If there was an error in the retry code, report it, then revert to not retrying.
                                                    CPerrordlg(['Could not retry: (' lasterr ')']);
                                                    give_up = 1;
                                                end
                                                if ~ give_up,
                                                    %%% This continue binds to the while loop over SlotNumber.
                                                    continue;
                                                end
                                                %%% The implicit else clause is to fall through to the break below.
                                            end
                                        end
                                        %%% This will cause the image analysis loop to break out of the loop over images.
                                        break_outer_loop = 1;
                                    end
                                end
                                %%% Got to here with an error, so break outer loop.
                                break;
                            else
                                errorfunction(ModuleNumberAsString,handles.Preferences.FontSize,ModuleName);
                                CanMoveToNextModule = true;
                            end
                        end % Goes with try/catch.

                        %%% Check for a pending "Cancel after Module"
                        CancelWaiting = get(handles.timertexthandle,'string');
                        if strncmpi(CancelWaiting, 'Canceling after current module', 30)
                            break_outer_loop = 1;
                            break
                        end
                    end

                    %%% If the module passed out a new value for
                    %%% StartingImageSet, then we set startingImageSet
                    %%% to be that value and break all the way our to
                    %%% the cycle loop. The RestartImageSet in
                    %%% handles is deleted because we never want it in
                    %%% the output file.
                    startingImageSet = handles.Current.StartingImageSet;
                    if (setbeinganalyzed < startingImageSet)
                        handles.Current.SetBeingAnalyzed = startingImageSet;
                        guidata(gcbo,handles);
                        break  %% break out of SlotNumber loop
                    end

                    openFig = openFigures;
                    openFigures = [];
                    for i=1:length(openFig),
                        ModuleNumber = openFig(i);
                        try
                            LeftPos = ScreenWidth*rem((NumberofWindows-1),12)/12;
                            handles.Current.(['FigureNumberForModule' CPtwodigitstring(ModuleNumber)]) = ...
                                CPfigure(handles,'','name',[char(handles.Settings.ModuleNames(ModuleNumber)), ' Display, cycle # '],...
                                'Position',[LeftPos (ScreenHeight-522) 560 442]);
                            %%% Sets the closing function of the window appropriately. (See way
                            %%% above where 'ClosingFunction's are defined).
                        catch
                        end
                    end

                    closeFig = closeFigures;
                    closeFigures = [];
                    for i=1:length(closeFig),
                        ModuleNumber = closeFig(i);
                        try
                            ThisFigureNumber = handles.Current.(['FigureNumberForModule' CPtwodigitstring(ModuleNumber)]);
                            delete(ThisFigureNumber);
                        catch
                        end
                    end

                    %%% Finds and records total to run module.
                    TimerData = get(timer_handle,'UserData');
                    if SlotNumber==1 && handles.Current.SetBeingAnalyzed==handles.Current.StartingImageSet
                        TimerData.TimerTime(SlotNumber,handles.Current.SetBeingAnalyzed) = toc;
                    else
                        TimerData.TimerTime(SlotNumber,handles.Current.SetBeingAnalyzed) = toc - sum(TimerData.TimerTime(:));
                    end
                    TimerData.MemoryUsage = memusage(handles);
                    set(timer_handle,'UserData',TimerData);
                    if ~isempty(findobj('Tag','DetailWindow'))
                        eval(get(DetailButton,'callback'));
                    end

                    %%% if we can move to the next module, do so
                    if CanMoveToNextModule,
                        SlotNumber = SlotNumber + 1;
                    end
                end %%% ends loop over slot number

                %%% Completes the breakout to the image loop.
                if (setbeinganalyzed < startingImageSet)
%                     if startingImageSet ==2
%                         handles.Current.StartingImageSet = 1;
%                         guidata(gcbo,handles);
%                     end
                     continue;
                end;

                if (break_outer_loop),
                    break;  %%% this break is out of the outer loop of image analysis
                end

                CancelWaiting = get(handles.timertexthandle,'string');

                %%% Save all data that is in the handles structure to the output file
                %%% name specified by the user, but only save it
                %%% in the increments that the user has specified
                %%% (e.g. every 5th cycle, every 10th image
                %%% set, as set by the SpeedUpCellProfiler
                %%% module), or if it is the last cycle.  If
                %%% the user has not used the SpeedUpCellProfiler
                %%% module, then
                %%% handles.Current.SaveOutputHowOften is the
                %%% number 1, so the output file will be saved
                %%% every time.
                %%% Save everything, but don't want to write out
                %%% StartingImageSet field.
                handles.Current = rmfield(handles.Current,'StartingImageSet');
                if (rem(handles.Current.SetBeingAnalyzed,handles.Current.SaveOutputHowOften) == 0) || (handles.Current.SetBeingAnalyzed == 1) || (handles.Current.SetBeingAnalyzed == handles.Current.NumberOfImageSets)
                    %Removes images from the Pipeline
                    if strcmp(handles.Preferences.StripPipeline,'Yes')
                        ListOfFields = fieldnames(handles.Pipeline);
                        restorePipe = handles.Pipeline;
                        tempPipe = handles.Pipeline;
                        for i = 1:length(ListOfFields)
                            if all(size(tempPipe.(ListOfFields{i}))~=1)
                                tempPipe = rmfield(tempPipe,ListOfFields(i));
                            end
                        end
                        handles.Pipeline = tempPipe;
                    end
                    try eval(['save ''',fullfile(handles.Current.DefaultOutputDirectory, ...
                            get(handles.OutputFileNameEditBox,'string')), ''' ''handles'';'])
                    catch CPerrordlg('There was an error saving the output file. Please check whether you have permission and space to write to that location.');
                        break;
                    end
                    if strcmp(handles.Preferences.StripPipeline,'Yes')
                        %%% restores the handles.Pipeline structure if
                        %%% it was removed above.
                        handles.Pipeline = restorePipe;
                    end
                end
                %%% Restore StartingImageSet for those modules that
                %%% need it.
                handles.Current.StartingImageSet = startingImageSet;
                %%% If a "cancel" signal is waiting, break and go to the "end" that goes
                %%% with the "while" loop.
                if strncmpi(CancelWaiting,'Cancel',6)
                    break
                end
                drawnow
                %%% The setbeinganalyzed is increased by one and stored in the handles structure.
                setbeinganalyzed = setbeinganalyzed + 1;
                handles.Current.SetBeingAnalyzed = setbeinganalyzed;
                TimerData = get(timer_handle,'UserData');
                TimerData.SetBeingAnalyzed = setbeinganalyzed;
                set(timer_handle,'UserData',TimerData);
                guidata(gcbo, handles)

            end %%% This "end" goes with the "while" loop (going through the cycles).


            %%% Update the handles structure.
            guidata(gcbo, handles)

            set(timerFig,'CloseRequestFcn','closereq')
            stop(timer_handle);

            %%% Re-enable/disable appropriate buttons.
            set(handles.IndividualModulesText,'visible','on')
            set(handles.AddModule,'visible','on');
            set(handles.RemoveModule,'visible','on');
            set(handles.MoveUpButton,'visible','on');
            set(handles.MoveDownButton,'visible','on');
            set(handles.PixelSizeEditBox,'enable','on','foregroundcolor','black')
            set(handles.BrowseImageDirectoryButton,'enable','on')
            set(handles.DefaultImageDirectoryEditBox,'enable','on','foregroundcolor','black')
            set(handles.BrowseOutputDirectoryButton,'enable','on')
            set(handles.DefaultOutputDirectoryEditBox,'enable','on','foregroundcolor','black')
            set(handles.OutputFileNameEditBox,'enable','on','foregroundcolor','black')
            set(handles.AnalyzeImagesButton,'enable','on')

            set(cat(2,handles.VariableBox{:}),'enable','on','foregroundcolor','black');

            set(handles.CloseFigureButton,'visible','off');
            set(handles.OpenFigureButton,'visible','off');
            set(CancelAfterModuleButton_handle,'enable','off')
            set(CancelAfterCycleButton_handle,'enable','off')
            set(PauseButton_handle,'enable','off')
            %set(CancelNowButton_handle,'enable','off')
            %%% Sets the figure windows' Closing Functions back to normal, if
            %%% the figure windows are still open.  If this is not done,
            %%% after the analysis is complete, these windows cannot be closed with the
            %%% ctrl-W or "X" buttons in the window, because the closing function would
            %%% wait for the image analysis to complete a loop (which would never
            %%% happen).  Has to check to see whether the figure exists first before
            %%% setting the close request function.  That requires looking up
            %%% handles.Current.FigureNumber1.  Before looking that up, you have to check to
            %%% see if it exists or else an error occurs.

            for i=1:handles.Current.NumberOfModules
                if isfield(handles.Current,['FigureNumberForModule' CPtwodigitstring(i)])
                    if any(findobj == handles.Current.(['FigureNumberForModule' CPtwodigitstring(i)]))
                        properhandle = handles.Current.(['FigureNumberForModule' CPtwodigitstring(i)]);
                        set(properhandle,'CloseRequestFcn','delete(gcf)');
                    end
                end
            end
            guidata(gcbo, handles)

            %%% This "end" goes with the error-detecting "You have no analysis modules
            %%% loaded".
        end
        %%% This "end" goes with the error-detecting "You have not specified an
        %%% output file name".

    end
    %%% This "end" goes with the error-detecting "The chosen directory does not
    %%% exist."
end


%%% Note: an improvement I would like to make:
%%% Currently, it is possible to use the Zoom tool in the figure windows to
%%% zoom in on any of the subplots.  However, when new image data comes
%%% into the window, the Zoom factor is reset. If the processing is fairly
%%% rapid, there isn't really time to zoom in on an image before it
%%% refreshes. It would be nice if the
%%% Zoom factor was applied to the new incoming image.  I think that this
%%% would require redefining the Zoom tool's action, which is not likely to
%%% be a simple task.

function errorfunction(CurrentModuleNumber,FontSize,ModuleName)
%%% lasterr is an old MATLAB function; lasterror is a new MATLAB function
%%% that will eventually replace it. Most likely sometime we can simplify
%%% the following code, but we should think carefully about how it affects
%%% old vs new versions of MATLAB.
Error = lasterr;
%%% If an error occurred in an image analysis module, the error message
%%% should begin with "Error using ==> ", which will be recognized here.
if strncmp(Error,'Error using ==> ',16)
    ErrorExplanation = ['There was a problem running the analysis module ',ModuleName,' which is number ',CurrentModuleNumber, '. ', Error];
    ErrorExplanation = regexprep(ErrorExplanation,'Error using ==> \w+ at [0-9]+','');
    %%% The following are errors that may have occured within the analyze all
    %%% images callback itself.
elseif ~isempty(strfind(Error,'bad magic'))
    ErrorExplanation = ['There was a problem running the image analysis. It seems likely that there are files in your image directory that are not images or are not the image format that you indicated. Probably the data for the cycles up to the one which generated this error are OK in the output file.'];
else
    ErrorExplanation = ['There was a problem running the image analysis. Sorry, it is unclear what the problem is. It would be wise to close the entire CellProfiler program in case something strange has happened to the settings. The output file may be unreliable as well. Matlab says the error is: ', Error, ' in the ', ModuleName, ' module, which is module #', CurrentModuleNumber, ' in the pipeline.'];
end
CPerrordlg(ErrorExplanation);

%%%%%%%%%%%%%%%%%%%%
%%% HELP BUTTONS %%%
%%%%%%%%%%%%%%%%%%%%

function IndividualModuleHelp_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.

NoModuleSelectedHelpMsg = 'You do not have an analysis module loaded. Add a module to the pipeline using the + button. Clicking the "?" button below the pipeline when a module is selected will then reveal help for that module.';
ModuleNumber = whichactive(handles);
if ModuleNumber == 0
    CPtextdisplaybox(NoModuleSelectedHelpMsg,'Help for choosing an analysis module');
else
    try ModuleName = handles.Settings.ModuleNames(ModuleNumber);
        %%% This is the function that actually reads the module's help
        %%% data.
        if isdeployed
            for i = 1:length(handles.Current.ModulesFilenames)
                if strmatch(ModuleName,handles.Current.ModulesFilenames{i},'exact')
                    Option = i - 1; % Account for index mismatch between ModulesHelp and ModulesFilenames
                    break
                end
            end
            if ~isempty(Option)
                HelpText = handles.Current.ModulesHelp{Option};
            end
        else
            HelpText = help(char(ModuleName));
        end
        DoesHelpExist = exist('HelpText','var');
        if DoesHelpExist == 1
            %%% Calls external subfunction: a nice text display box with a slider if the help is too long.
            CPtextdisplaybox(HelpText,'CellProfiler image analysis module help');
        else
            CPtextdisplaybox('Sorry, there is no help information for this image analysis module.','Image analysis module help');
        end
    catch
        CPtextdisplaybox(NoModuleSelectedHelpMsg,'Help for choosing an analysis module');
    end
end

function ModulesHelp_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
ListOfTools = handles.Current.ModulesFilenames;
ToolsHelpSubfunction(handles, 'Modules', ListOfTools)

function ImageToolsHelp_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
ListOfTools = handles.Current.ImageToolsFilenames;
ToolsHelpSubfunction(handles, 'Image Tools', ListOfTools)

function DataToolsHelp_Callback(hObject, eventdata, handles) %#ok We want to ignore MLint error checking for this line.
ListOfTools = handles.Current.DataToolsFilenames;
ToolsHelpSubfunction(handles, 'Data Tools', ListOfTools)

function HelpFiles_Callback(hObject,eventdata, handles) %#ok Ignore MLint
if strcmp(eventdata,'GS');
    ListOfHelp = handles.Current.GSFilenames;
    for i=1:length(ListOfHelp)
        if strncmpi(ListOfHelp{i},'help',4)
            ListOfHelp{i} = ListOfHelp{i}(5:end);
        end
    end
    ToolsHelpSubfunction(handles,'Getting Started',ListOfHelp)
elseif strcmp(eventdata,'Help');
    ListOfHelp = handles.Current.HelpFilenames;
    for i=1:length(ListOfHelp)
        if strncmpi(ListOfHelp{i},'help',4)
            ListOfHelp{i} = ListOfHelp{i}(5:end);
        end
    end
    ToolsHelpSubfunction(handles,'Help',ListOfHelp)
else
    CPerrordlg('Something is wrong.');
end

%%% SUBFUNCTION %%%
function ToolsHelpSubfunction(handles, ImageDataOrHelp, ToolsCellArray)
global toolsChoice;
ToolsCellArray(1) = [];
okbuttoncallback = 'ToolsHelpWindowHandle = findobj(''tag'',''ToolsHelpWindow''); toolsbox = findobj(''tag'',''toolsbox''); global toolsChoice; toolsChoice = get(toolsbox,''value''); close(ToolsHelpWindowHandle), clear ToolsHelpWindowHandle toolsbox toolsChoice';
cancelbuttoncallback = 'ToolsHelpWindowHandle = findobj(''tag'',''ToolsHelpWindow''); global toolsChoice; toolsChoice = 0; close(ToolsHelpWindowHandle), clear ToolsHelpWindowHandle toolsbox toolsChoice';

MainWinPos = get(handles.figure1,'Position');
Color = [0.7 0.7 0.9];

%%% If there is a (are) ToolsHelpWindow(s) open, close it (them);
%%% otherwise, ok/cancel callbacks can get confused
ToolsHelpWindowHandles = findobj('tag','ToolsHelpWindow');
if ~isempty(ToolsHelpWindowHandles)
    try
        close(ToolsHelpWindowHandles);
    end
end

%%% Label we attach to figures (as UserData) so we know they are ours
userData.Application = 'CellProfiler';
userData.MyHandles=handles;
ToolsHelpWindowHandle = figure(...
    'Units','pixels',...
    'CloseRequestFcn','delete(gcf)',...
    'Color',Color,...
    'DockControls','off',...
    'MenuBar','none',...
    'Name','ToolsHelpWindow',...
    'NumberTitle','off',...
    'Position',[MainWinPos(1)+MainWinPos(3)/4 MainWinPos(2)+MainWinPos(4)/5 MainWinPos(3)/2 MainWinPos(4)*2/3],...
    'Resize','off',...
    'HandleVisibility','on',...
    'Tag','ToolsHelpWindow',...
    'UserData',userData);

if strcmp(ImageDataOrHelp,'Modules')
    set(ToolsHelpWindowHandle,'name','Modules Help');
    TextString = sprintf(['To view help for individual ' ImageDataOrHelp ', choose one below.\nYou can add your own tools by writing Matlab m-files, placing them in the ', ImageDataOrHelp, ' folder, and restarting CellProfiler.']);
elseif strcmp(ImageDataOrHelp,'Image Tools')
    set(ToolsHelpWindowHandle,'name','Image Tools Help');
    TextString = sprintf(['To view help for individual ' ImageDataOrHelp ', choose one below.\nYou can add your own tools by writing Matlab m-files, placing them in the ', ImageDataOrHelp, ' folder, and restarting CellProfiler.']);
elseif strcmp(ImageDataOrHelp,'Data Tools')
    set(ToolsHelpWindowHandle,'name','Data Tools Help');
    TextString = sprintf(['To view help for individual ' ImageDataOrHelp ', choose one below.\nYou can add your own tools by writing Matlab m-files, placing them in the ', ImageDataOrHelp, ' folder, and restarting CellProfiler.']);
elseif strcmp(ImageDataOrHelp,'Help')
    set(ToolsHelpWindowHandle,'name','General Help');

    [svn_ver_char, CompiledOrNot] = get_svn_info(handles);

    TextString = sprintf(['CellProfiler version 1.0.' svn_ver_char  '\n' CompiledOrNot '\n\nPlease choose specific help below:']);
elseif strcmp(ImageDataOrHelp,'Getting Started')
    set(ToolsHelpWindowHandle,'name','Getting Started');
    
    [svn_ver_char, CompiledOrNot] = get_svn_info(handles);
    
    TextString = sprintf(['CellProfiler version 1.0.' svn_ver_char ' \n' CompiledOrNot '\n\nPlease choose specific help below:']);
end

FontSize = handles.Preferences.FontSize;

choosetext = uicontrol(...
    'Parent',ToolsHelpWindowHandle,...
    'BackGroundColor', Color,...
    'Units','normalized',...
    'Position',[0.10 0.6 0.80 0.31],...
    'String',TextString,...
    'Style','text',...
    'FontSize',FontSize,...
    'Tag','informtext'); %#ok Ignore MLint

listboxcallback = 'ToolsHelpWindowHandle = findobj(''tag'',''ToolsHelpWindow''); if (strcmpi(get(ToolsHelpWindowHandle,''SelectionType''),''open'')==1) toolsbox = findobj(''tag'',''toolsbox''); global toolsChoice; toolsChoice = get(toolsbox,''value''); close(ToolsHelpWindowHandle); end; clear ToolsHelpWindowHandle toolsChoice toolsbox';
toolsbox = uicontrol(...
    'Parent',ToolsHelpWindowHandle,...
    'Units','normalized',...
    'backgroundColor',Color,...
    'Position',[0.20 0.18 0.65 0.464],...
    'String',ToolsCellArray,...
    'Style','listbox',...
    'Callback',listboxcallback,...
    'Value',1,...
    'Tag','toolsbox',...
    'FontSize',FontSize,...
    'Behavior',get(0,'defaultuicontrolBehavior')); %#ok Ignore MLint

okbutton = uicontrol(...
    'Parent',ToolsHelpWindowHandle,...
    'BackGroundColor', Color,...
    'Units','normalized',...
    'Callback',okbuttoncallback,...
    'Position',[0.30 0.077 0.2 0.06],...
    'String','Ok',...
    'Tag','okbutton'); %#ok Ignore MLint

cancelbutton = uicontrol(...
    'Parent',ToolsHelpWindowHandle,...
    'BackGroundColor', Color,...
    'Units','normalized',...
    'Callback',cancelbuttoncallback,...
    'Position',[0.55 0.077 0.2 0.06],...
    'String','Cancel',...
    'Tag','cancelbutton'); %#ok Ignore MLint

toolsChoice = 0; %%% Makes sure toolsChoice indicates no selection
%%% in case user closes window using x icon or Close Windows button
uiwait(ToolsHelpWindowHandle);

if(toolsChoice ~= 0)
    if strcmp(ImageDataOrHelp,'Modules')
        HelpText = handles.Current.ModulesHelp{toolsChoice};
        CPtextdisplaybox(HelpText,'CellProfiler Modules Help');
    elseif strcmp(ImageDataOrHelp,'Image Tools')
        HelpText = handles.Current.ImageToolHelp{toolsChoice};
        CPtextdisplaybox(HelpText,'CellProfiler Image Tools Help');
    elseif strcmp(ImageDataOrHelp,'Data Tools')
        HelpText = handles.Current.DataToolHelp{toolsChoice};
        CPtextdisplaybox(HelpText,'CellProfiler Data Tools Help');
    elseif strcmp(ImageDataOrHelp,'Help')
        HelpText = handles.Current.Help{toolsChoice};
        CPtextdisplaybox(HelpText,'CellProfiler Help');
    elseif strcmp(ImageDataOrHelp,'Getting Started')
        HelpText = handles.Current.GS{toolsChoice};
        CPtextdisplaybox(HelpText,'CellProfiler Help');
    end
end
clear toolsChoice;

%%% END OF HELP HELP HELP HELP HELP HELP BUTTONS %%%



%%% This function is currently never called/used.
function DownloadModules_Callback(hObject, eventdata, handles)

Answer = CPquestdlg('Are you sure you want to over-write all your existing CellProfiler files?','Overwrite Files?','Yes','No','No');
if strcmp(Answer,'Yes')
    CPPath = which('CellProfiler.m');
    if ispc
        CPPath = CPPath(1:max(strfind(CPPath,'\'))-1);
    else
        CPPath = CPPath(1:max(strfind(CPPath,'/'))-1);
    end
    ModulePathName = fullfile(CPPath, 'Modules');
    DataPathName = fullfile(CPPath, 'DataTools');
    ImagePathName = fullfile(CPPath, 'ImageTools');

    try
        Modules = urlread('http://jura.wi.mit.edu/cellprofiler/updates/Modules/ModuleList.txt');
        DataTools = urlread('http://jura.wi.mit.edu/cellprofiler/updates/DataTools/DataList.txt');
        ImageTools = urlread('http://jura.wi.mit.edu/cellprofiler/updates/ImageTools/ImageList.txt');
    catch
        CPwarndlg('The file containing the list of modules could not be downloaded.');
        return;
    end

    p=1;
    while true
        [t,y] = strtok(Modules(p:end));
        try
            urlwrite(['http://jura.wi.mit.edu/cellprofiler/updates/Modules/',t],fullfile(ModulePathName,t));
        catch
            CPwarndlg([t,' could not be downloaded.']);
        end
        if isempty(y)
            break
        end
        p = p + length(t) + 1;
    end

    p=1;
    while true
        [t,y] = strtok(DataTools(p:end));
        try
            urlwrite(['http://jura.wi.mit.edu/cellprofiler/updates/DataTools/',t],fullfile(DataPathName,t));
        catch
            CPwarndlg([t,' could not be downloaded.']);
        end
        if isempty(y)
            break
        end
        p = p + length(t) + 1;
    end

    p=1;
    while true
        [t,y] = strtok(ImageTools(p:end));
        try
            urlwrite(['http://jura.wi.mit.edu/cellprofiler/updates/ImageTools/',t],fullfile(ImagePathName,t));
        catch
            CPwarndlg([t,' could not be downloaded.']);
        end
        if isempty(y)
            break
        end
        p = p + length(t) + 1;
    end

    try
        urlwrite('http://jura.wi.mit.edu/cellprofiler/updates/CellProfiler.m',fullfile(CPPath,'CellProfiler.m'));
    catch
        CPwarndlg('CellProfiler.m could not be downloaded.');
    end

    CPhelpdlg('Update Complete!');
end

function ReportBugs_Callback(hObject, eventdata, handles)

appdata.lastValidTag = 'figure1';
appdata.GUIDELayoutEditor = [];

ReportBugsWindow = figure(...
    'Units','characters',...
    'Color',[0.7 0.7 0.9],...
    'Colormap',[0 0 0.5625;0 0 0.625;0 0 0.6875;0 0 0.75;0 0 0.8125;0 0 0.875;0 0 0.9375;0 0 1;0 0.0625 1;0 0.125 1;0 0.1875 1;0 0.25 1;0 0.3125 1;0 0.375 1;0 0.4375 1;0 0.5 1;0 0.5625 1;0 0.625 1;0 0.6875 1;0 0.75 1;0 0.8125 1;0 0.875 1;0 0.9375 1;0 1 1;0.0625 1 1;0.125 1 0.9375;0.1875 1 0.875;0.25 1 0.8125;0.3125 1 0.75;0.375 1 0.6875;0.4375 1 0.625;0.5 1 0.5625;0.5625 1 0.5;0.625 1 0.4375;0.6875 1 0.375;0.75 1 0.3125;0.8125 1 0.25;0.875 1 0.1875;0.9375 1 0.125;1 1 0.0625;1 1 0;1 0.9375 0;1 0.875 0;1 0.8125 0;1 0.75 0;1 0.6875 0;1 0.625 0;1 0.5625 0;1 0.5 0;1 0.4375 0;1 0.375 0;1 0.3125 0;1 0.25 0;1 0.1875 0;1 0.125 0;1 0.0625 0;1 0 0;0.9375 0 0;0.875 0 0;0.8125 0 0;0.75 0 0;0.6875 0 0;0.625 0 0;0.5625 0 0],...
    'IntegerHandle','off',...
    'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
    'MenuBar','none',...
    'Name','Report Bugs',...
    'NumberTitle','off',...
    'PaperPosition',get(0,'defaultfigurePaperPosition'),...
    'Position',[103.8 32.2115384615385 81.8333333333333 29.25],...
    'Resize','off',...
    'HandleVisibility','callback',...
    'Tag','Report Bugs Window',...
    'UserData',[],...
    'Behavior',get(0,'defaultfigureBehavior'),...
    'Visible','on',...
    'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'edit1';

ReportBugsWindowHandles.MailBody = uicontrol(...
    'Parent',ReportBugsWindow,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'FontSize','fontsize',handles.Preferences.FontSize,...
    'Position',[2.83333333333333 4.75 75.1666666666667 20.0833333333333],...
    'String','',...
    'HorizontalAlignment','left',...
    'Style','edit',...
    'Max',1000,...
    'Min',0,...
    'CreateFcn', {@local_CreateFcn, '', appdata} ,...
    'Tag','edit1',...
    'Behavior',get(0,'defaultuicontrolBehavior'));

appdata = [];
appdata.lastValidTag = 'edit2';

ReportBugsWindowHandles.MailSubject = uicontrol(...
    'Parent',ReportBugsWindow,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'FontSize','fontsize',handles.Preferences.FontSize,...
    'Position',[15.5 26.0833333333333 62.5 1.91666666666667],...
    'String','',...
    'HorizontalAlignment','left',...
    'Style','edit',...
    'CreateFcn', {@local_CreateFcn, '', appdata} ,...
    'Tag','edit2',...
    'Behavior',get(0,'defaultuicontrolBehavior'));

appdata = [];
appdata.lastValidTag = 'text1';

uicontrol(...
    'Parent',ReportBugsWindow,...
    'Units','characters',...
    'BackgroundColor',[0.7 0.7 0.9],...
    'FontName','Helvetica',...
    'FontSize','fontsize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[2.5 26.3333333333333 12.3333333333333 1.5],...
    'String','Subject:',...
    'Style','text',...
    'Tag','text1',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'pushbutton2';

uicontrol(...
    'Parent',ReportBugsWindow,...
    'Units','characters',...
    'BackgroundColor',[0.7 0.7 0.9],...
    'Callback','close ''Report Bugs''',...
    'FontSize','fontsize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[61.8333333333333 1.16666666666667 16.1666666666667 1.83333333333333],...
    'String','Cancel',...
    'Tag','Cancel',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'pushbutton1';

ReportBugsWindowHandles.Submit = uicontrol(...
    'Parent',ReportBugsWindow,...
    'Units','characters',...
    'BackgroundColor',[0.7 0.7 0.9],...
    'Callback','try;setpref(''Internet'',''SMTP_Server'',''mail'');fig=guidata(gcf);sendmail(''cellprofiler@csail.mit.edu'',get(fig.MailSubject,''String''),get(fig.MailBody,''String''));CPmsgbox(''Bug report successfuly submitted.'');catch;CPwarndlg(''Error while sending mail'');end;',...
    'CData',[],...
    'FontName','Helvetica',...
    'FontSize','fontsize',handles.Preferences.FontSize,...
    'FontWeight','bold',...
    'Position',[44.1666666666667 1.16666666666667 16.1666666666667 1.83333333333333],...
    'String','Submit Report',...
    'Tag','Submit Report',...
    'UserData',[],...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} );

guidata(ReportBugsWindow, ReportBugsWindowHandles);

function OpenImage_Callback(hObject, eventdata, handles)
% hObject    handle to OpenImage (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
OpenNewImageFile(handles);

function LoadPreferences_Callback(hObject,eventdata,handles)
%%% This function will load settings which have been saved from the Set
%%% Preferences window

[SettingsFileName, SettingsPathname] = CPuigetfile('*.mat','Choose a preferences file',matlabroot);
if isequal(SettingsFileName,0) || isequal(SettingsPathname,0)
    return
else
    try
        load(fullfile(SettingsPathname,SettingsFileName));
        EnteredPreferences = SavedPreferences;
        clear SavedPreferences
    catch
        CPwarndlg('The file chosen does not exist');
        return
    end
end
LoadPreferences_Helper(hObject,eventdata,handles,EnteredPreferences);

function LoadPreferences_Helper(hObject,eventdata,handles,EnteredPreferences)

if exist('EnteredPreferences','var') &&  ~isempty(EnteredPreferences)
    %%% Retrieves the data that the user entered and saves it to the
    %%% handles structure.
    handles.Preferences.PixelSize = EnteredPreferences.PixelSize;
    handles.Preferences.FontSize  = str2double(EnteredPreferences.FontSize);
    handles.Preferences.DefaultImageDirectory = EnteredPreferences.DefaultImageDirectory;
    handles.Preferences.DefaultOutputDirectory = EnteredPreferences.DefaultOutputDirectory;
    handles.Preferences.DefaultModuleDirectory = EnteredPreferences.DefaultModuleDirectory;
    handles.Preferences.IntensityColorMap = EnteredPreferences.IntensityColorMap;
    handles.Preferences.LabelColorMap = EnteredPreferences.LabelColorMap;
    handles.Preferences.StripPipeline = EnteredPreferences.StripPipeline;
    handles.Preferences.SkipErrors = EnteredPreferences.SkipErrors;
    try
        handles.Preferences.DisplayModeValue = EnteredPreferences.DisplayModeValue;
    catch
        handles.Preferences.DisplayModeValue = 1;
    end
    clear global EnteredPreferences
    
    %%% Now that handles.Preferences.(5 different variables) has been filled
    %%% in, the handles.Current values and edit box displays are set.
    handles.Current.DefaultOutputDirectory = handles.Preferences.DefaultOutputDirectory;
    handles.Current.DefaultImageDirectory = handles.Preferences.DefaultImageDirectory;
    handles.Settings.PixelSize = handles.Preferences.PixelSize;
    
    %%% (No need to set a current module directory or display it in an
    %%% edit box; the one stored in preferences is the only one ever
    %%% used).
    set(handles.PixelSizeEditBox,'String',handles.Preferences.PixelSize)
    set(handles.DefaultOutputDirectoryEditBox,'String',handles.Preferences.DefaultOutputDirectory)
    set(handles.DefaultImageDirectoryEditBox,'String',handles.Preferences.DefaultImageDirectory)
    %%% Retrieves the list of image file names from the chosen directory,
    %%% stores them in the handles structure, and displays them in the
    %%% filenameslistbox, by faking a click on the DefaultImageDirectoryEditBox.
    handles = DefaultImageDirectoryEditBox_Callback(hObject, eventdata, handles);
    %%% Adds the default module directory to Matlab's search path.
    if ~isdeployed
        addpath(handles.Preferences.DefaultModuleDirectory)
    end
    
    %%% Set new fontsize...
    names = fieldnames(handles);
    for k = 1:length(names)
        if ishandle(handles.(names{k}))
            set(findobj(handles.(names{k}),'-property','FontSize'),'FontSize',handles.Preferences.FontSize,'FontName','helvetica');
        end
    end
    %%% ... and make it the new default.
    set(0, 'defaultuicontrolfontsize', handles.Preferences.FontSize);
    set(0, 'defaultuicontrolfontname', 'helvetica');
    
    %%% Updates the handles structure to incorporate all the changes.
    guidata(gcbo, handles);
end

function ZipFiles_Callback(hObject, eventdata, handles)
ListOfThingsToSave = {'CPsubfunctions/CPsplash.jpg' ...
    'CPsubfunctions/*.m' 'CPsubfunctions/graphAnalysisToolbox-1.0/*.m' ...
    'CPsubfunctions/CPljosaprobseg.*' ...
    'DataTools/*.m' 'ImageTools/*.m' 'Modules/*.m' ...
    'Modules/IdentifySecPropagateSubfunction.*' 'Help/*.m' 'CellProfiler.m'};
if ispc
    for i=1:numel(ListOfThingsToSave)
        ListOfThingsToSave{i} = strrep(ListOfThingsToSave{i}, '/', '\');
    end
end
try
    ZipFileName = [handles.Current.DefaultOutputDirectory '/CellProfilerCode_',date,'.zip'];
    zip(ZipFileName,ListOfThingsToSave,handles.Current.CellProfilerPathname);
    CPmsgbox(['The files have been saved to ', ZipFileName, '.']);
catch
    CPhelpdlg(['The files could not be saved for some reason.  This could be because you do not have access to folder ' handles.Current.DefaultOutputDirectory '  Make sure you have access or you can change the default output directory by going to ''set preferences'' on the main menu.']);
end

% --- Executes just before AddModuleWindow_export is made visible.
function AddModuleWindow_OpeningFcn(hObject, eventdata, AddModuleWindowHandles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% AddModuleWindowHandles    structure with AddModuleWindowHandles and user data (see GUIDATA)
% varargin   command line arguments to AddModuleWindow_export (see VARARGIN)

% Choose default command line output for AddModuleWindow_export

% Update AddModuleWindowHandles structure
handles=guidata(hObject);
load_listbox(handles.Preferences.DefaultModuleDirectory,AddModuleWindowHandles);

% UIWAIT makes AddModuleWindow_export wait for user response (see UIRESUME)
% uiwait(AddModuleWindowHandles.figure1);

% --- Executes on selection change in PreProcessingListBox.
function AddModuleListBox_Callback(hObject, eventdata, AddModuleWindowHandles) %#ok
% hObject    handle to PreProcessingListBox (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% AddModuleWindowHandles    structure with AddModuleWindowHandles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns PreProcessingListBox contents as cell array
%        contents{get(hObject,'Value')} returns selected item from
%        PreProcessingListBox
if strcmp(get(gcf,'SelectionType'),'open')
    if(~isempty(get(AddModuleWindowHandles.ModulesListBox,'Value')))
        index_selected = get(AddModuleWindowHandles.ModulesListBox,'Value');
        file_list = get(AddModuleWindowHandles.ModulesListBox,'String');
    else
        return;
    end

    handles=guidata(AddModuleWindowHandles.figure1);
    if isdeployed
        filename = [file_list{index_selected} '.txt'];
    else
        filename = [file_list{index_selected} '.m'];
    end
    PutModuleInListBox(filename,handles.Preferences.DefaultModuleDirectory,guidata(AddModuleWindowHandles.figure1),0);
end

% --- Executes on button press in ModuleHelpButton.
function ModuleHelpButton_Callback(hObject, eventdata, AddModuleWindowHandles)
% hObject    handle to ModuleHelpButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% AddModuleWindowHandles    structure with AddModuleWindowHandles and user data (see GUIDATA)

if ~isempty(get(AddModuleWindowHandles.ModulesListBox,'Value'))
    index_selected = get(AddModuleWindowHandles.ModulesListBox,'Value');
    file_list = get(AddModuleWindowHandles.ModulesListBox,'String');
else
    CPwarndlg('You must highlight a module before attempting to get help for it!');
    return;
end
filename = file_list{index_selected};

if isdeployed
    handles = guidata(findobj('tag','figure1'));
    for i = 1:length(handles.Current.ModulesFilenames)
        if strmatch(filename,handles.Current.ModulesFilenames{i},'exact')
            Option = i - 1; % ModulesFilename has a heading entry and ModulesHelp does not
            break
        end
    end
    if ~isempty(Option)
        CPtextdisplaybox(handles.Current.ModulesHelp{Option},'CellProfiler image analysis module help');
    end
else
    CPtextdisplaybox(help(filename),'CellProfiler image analysis module help');
end

function BrowseButton_Callback(hObject, eventdata, AddModuleWindowHandles) %#ok Ignore MLint
% hObject    handle to PreProcessingListBox (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% AddModuleWindowHandles    empty - AddModuleWindowHandles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
handles = guidata(AddModuleWindowHandles.figure1);
Path = handles.Preferences.DefaultModuleDirectory;
if ~exist(Path,'dir')
    Path = cd;
end
[FileName PathName] = CPuigetfile('*.m','Choose an image analysis module',Path);
pause(.1);
figure(handles.figure1);
try
    figure(AddModuleWindowHandles.AddModuleWindow);
end
PutModuleInListBox(FileName,PathName,handles,0);

% --- Creates and returns a handle to the GUI figure.
function AddModuleWindowHandles = AddModuleWindow_LayoutFcn(figure1)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

AddModuleWindowHandles.figure1=figure1;

handles=guidata(figure1);
font=handles.Preferences.FontSize;

appdata = [];
appdata.GUIDEOptions = struct(...
    'active_h', [], ...
    'taginfo', struct(...
    'figure', 2, ...
    'listbox', 6, ...
    'text', 12, ...
    'pushbutton', 6), ...
    'override', 0, ...
    'release', 13, ...
    'resize', 'none', ...
    'accessibility', 'callback', ...
    'mfile', 1, ...
    'callbacks', 1, ...
    'singleton', 1, ...
    'syscolorfig', 1, ...
    'blocking', 0);
appdata.lastValidTag = 'AddModuleWindow';
appdata.GUIDELayoutEditor = [];

set(figure1,'Units','characters');
set(findobj('Tag','ModulePipelineListBox'),'Units','characters');
pos1=get(figure1,'Position');
pos2=get(findobj('Tag','ModulePipelineListBox'),'Position');
set(figure1,'Units','pixels');
set(findobj('Tag','ModulePipelineListBox'),'Units','pixels');

userData.Application = 'CellProfiler';

AddModuleWindow = figure(...
    'Units','characters',...
    'Color',[0.7 0.7 0.9],...
    'Colormap',[0 0 0.5625;0 0 0.625;0 0 0.6875;0 0 0.75;0 0 0.8125;0 0 0.875;0 0 0.9375;0 0 1;0 0.0625 1;0 0.125 1;0 0.1875 1;0 0.25 1;0 0.3125 1;0 0.375 1;0 0.4375 1;0 0.5 1;0 0.5625 1;0 0.625 1;0 0.6875 1;0 0.75 1;0 0.8125 1;0 0.875 1;0 0.9375 1;0 1 1;0.0625 1 1;0.125 1 0.9375;0.1875 1 0.875;0.25 1 0.8125;0.3125 1 0.75;0.375 1 0.6875;0.4375 1 0.625;0.5 1 0.5625;0.5625 1 0.5;0.625 1 0.4375;0.6875 1 0.375;0.75 1 0.3125;0.8125 1 0.25;0.875 1 0.1875;0.9375 1 0.125;1 1 0.0625;1 1 0;1 0.9375 0;1 0.875 0;1 0.8125 0;1 0.75 0;1 0.6875 0;1 0.625 0;1 0.5625 0;1 0.5 0;1 0.4375 0;1 0.375 0;1 0.3125 0;1 0.25 0;1 0.1875 0;1 0.125 0;1 0.0625 0;1 0 0;0.9375 0 0;0.875 0 0;0.8125 0 0;0.75 0 0;0.6875 0 0;0.625 0 0;0.5625 0 0],...
    'DockControls','off',...
    'IntegerHandle','off',...
    'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
    'KeyPressFcn','if strcmp(get(gcf,''CurrentCharacter''),''''), close(gcf), end;',...
    'MenuBar','none',...
    'Name','AddModule',...
    'NumberTitle','off',...
    'PaperPosition',get(0,'defaultfigurePaperPosition'),...
    'Position',[pos1(1)+pos2(1)+pos2(3) pos1(2)+pos2(2) 88 29],...
    'Resize','off',...
    'HandleVisibility','callback',...
    'Tag','AddModuleWindow',...
    'UserData',userData,...
    'Behavior',get(0,'defaultfigureBehavior'),...
    'Visible','on',...
    'CreateFcn', {@local_CreateFcn, '', appdata} );

AddModuleWindowHandles.AddModuleWindow=AddModuleWindow;

LoadListCallback = [...
    'fig=guidata(gcf);'...
    'val=get(fig.ModuleCategoryListBox,''Value'');'...
    'if size(val,2) > 1;'...
    'val = val(1);'...
    'end,'...
    'set(fig.ModuleCategoryListBox,''Value'',val);'...
    'set(fig.ModulesListBox,''value'',1);'...
    'set(fig.ModulesListBox,''string'',fig.ModuleStrings{val});'...
    'clear fig val'];

appdata = [];
appdata.lastValidTag = 'ModuleCategoryListBox';

AddModuleWindowHandles.ModuleCategoryListBox = uicontrol(...
    'Parent',AddModuleWindow,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'Callback',LoadListCallback,...
    'FontSize',font,...
    'FontName','Helvetica',...
    'Interruptible','off',...
    'Max',2,...
    'Position',[1 18 29 8],...
    'String',{  'Listbox' },...
    'Style','listbox',...
    'Value',1,...
    'Tag','ModuleCategoryListBox',...
    'Behavior',get(0,'defaultuicontrolBehavior'));

appdata = [];
appdata.lastValidTag = 'ModuleCategoryListBoxText';

AddModuleWindowHandles.ModuleCategoryListBoxText = uicontrol(...
    'Parent',AddModuleWindow,...
    'Units','characters',...
    'BackgroundColor',[.7 .7 .9],...
    'FontSize',font,...
    'FontName','Helvetica',...
    'Interruptible','off',...
    'Position',[1 26 29 2],...
    'String','Module Categories',...
    'Style','text',...
    'Tag','ModuleCategoryListBoxText',...
    'Behavior',get(0,'defaultuicontrolBehavior'));

appdata = [];
appdata.lastValidTag = 'ModulesListBox';

AddModuleWindowHandles.ModulesListBox = uicontrol(...
    'Parent',AddModuleWindow,...
    'Units','characters',...
    'BackgroundColor',[1 1 1],...
    'Callback','fig=guidata(gcf);val=get(fig.ModulesListBox,''Value'');if (~isempty(val)); set(fig.ModulesListBox,''Value'',val(1));end;CellProfiler(''AddModuleListBox_Callback'',gcbo,[],guidata(gcf));clear val fig',...
    'FontSize',font,...
    'FontName','Helvetica',...
    'Interruptible','off',...
    'Max',2,...
    'Position',[34 1 50 27],...
    'String',{  'Listbox' },...
    'Style','listbox',...
    'Value',1,...
    'Tag','ModulesListBox',...
    'Behavior',get(0,'defaultuicontrolBehavior'));

appdata = [];
appdata.lastValidTag = 'HelpButton';

AddModuleWindowHandles.HelpButton = uicontrol(...
    'Parent',AddModuleWindow,...
    'Units','characters',...
    'BackgroundColor',[0.701960784313725 0.701960784313725 0.901960784313726],...
    'Callback','handles = guidata(findobj(''tag'',''figure1''));for i = 1:length(handles.Current.GSFilenames), if strfind(handles.Current.GSFilenames{i},''GettingStarted''), Option = i;end,end,if ~isempty(Option),CPtextdisplaybox(handles.Current.GS{Option-1},''Getting Started in CellProfiler'');end;clear ans handles Option i;',...
    'FontSize',font,...
    'FontName','Helvetica',...
    'Position',[1 6 29 2],...
    'String','? Getting Started',...
    'Tag','HelpButton',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'ModuleHelpButton';

AddModuleWindowHandles.ModuleFunctionPanel = uipanel(...
    'Parent',AddModuleWindow,...
    'Title','For Selected Module',...
    'Units','characters',...
    'FontSize',font,...
    'BackgroundColor',[.7 .7 .9],...
    'Position',[.5 10 31.5 6.5],...
    'Tag','ModuleFunctionPanel',...
    'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'ModuleFunctionPanel';

AddModuleWindowHandles.ModuleHelpButton = uicontrol(...
    'Parent',AddModuleWindow,...
    'Units','characters',...
    'BackgroundColor',[0.701960784313725 0.701960784313725 0.901960784313726],...
    'Callback','CellProfiler(''ModuleHelpButton_Callback'',gcbo,[],guidata(gcf))',...
    'FontSize',font,...
    'FontName','Helvetica',...
    'Position',[1.5 10.5 29 2],...
    'String','? Module Help',...
    'Tag','ModuleHelpButton',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'BrowseButton';

AddModuleWindowHandles.BrowseButton = uicontrol(...
    'Parent',AddModuleWindow,...
    'Units','characters',...
    'BackgroundColor',[0.701960784313725 0.701960784313725 0.901960784313726],...
    'Callback','CellProfiler(''BrowseButton_Callback'',gcbo,[],guidata(gcf))',...
    'FontSize',font,...
    'FontName','Helvetica',...
    'Position',[1 3.5 29 2],...
    'String','Browse...',...
    'Tag','BrowseButton',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'AddModuleButton';

AddModuleWindowHandles.AddModuleButton = uicontrol(...
    'Parent',AddModuleWindow,...
    'Units','characters',...
    'BackgroundColor',[0.701960784313725 0.701960784313725 0.901960784313726],...
    'Callback','set(gcf,''SelectionType'',''open'');CellProfiler(''AddModuleListBox_Callback'',gcbo,[],guidata(gcf))',...
    'FontSize',font,...
    'FontName','Helvetica',...
    'Position',[1.5 13 29 2],...
    'String','+ Add To Pipeline',...
    'Tag','AddModuleButton',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'DoneButton';

AddModuleWindowHandles.DoneButton = uicontrol(...
    'Parent',AddModuleWindow,...
    'Units','characters',...
    'BackgroundColor',[0.701960784313725 0.701960784313725 0.901960784313726],...
    'Callback','close(gcf)',...
    'FontSize',font,...
    'FontName','Helvetica',...
    'Position',[1 1 29 2],...
    'String','Done',...
    'Tag','DoneButton',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} );

guidata(AddModuleWindow,AddModuleWindowHandles);

% --- Set application data first then calling the CreateFcn.
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
    names = fieldnames(appdata);
    for i=1:length(names)
        name = char(names(i));
        setappdata(hObject, name, getfield(appdata,name));
    end
end

if ~isempty(createfcn)
    eval(createfcn);
end


function load_listbox(dir_path,AddModuleWindowHandles)
%%% Do not remove the BEGIN or END lines, below.  They are used by CompileWizard.m.
%%% load_listbox code (replace function in CellProfiler.m)

CategoryList = {'File Processing' 'Image Processing' 'Object Processing' 'Measurement' 'Other'};
FileProcessingFiles = {'CreateBatchFiles' 'ExportToDatabase' 'ExportToExcel' 'GroupMovieFrames' 'LoadImageDirectory' 'LoadImages' 'LoadSingleImage' 'LoadText' 'RenameOrRenumberFiles' 'Restart' 'SaveImages' 'SplitOrSpliceMovie' };
PreProcessingFiles = {'Align' 'ApplyThreshold' 'ColorToGray' 'Combine' 'CorrectIllumination_Apply' 'CorrectIllumination_Calculate' 'Crop' 'DICTransform' 'DifferentiateStains' 'FindEdges' 'FlagImageForQC' 'FlipAndRotate' 'GrayToColor' 'ImageMath' 'InvertForPrinting' 'MakeProjection' 'MaskImage' 'Morph' 'OverlayOutlines' 'PlaceAdjacent' 'RescaleIntensity' 'Resize' 'SmoothOrEnhance' 'SubtractBackground' 'Tile' };
ObjectProcessingFiles = {'ClassifyObjects' 'ClassifyObjectsByTwoMeasurements' 'ConvertToImage' 'EditObjectsManually' 'Exclude' 'ExpandOrShrink' 'FilterByObjectMeasurement' 'IdentifyObjectsInGrid' 'IdentifyPrimAutomatic' 'IdentifyPrimLoG' 'IdentifyPrimManual' 'IdentifySecondary' 'IdentifyTertiarySubregion' 'KeepLargestObject' 'RelabelObjects' 'Relate' 'TrackObjects' };
MeasurementFiles = {'CalculateImageOverlap' 'CalculateMath' 'CalculateStatistics' 'FileNameMetadata' 'MeasureCorrelation' 'MeasureImageAreaOccupied' 'MeasureImageGranularity' 'MeasureImageIntensity' 'MeasureImageQuality' 'MeasureObjectAreaShape' 'MeasureObjectIntensity' 'MeasureObjectNeighbors' 'MeasureRadialDistribution' 'MeasureTexture' };
OtherFiles = {'CreateWebPage' 'DefineGrid' 'DisplayDataOnImage' 'DisplayGridInfo' 'DisplayHistogram' 'DisplayImageHistogram' 'DisplayMeasurement' 'LabelImages' 'PauseCellProfiler' 'SendEmail' 'SpeedUpCellProfiler' };
set(AddModuleWindowHandles.ModuleCategoryListBox,'String',CategoryList,'Value',[])
set(AddModuleWindowHandles.ModulesListBox,'String',FileProcessingFiles,'Value',[])
AddModuleWindowHandles.ModuleStrings{1} = FileProcessingFiles;
AddModuleWindowHandles.ModuleStrings{2} = PreProcessingFiles;
AddModuleWindowHandles.ModuleStrings{3} = ObjectProcessingFiles;
AddModuleWindowHandles.ModuleStrings{4} = MeasurementFiles;
AddModuleWindowHandles.ModuleStrings{5} = OtherFiles;
guidata(AddModuleWindowHandles.AddModuleWindow,AddModuleWindowHandles);

%%% Compiler: END load_listbox
%%% Do not remove the BEGIN or END lines, above.  They are used by CompileWizard.m.

function c = file_in_category(filename, category)
h = help(filename);
c = strfind(h, ['Category: ' category]);


% --- Creates and returns a handle to the GUI figure.
function h1 = CellProfiler_LayoutFcn(policy)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

persistent hsingleton;
if strcmpi(policy, 'reuse') & ishandle(hsingleton) %#ok Ignore MLint
    h1 = hsingleton;
    return;
end

appdata = [];
appdata.GUIDEOptions = struct(...
    'active_h', 187.003662109375, ...
    'taginfo', struct(...
    'figure', 2, ...
    'listbox', 13, ...
    'popupmenu', 12, ...
    'frame', 38, ...
    'edit', 89, ...
    'pushbutton', 113, ...
    'text', 186, ...
    'axes', 2, ...
    'uipanel', 5, ...
    'slider', 4), ...
    'override', 1, ...
    'release', 13, ...
    'resize', 'none', ...
    'accessibility', 'callback', ...
    'mfile', 1, ...
    'callbacks', 1, ...
    'singleton', 1, ...
    'syscolorfig', 0, ...
    'blocking', 0);
appdata.lastValidTag = 'figure1';
appdata.UsedByGUIData_m = struct(...
    'AlgorithmHighlighted', 'No Algorithms Loaded');
appdata.GUIDELayoutEditor = [];

h1 = figure(...
    'Color',[0.701960784313725 0.701960784313725 0.701960784313725],...
    'Colormap',[0 0 0.5625;0 0 0.625;0 0 0.6875;0 0 0.75;0 0 0.8125;0 0 0.875;0 0 0.9375;0 0 1;0 0.0625 1;0 0.125 1;0 0.1875 1;0 0.25 1;0 0.3125 1;0 0.375 1;0 0.4375 1;0 0.5 1;0 0.5625 1;0 0.625 1;0 0.6875 1;0 0.75 1;0 0.8125 1;0 0.875 1;0 0.9375 1;0 1 1;0.0625 1 1;0.125 1 0.9375;0.1875 1 0.875;0.25 1 0.8125;0.3125 1 0.75;0.375 1 0.6875;0.4375 1 0.625;0.5 1 0.5625;0.5625 1 0.5;0.625 1 0.4375;0.6875 1 0.375;0.75 1 0.3125;0.8125 1 0.25;0.875 1 0.1875;0.9375 1 0.125;1 1 0.0625;1 1 0;1 0.9375 0;1 0.875 0;1 0.8125 0;1 0.75 0;1 0.6875 0;1 0.625 0;1 0.5625 0;1 0.5 0;1 0.4375 0;1 0.375 0;1 0.3125 0;1 0.25 0;1 0.1875 0;1 0.125 0;1 0.0625 0;1 0 0;0.9375 0 0;0.875 0 0;0.8125 0 0;0.75 0 0;0.6875 0 0;0.625 0 0;0.5625 0 0],...
    'DockControls','off',...
    'IntegerHandle','off',...
    'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
    'MenuBar','none',...
    'Name','CellProfiler',...
    'NumberTitle','off',...
    'PaperPosition',get(0,'defaultfigurePaperPosition'),...
    'Position',[428   295   824   460],...
    'Renderer',get(0,'defaultfigureRenderer'),...
    'RendererMode','manual',...
    'Resize','off',...
    'HandleVisibility','callback',...
    'Tag','figure1',...
    'UserData',[],...
    'Behavior',get(0,'defaultfigureBehavior'),...
    'Visible','off',...
    'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'toppanel';

h2 = uipanel(...
    'Parent',h1,...
    'Units','pixels',...
    'BorderType','none',...
    'ForegroundColor',[0.698039215686274 0.698039215686274 0.898039215686275],...
    'Tag','toppanel',...
    'UserData',[],...
    'Behavior',get(0,'defaultuipanelBehavior'),...
    'Clipping','on',...
    'BackgroundColor',[.7 .7 .9],...
    'Position',[0 108 824 354],...
    'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'CloseFigureButton';

h3 = uicontrol(...
    'Parent',h2,...
    'BackgroundColor',[.7 .7 .9],...
    'Callback','CellProfiler(''CloseFigureButton_Callback'',gcbo,[],guidata(gcbo))',...
    'CData',[],...
    'FontWeight','bold',...
    'Position',[125 18 90 20],...
    'String','Close Figure',...
    'Tag','CloseFigureButton',...
    'UserData',[],...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'Visible','off',...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'OpenFigureButton';

h4 = uicontrol(...
    'Parent',h2,...
    'BackgroundColor',[.7 .7 .9],...
    'Callback','CellProfiler(''OpenFigureButton_Callback'',gcbo,[],guidata(gcbo))',...
    'CData',[],...
    'FontWeight','bold',...
    'Position',[25 18 90 20],...
    'String','Open Figure',...
    'Tag','OpenFigureButton',...
    'UserData',[],...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'Visible','off',...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'IndividualModulesText';

h5 = uicontrol(...
    'Parent',h2,...
    'BackgroundColor',[.7 .7 .9],...
    'CData',[],...
    'FontWeight','bold',...
    'HorizontalAlignment','right',...
    'Position',[16 19 118 14],...
    'String','Adjust modules:',...
    'Style','text',...
    'Tag','IndividualModulesText',...
    'UserData',[],...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'AddModule';

h6 = uicontrol(...
    'Parent',h2,...
    'BackgroundColor',[.7 .7 .9],...
    'Callback','CellProfiler(''AddModule_Callback'',gcbo,[],guidata(gcbo))',...
    'CData',[],...
    'FontWeight','bold',...
    'Position',[137 16 18 20],...
    'String','+',...
    'Tag','AddModule',...
    'UserData',[],...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint
appdata = [];
appdata.lastValidTag = 'RemoveModule';

h7 = uicontrol(...
    'Parent',h2,...
    'BackgroundColor',[.7 .7 .9],...
    'Callback','CellProfiler(''RemoveModule_Callback'',gcbo,[],guidata(gcbo))',...
    'FontWeight','bold',...
    'Position',[158 16 18 20],...
    'String','-',...
    'Tag','RemoveModule',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'MoveUpButton';

h8 = uicontrol(...
    'Parent',h2,...
    'BackgroundColor',[.7 .7 .9],...
    'Callback','CellProfiler(''MoveUpButton_Callback'',gcbo,[],guidata(gcbo))',...
    'CData',[],...
    'Position',[179 16 18 20],...
    'String','^',...
    'Tag','MoveUpButton',...
    'UserData',[],...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'MoveDownButton';

h9 = uicontrol(...
    'Parent',h2,...
    'BackgroundColor',[.7 .7 .9],...
    'Callback','CellProfiler(''MoveDownButton_Callback'',gcbo,[],guidata(gcbo))',...
    'CData',[],...
    'Position',[200 16 18 20],...
    'String','v',...
    'Tag','MoveDownButton',...
    'UserData',[],...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'ModulePipelineListBox';
mplb_context_menu=uicontextmenu('Parent',h1);
uimenu(mplb_context_menu,'Label','Module help','Callback','CellProfiler(''IndividualModuleHelp_Callback'',gcbo,[],guidata(gcbo))');
uimenu(mplb_context_menu,'Label','Module notes','Callback','CellProfiler(''ModuleNotes_Callback'',gcbo,[],guidata(gcbo))');
h10 = uicontrol(...
    'Parent',h2,...
    'BackgroundColor',[1 1 1],...
    'Callback','CellProfiler(''ModulePipelineListBox_Callback'',gcbo,[],guidata(gcbo))',...
    'CData',[],...
    'Max',2,...
    'Position',[12 40 206 235],...
    'String',{  'No Modules Loaded' },...
    'Style','listbox',...
    'Value',1,...
    'Tag','ModulePipelineListBox',...
    'KeyPressFcn',@RemoveModuleByKeyPressFcn,...
    'UIContextMenu',mplb_context_menu,...
    'UserData',[],...
    'Behavior',get(0,'defaultuicontrolBehavior')); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'variablepanel';

h11 = uipanel(...
    'Parent',h2,...
    'Units','pixels',...
    'BorderType','none',...
    'ForegroundColor',[0.698039215686274 0.698039215686274 0.898039215686275],...
    'Tag','variablepanel',...
    'UserData',[],...
    'Behavior',get(0,'defaultuipanelBehavior'),...
    'Clipping','on',...
    'BackgroundColor',[.7 .7 .9],...
    'Position',[240 0 563 584],...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'slider1';

h12 = uicontrol(...
    'Parent',h2,...
    'BackgroundColor',[0.9 0.9 0.9],...
    'Callback','CellProfiler(''slider1_Callback'',gcbo,[],guidata(gcbo))',...
    'Position',[800 0 20 348],...
    'String',{  'Slider' },...
    'Style','slider',...
    'SliderStep',[0.02 0.1],...
    'Value',1,...
    'Tag','slider1',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'Visible','off'); %#ok Ignore MLint

% make scrollbars update dynamically
CPdynamizescrollbar(h12);

appdata = [];
appdata.lastValidTag = 'IndividualModuleHelp';

h13 = uicontrol(...
    'Parent',h2,...
    'BackgroundColor',[.7 .7 .9],...
    'Callback','CellProfiler(''IndividualModuleHelp_Callback'',gcbo,[],guidata(gcbo))',...
    'CData',[],...
    'FontWeight','bold',...
    'Position',[12 17 12 22],...
    'String','?',...
    'Tag','IndividualModuleHelp',...
    'UserData',[],...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'PipelineText';

if ispc
    h14height = 21.5;
else
    h14height = 23.5;
end

h14 = uicontrol(...
    'Parent',h2,...
    'Units','normalized',...
    'BackgroundColor',[.7 .7 .9],...
    'FontWeight','bold',...
    'Position',[0.11 0.8 0.15 0.15],...
    'String',{'CellProfiler';'image analysis';'pipeline:'},...
    'Style','text',...
    'Tag','PipelineText',...
    'HorizontalAlignment','center',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'bottompanel';

h15 = uipanel(...
    'Parent',h1,...
    'Units','pixels',...
    'ShadowColor',[.7 .7 .9],...
    'BorderType','none',...
    'Tag','bottompanel',...
    'UserData',[],...
    'Behavior',get(0,'defaultuipanelBehavior'),...
    'Clipping','on',...
    'BackgroundColor',[.7 .7 .9],...
    'Position',[0 0 824 108],...
    'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'AnalyzeImagesButton';

h16 = uicontrol(...
    'Parent',h15,...
    'BackgroundColor',[.7 .7 .9],...
    'Callback','CellProfiler(''AnalyzeImagesButton_Callback'',gcbo,[],guidata(gcbo))',...
    'FontWeight','bold',...
    'Position',[715 8 108 22],...
    'String','Analyze images',...
    'Tag','AnalyzeImagesButton',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'OutputFilenameHelp';

h17 = uicontrol(...
    'Parent',h15,...
    'BackgroundColor',[.7 .7 .9],...
    'Callback','handles = guidata(findobj(''tag'',''figure1''));for i = 1:length(handles.Current.HelpFilenames), if strfind(handles.Current.HelpFilenames{i},''HelpOutputFilename''), Option = i;end,end,if ~isempty(Option),CPtextdisplaybox(handles.Current.Help{Option-1},''CellProfiler Help'');end;clear ans handles Option i;',...
    'FontWeight','bold',...
    'Position',[683 8 12 22],...
    'String','?',...
    'Tag','OutputFilenameHelp',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'DefaultImageDirectoryText';

h18 = uicontrol(...
    'Parent',h15,...
    'BackgroundColor',[.7 .7 .9],...
    'CData',[],...
    'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Position',[235 58 100 35],...
    'String',{  'Default image'; 'folder:' },...
    'Style','text',...
    'Tag','DefaultImageDirectoryText',...
    'UserData',[],...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'BrowseImageDirectoryButton';

h19 = uicontrol(...
    'Parent',h15,...
    'HorizontalAlignment','left',...
    'BackgroundColor',[.7 .7 .9],...
    'Callback','CellProfiler(''BrowseImageDirectoryButton_Callback'',gcbo,[],guidata(gcbo))',...
    'FontWeight','bold',...
    'Position',[760 71 63 20],...
    'String','Browse...',...
    'Tag','BrowseImageDirectoryButton',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint
appdata = [];
appdata.lastValidTag = 'DefaultImageDirectoryEditBox';

h20 = uicontrol(...
    'Parent',h15,...
    'BackgroundColor',[1 1 1],...
    'Callback','CellProfiler(''DefaultImageDirectoryEditBox_Callback'',gcbo,[],guidata(gcbo))',...
    'Position',[335 70 420 24],...
    'String','',...
    'Style','edit',...
    'Tag','DefaultImageDirectoryEditBox',...
    'Behavior',get(0,'defaultuicontrolBehavior')); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'DefaultImageDirectoryHelp';

h21 = uicontrol(...
    'Parent',h15,...
    'BackgroundColor',[.7 .7 .9],...
    'Callback','handles = guidata(findobj(''tag'',''figure1''));for i = 1:length(handles.Current.HelpFilenames), if strfind(handles.Current.HelpFilenames{i},''HelpDefaultImageFolder''), Option = i;end,end,if ~isempty(Option),CPtextdisplaybox(handles.Current.Help{Option-1},''Default Image Folder Help'');end;clear ans handles Option i;',...
    'FontWeight','bold',...
    'Position',[220 71 12 22],...
    'String','?',...
    'Tag','DefaultImageFolderHelp',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'NameOutputFileText';

h22 = uicontrol(...
    'Parent',h15,...
    'BackgroundColor',[.7 .7 .9],...
    'CData',[],...
    'FontWeight','bold',...
    'HorizontalAlignment','right',...
    'Position',[435 2 68 30],...
    'String',{  'Output'; 'filename:' },...
    'Style','text',...
    'Tag','NameOutputFileText',...
    'UserData',[],...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'OutputFileNameEditBox';

h23 = uicontrol(...
    'Parent',h15,...
    'BackgroundColor',[1 1 1],...
    'Callback','CellProfiler(''OutputFileNameEditBox_Callback'',gcbo,[],guidata(gcbo))',...
    'Position',[510 8 170 22],...
    'String','',...
    'Style','edit',...
    'Tag','OutputFileNameEditBox',...
    'Behavior',get(0,'defaultuicontrolBehavior')); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'FilenamesListBox';

h24 = uicontrol(...
    'Parent',h15,...
    'BackgroundColor',[1 1 1],...
    'Callback','CellProfiler(''FilenamesListBox_Callback'',gcbo,[],guidata(gcbo))',...
    'Interruptible','off',...
    'Position',[12 8 206 105],...
    'String',{  'Listbox' },...
    'Style','listbox',...
    'Value',1,...
    'Tag','FilenamesListBox',...
    'Behavior',get(0,'defaultuicontrolBehavior')); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'DefaultOutputDirectoryText';

h25 = uicontrol(...
    'Parent',h15,...
    'BackgroundColor',[.7 .7 .9],...
    'CData',[],...
    'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Position',[235 30 100 35],...
    'String',{  'Default output'; 'folder:' },...
    'Style','text',...
    'Tag','DefaultOutputDirectoryText',...
    'UserData',[],...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'BrowseOutputDirectoryButton';

h26 = uicontrol(...
    'Parent',h15,...
    'HorizontalAlignment','left',...
    'BackgroundColor',[.7 .7 .9],...
    'Callback','CellProfiler(''BrowseOutputDirectoryButton_Callback'',gcbo,[],guidata(gcbo))',...
    'FontWeight','bold',...
    'Position',[760 43 63 20],...
    'String','Browse...',...
    'Tag','BrowseOutputDirectoryButton',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'DefaultOutputDirectoryEditBox';

h27 = uicontrol(...
    'Parent',h15,...
    'BackgroundColor',[1 1 1],...
    'Callback','CellProfiler(''DefaultOutputDirectoryEditBox_Callback'',gcbo,[],guidata(gcbo))',...
    'Position',[335 42 420 24],...
    'String','',...
    'Style','edit',...
    'Tag','DefaultOutputDirectoryEditBox',...
    'Behavior',get(0,'defaultuicontrolBehavior')); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'DefaultOutputDirectoryHelp';

h28 = uicontrol(...
    'Parent',h15,...
    'BackgroundColor',[.7 .7 .9],...
    'Callback','handles = guidata(findobj(''tag'',''figure1''));for i = 1:length(handles.Current.HelpFilenames), if strfind(handles.Current.HelpFilenames{i},''HelpDefaultOutputFolder''), Option = i;end,end,if ~isempty(Option),CPtextdisplaybox(handles.Current.Help{Option-1},''Default Output Folder Help'');end;clear ans handles Option i;',...
    'FontWeight','bold',...
    'Position',[220 45 12 22],...
    'String','?',...
    'Tag','DefaultOutputFolderHelp',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'PixelSizeText';

h29 = uicontrol(...
    'Parent',h15,...
    'BackgroundColor',[.7 .7 .9],...
    'CData',[],...
    'FontWeight','bold',...
    'HorizontalAlignment','right',...
    'Position',[342 4 70 22],...
    'String','Pixel size:',...
    'Style','text',...
    'Tag','PixelSizeText',...
    'UserData',[],...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'PixelSizeEditBox';

h30 = uicontrol(...
    'Parent',h15,...
    'BackgroundColor',[1 1 1],...
    'Callback','CellProfiler(''PixelSizeEditBox_Callback'',gcbo,[],guidata(gcbo))',...
    'Position',[417 8 25 22],...
    'String','1',...
    'Style','edit',...
    'Tag','PixelSizeEditBox',...
    'Behavior',get(0,'defaultuicontrolBehavior')); %#ok Ignore MLint

appdata = [];
appdata.lastValidTag = 'PixelSizeHelp';

h31 = uicontrol(...
    'Parent',h15,...
    'BackgroundColor',[.7 .7 .9],...
    'Callback','handles = guidata(findobj(''tag'',''figure1''));for i = 1:length(handles.Current.HelpFilenames), if strfind(handles.Current.HelpFilenames{i},''HelpPixelSize''), Option = i;end,end,if ~isempty(Option),CPtextdisplaybox(handles.Current.Help{Option-1},''Help for Pixel Size edit box'');end;clear ans handles Option i;',...
    'FontWeight','bold',...
    'Position',[335 8 12 22],...
    'String','?',...
    'Tag','PixelSizeHelp',...
    'Behavior',get(0,'defaultuicontrolBehavior'),...
    'CreateFcn', {@local_CreateFcn, '', appdata} ); %#ok Ignore MLint

hsingleton = h1;

function RemoveModuleByKeyPressFcn(Listbox_Handle,eventdata)

if strcmp(eventdata.Key,'delete') || strcmp(eventdata.Key,'backspace')
    handles = guidata(get(get(Listbox_Handle,'parent'),'parent'));
    RemoveModule_Callback(handles.figure1,[],handles)
end

function varargout = gui_mainfcn(gui_State, varargin)

gui_StateFields =  {'gui_Name'
    'gui_Singleton'
    'gui_OpeningFcn'
    'gui_OutputFcn'
    'gui_LayoutFcn'
    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error('Could not find field %s in the gui_State struct in GUI M-file %s', gui_StateFields{i}, gui_Mfile);
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % CellProfiler
    % create the GUI
    gui_Create = 1;
elseif isequal(ishandle(varargin{1}), 1) && ispc && iscom(varargin{1}) && isequal(varargin{1},gcbo)
    % CellProfiler(ACTIVEX,...)
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif ischar(varargin{1}) && numargin>1 && isequal(ishandle(varargin{2}), 1)
    % CellProfiler('CALLBACK',hObject,eventData,handles,...)
    gui_Create = 0;
else
    % CellProfiler(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = 1;
end

if gui_Create == 0
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else
        feval(varargin{:});
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end

    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.

    % Do feval on layout code in m-file if it exists
    persistent gui_hFigure %#ok Ignore MLint
    if ~isempty(gui_State.gui_LayoutFcn)
        if ishandle(gui_hFigure)
            display('CellProfiler is already running!!');
            figure(gui_hFigure);
            SplashHandle = findobj('tag','SplashScreenTag');
            if ishandle(SplashHandle)
                close(SplashHandle)
            end
            return;
        end
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);
        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        movegui(gui_hFigure,'onscreen')
    else
        if ishandle(gui_hFigure)
            display('CellProfiler is already running!!');
            SplashHandle = findobj('tag','SplashScreenTag');
            if ishandle(SplashHandle)
                close(SplashHandle)
            end
            return;
        end
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt);
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt);
        end
    end

    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');

    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end

    % If user specified 'Visible','off' in p/v pairs, don't make the figure
    % visible.
    gui_MakeVisible = 1;
    for ind=1:2:length(varargin)
        if length(varargin) == ind
            break;
        end
        len1 = min(length('visible'),length(varargin{ind}));
        len2 = min(length('off'),length(varargin{ind+1}));
        if ischar(varargin{ind}) && ischar(varargin{ind+1}) && ...
                strncmpi(varargin{ind},'visible',len1) && len2 > 1
            if strncmpi(varargin{ind+1},'off',len2)
                gui_MakeVisible = 0;
            elseif strncmpi(varargin{ind+1},'on',len2)
                gui_MakeVisible = 1;
            end
        end
    end

    % Check for figure param value pairs
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end
        try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end

    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

    if ishandle(gui_hFigure)
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

        % Make figure visible
        if gui_MakeVisible
            if any(findobj('tag','SplashScreenTag'))
                if toc < 4
                    SplashTime = 4 - toc;
                    pause(SplashTime);
                    close(findobj('tag','SplashScreenTag'));
                else
                    close(findobj('tag','SplashScreenTag'));
                end
            end
            set(gui_hFigure, 'Visible', 'on')
            if gui_Options.singleton
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        rmappdata(gui_hFigure,'InGUIInitialization');
    end

    % If handle visibility is set to 'callback', turn it on until finished with
    % OutputFcn
    if ishandle(gui_hFigure)
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end

    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end

    if ishandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end

function gui_hFigure = local_openfig(name, singleton)

% this application data is used to indicate the running mode of a GUIDE
% GUI to distinguish it from the design mode of the GUI in GUIDE.
setappdata(0,'OpenGuiWhenRunning',1);

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
try
    gui_hFigure = openfig(name, singleton, 'auto');
catch
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = openfig(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
end
rmappdata(0,'OpenGuiWhenRunning');

function SplashScreenHandle = SplashScreen
if isdeployed
    logo = imread('CPsplash.jpg','jpg');
else
    ImageFile = fullfile(fileparts(which('CellProfiler.m')),'CPsubfunctions','CPsplash.jpg');
    logo = imread(ImageFile,'jpg');
end
SplashScreenHandle = figure('MenuBar','None','NumberTitle','off','color',[1 1 1],'tag','SplashScreenTag','name','CellProfiler is loading...','color',[0.7,0.7,0.9],'Visible', 'off');
iptsetpref('ImshowBorder','tight')
imshow(logo);
set(SplashScreenHandle, 'Visible', 'on');
drawnow;

function u = memusage(h)
m = whos;
u = m.bytes;

function [svn_ver_char, CompiledOrNot] = get_svn_info(handles)
try
    if isdeployed
        CompiledOrNot = 'Compiled';
        svn_ver_char = handles.Current.svn_version_number;
    else
        CompiledOrNot = 'Developer''s Version';
        svn_ver_char = CPsvnversionnumber(handles.Preferences.DefaultModuleDirectory);
    end
catch
    svn_ver_char = '';
end
